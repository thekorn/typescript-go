--- old.jsFileImportPreservedWhenUsed.types
+++ new.jsFileImportPreservedWhenUsed.types
@@= skipped -48, +48 lines =@@
 
         vm.objects = _.mapValues(
 >vm.objects = _.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : object
->vm.objects : error
+>vm.objects : any
 >vm : object
 >objects : any
 >_.mapValues(            obj,            object => ({ ...object, [INDEX_FIELD]: index++ }),        ) : object
->_.mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: (value: T[keyof T], key: string, collection: T) => TResult) => { [P in keyof T]: TResult; }
+>_.mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult; }
 >_ : LoDashStatic
->mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: (value: T[keyof T], key: string, collection: T) => TResult) => { [P in keyof T]: TResult; }
+>mapValues : <T extends object, TResult>(obj: T | null | undefined, callback: ObjectIterator<T, TResult>) => { [P in keyof T]: TResult; }
 
             obj,
 >obj : object
@@= skipped -14, +14 lines =@@
             object => ({ ...object, [INDEX_FIELD]: index++ }),
 >object => ({ ...object, [INDEX_FIELD]: index++ }) : (object: never) => any
 >object : never
->({ ...object, [INDEX_FIELD]: index++ }) : error
->{ ...object, [INDEX_FIELD]: index++ } : error
+>({ ...object, [INDEX_FIELD]: index++ }) : any
+>{ ...object, [INDEX_FIELD]: index++ } : any
 >object : never
 >[INDEX_FIELD] : number
 >INDEX_FIELD : "__INDEX"
