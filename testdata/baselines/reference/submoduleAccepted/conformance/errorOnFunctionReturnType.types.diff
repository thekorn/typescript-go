--- old.errorOnFunctionReturnType.types
+++ new.errorOnFunctionReturnType.types
@@= skipped -7, +7 lines =@@
 
 /** @type {FunctionReturningPromise} */
 function testPromise1() {
->testPromise1 : () => Promise<number>
+>testPromise1 : () => void
 
     console.log("Nope");
 >console.log("Nope") : void
@@= skipped -12, +12 lines =@@
 
 /** @type {FunctionReturningPromise} */
 async function testPromise2() {
->testPromise2 : () => Promise<number>
+>testPromise2 : () => Promise<string>
 
     return "asd";
 >"asd" : "asd"
 }
 
 var testPromise3 = /** @type {FunctionReturningPromise} */ function() {
->testPromise3 : FunctionReturningPromise
->function() {    console.log("test")} : () => Promise<number>
+>testPromise3 : () => void
+>function() {    console.log("test")} : () => void
 
     console.log("test")
 >console.log("test") : void
@@= skipped -21, +21 lines =@@
 /** @type {FunctionReturningPromise} */
 var testPromise4 = function() {
 >testPromise4 : FunctionReturningPromise
->function() {    console.log("test")} : () => Promise<number>
+>function() {    console.log("test")} : () => void
 
     console.log("test")
 >console.log("test") : void
@@= skipped -17, +17 lines =@@
 
 /** @type {FunctionReturningNever} */
 function testNever1() {
->testNever1 : () => never
+>testNever1 : () => void
 
 }
 
 /** @type {FunctionReturningNever} */
 async function testNever2() {
->testNever2 : () => never
+>testNever2 : () => Promise<string>
 
     return "asd";
 >"asd" : "asd"
 }
 
 var testNever3 = /** @type {FunctionReturningNever} */ function() {
->testNever3 : FunctionReturningNever
->function() {    console.log("test")} : () => never
+>testNever3 : () => void
+>function() {    console.log("test")} : () => void
 
     console.log("test")
 >console.log("test") : void
@@= skipped -27, +27 lines =@@
 /** @type {FunctionReturningNever} */
 var testNever4 = function() {
 >testNever4 : FunctionReturningNever
->function() {    console.log("test")} : () => never
+>function() {    console.log("test")} : () => void
 
     console.log("test")
 >console.log("test") : void
