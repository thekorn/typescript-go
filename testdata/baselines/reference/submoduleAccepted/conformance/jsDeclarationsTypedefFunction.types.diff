--- old.jsDeclarationsTypedefFunction.types
+++ new.jsDeclarationsTypedefFunction.types
@@= skipped -15, +15 lines =@@
  * @returns {Promise<any>}
  */
 const send = handlers => new Promise((resolve, reject) => {
->send : (handlers: ResolveRejectMap) => Promise<any>
->handlers => new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : (handlers: ResolveRejectMap) => Promise<any>
->handlers : ResolveRejectMap
+>send : (handlers: { [id: string]: [Function, Function]; }) => Promise<any>
+>handlers => new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : (handlers: { [id: string]: [Function, Function]; }) => Promise<any>
+>handlers : { [id: string]: [Function, Function]; }
 >new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : Promise<any>
 >Promise : PromiseConstructor
 >(resolve, reject) => {  handlers[++id] = [resolve, reject]} : (resolve: (value: any) => void, reject: (reason?: any) => void) => void
@@= skipped -12, +12 lines =@@
   handlers[++id] = [resolve, reject]
 >handlers[++id] = [resolve, reject] : [(value: any) => void, (reason?: any) => void]
 >handlers[++id] : [Function, Function]
->handlers : ResolveRejectMap
+>handlers : { [id: string]: [Function, Function]; }
 >++id : number
 >id : number
 >[resolve, reject] : [(value: any) => void, (reason?: any) => void]
