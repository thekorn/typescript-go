--- old.overloadTag1.types
+++ new.overloadTag1.types
@@= skipped -16, +16 lines =@@
  * @returns {string | number}
  */
 export function overloaded(a,b) {
->overloaded : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>overloaded : (a: string | number, b: string | number) => string | number
 >a : string | number
 >b : string | number
 
@@= skipped -42, +42 lines =@@
 >"Invalid arguments" : "Invalid arguments"
 }
 var o1 = overloaded(1,2)
->o1 : number
->overloaded(1,2) : number
->overloaded : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>o1 : string | number
+>overloaded(1,2) : string | number
+>overloaded : (a: string | number, b: string | number) => string | number
 >1 : 1
 >2 : 2
 
 var o2 = overloaded("zero", "one")
->o2 : never
->overloaded("zero", "one") : never
->overloaded : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>o2 : string | number
+>overloaded("zero", "one") : string | number
+>overloaded : (a: string | number, b: string | number) => string | number
 >"zero" : "zero"
 >"one" : "one"
 
 var o3 = overloaded("a",false)
->o3 : string
->overloaded("a",false) : string
->overloaded : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>o3 : string | number
+>overloaded("a",false) : string | number
+>overloaded : (a: string | number, b: string | number) => string | number
 >"a" : "a"
 >false : false
 
@@= skipped -32, +32 lines =@@
  * @returns {string}
  */
 export function uncheckedInternally(a, b) {
->uncheckedInternally : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>uncheckedInternally : (a: any, b: any) => any
 >a : any
 >b : any
 
@@= skipped -10, +10 lines =@@
 >b : any
 }
 uncheckedInternally(1,2)
->uncheckedInternally(1,2) : number
->uncheckedInternally : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>uncheckedInternally(1,2) : any
+>uncheckedInternally : (a: any, b: any) => any
 >1 : 1
 >2 : 2
 
 uncheckedInternally("zero", "one")
->uncheckedInternally("zero", "one") : never
->uncheckedInternally : { (a: number, b: number): number; (a: string, b: boolean): string; }
+>uncheckedInternally("zero", "one") : any
+>uncheckedInternally : (a: any, b: any) => any
 >"zero" : "zero"
 >"one" : "one"
 
