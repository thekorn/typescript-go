--- old.thisTag1.types
+++ new.thisTag1.types
@@= skipped -5, +5 lines =@@
  * @return {number}
  */
 function f(s) {
->f : (this: { n: number; }, s: string) => number
+>f : (s: string) => number
 >s : string
 
     return this.n + s.length
->this.n + s.length : number
->this.n : number
->this : { n: number; }
->n : number
+>this.n + s.length : any
+>this.n : any
+>this : any
+>n : any
 >s.length : number
 >s : string
 >length : number
 }
 
 const o = {
->o : { f: (this: { n: number; }, s: string) => number; n: number; }
->{    f,    n: 1} : { f: (this: { n: number; }, s: string) => number; n: number; }
+>o : { f: (s: string) => number; n: number; }
+>{    f,    n: 1} : { f: (s: string) => number; n: number; }
 
     f,
->f : (this: { n: number; }, s: string) => number
+>f : (s: string) => number
 
     n: 1
 >n : number
@@= skipped -26, +26 lines =@@
 }
 o.f('hi')
 >o.f('hi') : number
->o.f : (this: { n: number; }, s: string) => number
->o : { f: (this: { n: number; }, s: string) => number; n: number; }
->f : (this: { n: number; }, s: string) => number
+>o.f : (s: string) => number
+>o : { f: (s: string) => number; n: number; }
+>f : (s: string) => number
 >'hi' : "hi"
 
