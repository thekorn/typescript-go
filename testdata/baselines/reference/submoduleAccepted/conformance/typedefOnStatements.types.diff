--- old.typedefOnStatements.types
+++ new.typedefOnStatements.types
@@= skipped -92, +92 lines =@@
  * @param {Q} q
  */
 function proof (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) {
->proof : (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q) => void
->a : A
->b : B
->c : C
->d : D
->e : E
->f : F
->g : G
->h : H
->i : I
->j : J
->k : K
->l : L
->m : M
->n : N
->o : O
->p : P
->q : Q
+>proof : (a: { a: string; }, b: { b: string; }, c: { c: string; }, d: { d: string; }, e: { e: string; }, f: { f: string; }, g: { g: string; }, h: { h: string; }, i: { i: string; }, j: { j: string; }, k: { k: string; }, l: { l: string; }, m: { m: string; }, n: { n: string; }, o: { o: string; }, p: { p: string; }, q: { q: string; }) => void
+>a : { a: string; }
+>b : { b: string; }
+>c : { c: string; }
+>d : { d: string; }
+>e : { e: string; }
+>f : { f: string; }
+>g : { g: string; }
+>h : { h: string; }
+>i : { i: string; }
+>j : { j: string; }
+>k : { k: string; }
+>l : { l: string; }
+>m : { m: string; }
+>n : { n: string; }
+>o : { o: string; }
+>p : { p: string; }
+>q : { q: string; }
 
     console.log(a.a, b.b, c.c, d.d, e.e, f.f, g.g, h.h, i.i, j.j, k.k, l.l, m.m, n.n, o.o, p.p, q.q)
 >console.log(a.a, b.b, c.c, d.d, e.e, f.f, g.g, h.h, i.i, j.j, k.k, l.l, m.m, n.n, o.o, p.p, q.q) : void
@@= skipped -25, +25 lines =@@
 >console : Console
 >log : (...data: any[]) => void
 >a.a : string
->a : A
+>a : { a: string; }
 >a : string
 >b.b : string
->b : B
+>b : { b: string; }
 >b : string
 >c.c : string
->c : C
+>c : { c: string; }
 >c : string
 >d.d : string
->d : D
+>d : { d: string; }
 >d : string
 >e.e : string
->e : E
+>e : { e: string; }
 >e : string
 >f.f : string
->f : F
+>f : { f: string; }
 >f : string
 >g.g : string
->g : G
+>g : { g: string; }
 >g : string
 >h.h : string
->h : H
+>h : { h: string; }
 >h : string
 >i.i : string
->i : I
+>i : { i: string; }
 >i : string
 >j.j : string
->j : J
+>j : { j: string; }
 >j : string
 >k.k : string
->k : K
+>k : { k: string; }
 >k : string
 >l.l : string
->l : L
+>l : { l: string; }
 >l : string
 >m.m : string
->m : M
+>m : { m: string; }
 >m : string
 >n.n : string
->n : N
+>n : { n: string; }
 >n : string
 >o.o : string
->o : O
+>o : { o: string; }
 >o : string
 >p.p : string
->p : P
+>p : { p: string; }
 >p : string
 >q.q : string
->q : Q
+>q : { q: string; }
 >q : string
 
     /** @type {Alpha} */
