--- old.checkJsxChildrenProperty4.types
+++ new.checkJsxChildrenProperty4.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 interface IUser {
     Name: string;
@@= skipped -9, +9 lines =@@
 
 interface IFetchUserProps {
     children: (user: IUser) => JSX.Element;
->children : (user: IUser) => JSX.Element
+>children : (user: IUser) => Element
 >user : IUser
 >JSX : any
 }
 
 class FetchUser extends React.Component<IFetchUserProps, any> {
 >FetchUser : FetchUser
->React.Component : React.Component<IFetchUserProps, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : Component<IFetchUserProps, any>
+>React : typeof __React
+>Component : typeof Component
 
     render() {
->render : () => JSX.Element
+>render : () => Element
 
         return this.state
->this.state            ? this.props.children(this.state.result)            : null : JSX.Element
+>this.state            ? this.props.children(this.state.result)            : null : Element
 >this.state : any
 >this : this
 >state : any
 
             ? this.props.children(this.state.result)
->this.props.children(this.state.result) : JSX.Element
->this.props.children : ((user: IUser) => JSX.Element) & React.ReactNode
->this.props : IFetchUserProps & { children?: React.ReactNode; }
+>this.props.children(this.state.result) : Element
+>this.props.children : ((user: IUser) => Element) & ReactNode
+>this.props : IFetchUserProps & { children?: ReactNode; }
 >this : this
->props : IFetchUserProps & { children?: React.ReactNode; }
->children : ((user: IUser) => JSX.Element) & React.ReactNode
+>props : IFetchUserProps & { children?: ReactNode; }
+>children : ((user: IUser) => Element) & ReactNode
 >this.state.result : any
 >this.state : any
 >this : this
@@= skipped -39, +39 lines =@@
 
 // Error
 function UserName() {
->UserName : () => JSX.Element
+>UserName : () => any
 
     return (
->(        <FetchUser>            { user => (                <h1>{ user.NAme }</h1>            ) }        </FetchUser>    ) : JSX.Element
+>(        <FetchUser>            { user => (                <h1>{ user.NAme }</h1>            ) }        </FetchUser>    ) : any
 
         <FetchUser>
-><FetchUser>            { user => (                <h1>{ user.NAme }</h1>            ) }        </FetchUser> : JSX.Element
+><FetchUser>            { user => (                <h1>{ user.NAme }</h1>            ) }        </FetchUser> : any
 >FetchUser : typeof FetchUser
 
             { user => (
->user => (                <h1>{ user.NAme }</h1>            ) : (user: IUser) => JSX.Element
->user : IUser
->(                <h1>{ user.NAme }</h1>            ) : JSX.Element
+>user => (                <h1>{ user.NAme }</h1>            ) : (user: any) => any
+>user : any
+>(                <h1>{ user.NAme }</h1>            ) : any
 
                 <h1>{ user.NAme }</h1>
-><h1>{ user.NAme }</h1> : JSX.Element
+><h1>{ user.NAme }</h1> : any
 >h1 : any
 >user.NAme : any
->user : IUser
+>user : any
 >NAme : any
 >h1 : any
 
@@= skipped -30, +30 lines =@@
 }
 
 function UserName1() {
->UserName1 : () => JSX.Element
+>UserName1 : () => any
 
     return (
->(        <FetchUser>                        { user => (                <h1>{ user.Name }</h1>            ) }            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser>    ) : JSX.Element
+>(        <FetchUser>                        { user => (                <h1>{ user.Name }</h1>            ) }            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser>    ) : any
 
         <FetchUser>
-><FetchUser>                        { user => (                <h1>{ user.Name }</h1>            ) }            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser> : JSX.Element
+><FetchUser>                        { user => (                <h1>{ user.Name }</h1>            ) }            { user => (                <h1>{ user.Name }</h1>            ) }        </FetchUser> : any
 >FetchUser : typeof FetchUser
 
 
             
             { user => (
->user => (                <h1>{ user.Name }</h1>            ) : (user: IUser) => JSX.Element
->user : IUser
->(                <h1>{ user.Name }</h1>            ) : JSX.Element
+>user => (                <h1>{ user.Name }</h1>            ) : (user: any) => any
+>user : any
+>(                <h1>{ user.Name }</h1>            ) : any
 
                 <h1>{ user.Name }</h1>
-><h1>{ user.Name }</h1> : JSX.Element
+><h1>{ user.Name }</h1> : any
 >h1 : any
->user.Name : string
->user : IUser
->Name : string
+>user.Name : any
+>user : any
+>Name : any
 >h1 : any
 
             ) }
             { user => (
->user => (                <h1>{ user.Name }</h1>            ) : (user: IUser) => JSX.Element
->user : IUser
->(                <h1>{ user.Name }</h1>            ) : JSX.Element
+>user => (                <h1>{ user.Name }</h1>            ) : (user: any) => any
+>user : any
+>(                <h1>{ user.Name }</h1>            ) : any
 
                 <h1>{ user.Name }</h1>
-><h1>{ user.Name }</h1> : JSX.Element
+><h1>{ user.Name }</h1> : any
 >h1 : any
->user.Name : string
->user : IUser
->Name : string
+>user.Name : any
+>user : any
+>Name : any
 >h1 : any
 
             ) }
