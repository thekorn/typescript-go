--- old.constructorFunctionMethodTypeParameters.types
+++ new.constructorFunctionMethodTypeParameters.types
@@= skipped -5, +5 lines =@@
  * @param {T} t
  */
 function Cls(t) {
->Cls : typeof Cls
+>Cls : <T extends string>(t: T) => void
 >t : T
 
     this.t = t;
 >this.t = t : T
 >this.t : any
->this : this
+>this : any
 >t : any
 >t : T
 }
@@= skipped -18, +18 lines =@@
  * @return {V}
  */
 Cls.prototype.topLevelComment = function (t, v) {
->Cls.prototype.topLevelComment = function (t, v) {    return v} : <V extends string>(t: T, v: V) => V
+>Cls.prototype.topLevelComment = function (t, v) {    return v} : (t: any, v: any) => any
 >Cls.prototype.topLevelComment : any
 >Cls.prototype : any
->Cls : typeof Cls
+>Cls : <T extends string>(t: T) => void
 >prototype : any
 >topLevelComment : any
->function (t, v) {    return v} : <V extends string>(t: T, v: V) => V
->t : T
->v : V
+>function (t, v) {    return v} : (t: any, v: any) => any
+>t : any
+>v : any
 
     return v
->v : V
+>v : any
 
 };
 
@@= skipped -19, +19 lines =@@
 >Cls.prototype.nestedComment =    /**     * @template {string} U     * @param {T} t     * @param {U} u     * @return {T}     */    function (t, u) {        return t    } : <U extends string>(t: T, u: U) => T
 >Cls.prototype.nestedComment : any
 >Cls.prototype : any
->Cls : typeof Cls
+>Cls : <T extends string>(t: T) => void
 >prototype : any
 >nestedComment : any
 
@@= skipped -21, +21 lines =@@
     };
 
 var c = new Cls('a');
->c : Cls<"a">
->new Cls('a') : Cls<"a">
->Cls : typeof Cls
+>c : any
+>new Cls('a') : any
+>Cls : <T extends string>(t: T) => void
 >'a' : "a"
 
 const s = c.topLevelComment('a', 'b');
->s : "b"
->c.topLevelComment('a', 'b') : "b"
->c.topLevelComment : <V extends string>(t: "a", v: V) => V
->c : Cls<"a">
->topLevelComment : <V extends string>(t: "a", v: V) => V
+>s : any
+>c.topLevelComment('a', 'b') : any
+>c.topLevelComment : any
+>c : any
+>topLevelComment : any
 >'a' : "a"
 >'b' : "b"
 
 const t = c.nestedComment('a', 'b');
->t : "a"
->c.nestedComment('a', 'b') : "a"
->c.nestedComment : <U extends string>(t: "a", u: U) => "a"
->c : Cls<"a">
->nestedComment : <U extends string>(t: "a", u: U) => "a"
+>t : any
+>c.nestedComment('a', 'b') : any
+>c.nestedComment : any
+>c : any
+>nestedComment : any
 >'a' : "a"
 >'b' : "b"
 
