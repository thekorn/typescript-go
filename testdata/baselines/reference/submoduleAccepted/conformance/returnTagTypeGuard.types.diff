--- old.returnTagTypeGuard.types
+++ new.returnTagTypeGuard.types
@@= skipped -48, +48 lines =@@
 }
 /** @param {Entry | Group} chunk */
 function f(chunk) {
->f : (chunk: Entry | Group) => string | number
+>f : (chunk: Entry | Group) => any
 >chunk : Entry | Group
 
     let x = chunk.isInit(chunk) ? chunk.c : chunk.d
->x : string | number
->chunk.isInit(chunk) ? chunk.c : chunk.d : string | number
+>x : any
+>chunk.isInit(chunk) ? chunk.c : chunk.d : any
 >chunk.isInit(chunk) : boolean
 >chunk.isInit : ((x: any) => this is Entry) | ((x: any) => false)
 >chunk : Entry | Group
 >isInit : ((x: any) => this is Entry) | ((x: any) => false)
 >chunk : Entry | Group
->chunk.c : number
+>chunk.c : any
 >chunk : Entry
->c : number
->chunk.d : string
+>c : any
+>chunk.d : any
 >chunk : Group
->d : string
+>d : any
 
     return x
->x : string | number
+>x : any
 }
 
 /**
@@= skipped -39, +39 lines =@@
 
 /** @param {boolean | number} val */
 function foo(val) {
->foo : (val: boolean | number) => void
+>foo : (val: number | boolean) => void
 >val : number | boolean
 
     if (isBoolean(val)) {
@@= skipped -21, +21 lines =@@
 
 /** @type {Cb} */
 function isNumber(x) { return typeof x === "number" }
->isNumber : (x: unknown) => x is number
->x : unknown
+>isNumber : (x: any) => x is number
+>x : any
 >typeof x === "number" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
->x : unknown
+>x : any
 >"number" : "number"
 
 /** @param {unknown} x */
@@= skipped -14, +14 lines =@@
 
     if (isNumber(x)) {
 >isNumber(x) : boolean
->isNumber : (x: unknown) => x is number
+>isNumber : (x: any) => x is number
 >x : unknown
 
         x * 2;
