--- old.jsdocTemplateTag6.types
+++ new.jsdocTemplateTag6.types
@@= skipped -6, +6 lines =@@
  * @returns {T}
  */
 function f1(x) {
->f1 : <const T>(x: T) => T
+>f1 : <T>(x: T) => T
 >x : T
 
     return x;
@@= skipped -9, +9 lines =@@
 const t1 = f1("a");
 >t1 : "a"
 >f1("a") : "a"
->f1 : <const T>(x: T) => T
+>f1 : <T>(x: T) => T
 >"a" : "a"
 
 const t2 = f1(["a", ["b", "c"]]);
 >t2 : readonly ["a", readonly ["b", "c"]]
 >f1(["a", ["b", "c"]]) : readonly ["a", readonly ["b", "c"]]
->f1 : <const T>(x: T) => T
+>f1 : <T>(x: T) => T
 >["a", ["b", "c"]] : ["a", ["b", "c"]]
 >"a" : "a"
 >["b", "c"] : ["b", "c"]
@@= skipped -16, +16 lines =@@
 const t3 = f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
 >t3 : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
 >f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
->f1 : <const T>(x: T) => T
+>f1 : <T>(x: T) => T
 >{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: 1; b: "c"; d: ["e", 2, true, { f: "g"; }]; }
 >a : 1
 >1 : 1
@@= skipped -21, +21 lines =@@
  * @returns {T}
  */
 function f2(x) {
->f2 : <const T, U>(x: T) => T
+>f2 : <T, U>(x: T) => T
 >x : T
 
     return x;
@@= skipped -10, +10 lines =@@
 const t4 = f2('a');
 >t4 : "a"
 >f2('a') : "a"
->f2 : <const T, U>(x: T) => T
+>f2 : <T, U>(x: T) => T
 >'a' : "a"
 
 const t5 = f2(['a', ['b', 'c']]);
 >t5 : readonly ["a", readonly ["b", "c"]]
 >f2(['a', ['b', 'c']]) : readonly ["a", readonly ["b", "c"]]
->f2 : <const T, U>(x: T) => T
+>f2 : <T, U>(x: T) => T
 >['a', ['b', 'c']] : ["a", ["b", "c"]]
 >'a' : "a"
 >['b', 'c'] : ["b", "c"]
@@= skipped -16, +16 lines =@@
 const t6 = f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
 >t6 : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
 >f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
->f2 : <const T, U>(x: T) => T
+>f2 : <T, U>(x: T) => T
 >{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: 1; b: "c"; d: ["e", 2, true, { f: "g"; }]; }
 >a : 1
 >1 : 1
@@= skipped -21, +21 lines =@@
  * @returns {T[]}
  */
 function f3(x) {
->f3 : <const T>(x: T) => T[]
+>f3 : <T>(x: T) => T[]
 >x : T
 
     return [x];
@@= skipped -10, +10 lines =@@
 const t7 = f3("hello");
 >t7 : "hello"[]
 >f3("hello") : "hello"[]
->f3 : <const T>(x: T) => T[]
+>f3 : <T>(x: T) => T[]
 >"hello" : "hello"
 
 const t8 = f3("hello");
 >t8 : "hello"[]
 >f3("hello") : "hello"[]
->f3 : <const T>(x: T) => T[]
+>f3 : <T>(x: T) => T[]
 >"hello" : "hello"
 
 /**
@@= skipped -15, +15 lines =@@
  * @returns {T}
  */
 function f4(x) {
->f4 : <const T>(x: [T, T]) => T
+>f4 : <T>(x: [T, T]) => T
 >x : [T, T]
 
     return x[0];
@@= skipped -11, +11 lines =@@
 const t9 = f4([[1, "x"], [2, "y"]]);
 >t9 : readonly [1, "x"] | readonly [2, "y"]
 >f4([[1, "x"], [2, "y"]]) : readonly [1, "x"] | readonly [2, "y"]
->f4 : <const T>(x: [T, T]) => T
+>f4 : <T>(x: [T, T]) => T
 >[[1, "x"], [2, "y"]] : [[1, "x"], [2, "y"]]
 >[1, "x"] : [1, "x"]
 >1 : 1
@@= skipped -12, +12 lines =@@
 const t10 = f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]);
 >t10 : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
 >f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]) : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
->f4 : <const T>(x: [T, T]) => T
+>f4 : <T>(x: [T, T]) => T
 >[{ a: 1, b: "x" }, { a: 2, b: "y" }] : [{ a: 1; b: "x"; }, { a: 2; b: "y"; }]
 >{ a: 1, b: "x" } : { a: 1; b: "x"; }
 >a : 1
@@= skipped -19, +19 lines =@@
  * @returns {T}
  */
 function f5(obj) {
->f5 : <const T>(obj: { x: T; y: T; }) => T
+>f5 : <T>(obj: { x: T; y: T; }) => T
 >obj : { x: T; y: T; }
 
     return obj.x;
@@= skipped -11, +11 lines =@@
 const t11 = f5({ x: [1, "x"], y: [2, "y"] });
 >t11 : readonly [1, "x"] | readonly [2, "y"]
 >f5({ x: [1, "x"], y: [2, "y"] }) : readonly [1, "x"] | readonly [2, "y"]
->f5 : <const T>(obj: { x: T; y: T; }) => T
+>f5 : <T>(obj: { x: T; y: T; }) => T
 >{ x: [1, "x"], y: [2, "y"] } : { x: [1, "x"]; y: [2, "y"]; }
 >x : [1, "x"]
 >[1, "x"] : [1, "x"]
@@= skipped -14, +14 lines =@@
 const t12 = f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } });
 >t12 : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
 >f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } }) : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
->f5 : <const T>(obj: { x: T; y: T; }) => T
+>f5 : <T>(obj: { x: T; y: T; }) => T
 >{ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } } : { x: { a: 1; b: "x"; }; y: { a: 2; b: "y"; }; }
 >x : { a: 1; b: "x"; }
 >{ a: 1, b: "x" } : { a: 1; b: "x"; }
@@= skipped -32, +32 lines =@@
      * @param {U} x
      */
     foo(x) {
->foo : <const U>(x: U) => U
+>foo : <U>(x: U) => U
 >x : U
 
         return x;
@@= skipped -29, +29 lines =@@
 const t14 = t13.foo(["a", ["b", "c"]]);
 >t14 : readonly ["a", readonly ["b", "c"]]
 >t13.foo(["a", ["b", "c"]]) : readonly ["a", readonly ["b", "c"]]
->t13.foo : <const U>(x: U) => U
+>t13.foo : <U>(x: U) => U
 >t13 : C<{ readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }>
->foo : <const U>(x: U) => U
+>foo : <U>(x: U) => U
 >["a", ["b", "c"]] : ["a", ["b", "c"]]
 >"a" : "a"
 >["b", "c"] : ["b", "c"]
@@= skipped -15, +15 lines =@@
  * @returns {T}
  */
 function f6(...args) {
->f6 : <const T extends readonly unknown[]>(...args: T) => T
+>f6 : <T extends readonly unknown[]>(...args: T) => T
 >args : T
 
     return args;
@@= skipped -9, +9 lines =@@
 const t15 = f6(1, 'b', { a: 1, b: 'x' });
 >t15 : readonly [1, "b", { readonly a: 1; readonly b: "x"; }]
 >f6(1, 'b', { a: 1, b: 'x' }) : readonly [1, "b", { readonly a: 1; readonly b: "x"; }]
->f6 : <const T extends readonly unknown[]>(...args: T) => T
+>f6 : <T extends readonly unknown[]>(...args: T) => T
 >1 : 1
 >'b' : "b"
 >{ a: 1, b: 'x' } : { a: 1; b: "x"; }
