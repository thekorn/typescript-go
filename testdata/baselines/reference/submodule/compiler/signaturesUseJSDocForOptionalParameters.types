//// [tests/cases/compiler/signaturesUseJSDocForOptionalParameters.ts] ////

=== jsDocOptionality.js ===
function MyClass() {
>MyClass : () => void

  this.prop = null;
>this.prop = null : null
>this.prop : any
>this : any
>prop : any
}
/**
 * @param  {string} required
 * @param  {string} [notRequired]
 * @returns {MyClass}
 */
MyClass.prototype.optionalParam = function(required, notRequired) {
>MyClass.prototype.optionalParam = function(required, notRequired) {    return this;} : (required: any, notRequired: any) => any
>MyClass.prototype.optionalParam : any
>MyClass.prototype : any
>MyClass : () => void
>prototype : any
>optionalParam : any
>function(required, notRequired) {    return this;} : (required: any, notRequired: any) => any
>required : any
>notRequired : any

    return this;
>this : any

};
let pInst = new MyClass();
>pInst : any
>new MyClass() : any
>MyClass : () => void

let c1 = pInst.optionalParam('hello')
>c1 : any
>pInst.optionalParam('hello') : any
>pInst.optionalParam : any
>pInst : any
>optionalParam : any
>'hello' : "hello"

let c2 = pInst.optionalParam('hello', null)
>c2 : any
>pInst.optionalParam('hello', null) : any
>pInst.optionalParam : any
>pInst : any
>optionalParam : any
>'hello' : "hello"

