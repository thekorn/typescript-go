--- old.narrowByInstanceof.symbols
+++ new.narrowByInstanceof.symbols
@@= skipped -2, +2 lines =@@
 === narrowByInstanceof.ts ===
 interface A { a: string }
 >A : Symbol(A, Decl(narrowByInstanceof.ts, 0, 0))
->a : Symbol(A.a, Decl(narrowByInstanceof.ts, 0, 13))
+>a : Symbol(a, Decl(narrowByInstanceof.ts, 0, 13))
 
 interface B { b: string }
 >B : Symbol(B, Decl(narrowByInstanceof.ts, 0, 25))
->b : Symbol(B.b, Decl(narrowByInstanceof.ts, 1, 13))
+>b : Symbol(b, Decl(narrowByInstanceof.ts, 1, 13))
 
 interface C { c: string }
 >C : Symbol(C, Decl(narrowByInstanceof.ts, 1, 25))
->c : Symbol(C.c, Decl(narrowByInstanceof.ts, 2, 13))
+>c : Symbol(c, Decl(narrowByInstanceof.ts, 2, 13))
 
 type AA = {
 >AA : Symbol(AA, Decl(narrowByInstanceof.ts, 2, 25))
@@= skipped -96, +96 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     public check(o: any) {
->check : Symbol(PersonMixin.check, Decl(narrowByInstanceof.ts, 42, 36))
+>check : Symbol(check, Decl(narrowByInstanceof.ts, 42, 36))
 >o : Symbol(o, Decl(narrowByInstanceof.ts, 43, 17))
 
         return typeof o === "object" && o !== null && o instanceof Person;
@@= skipped -19, +19 lines =@@
 >Person : Symbol(Person, Decl(narrowByInstanceof.ts, 48, 30))
 
     work(): void { console.log("work") }
->work : Symbol(Person.work, Decl(narrowByInstanceof.ts, 50, 14))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>work : Symbol(work, Decl(narrowByInstanceof.ts, 50, 14))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 
     sayHi(): void { console.log("Hi") }
->sayHi : Symbol(Person.sayHi, Decl(narrowByInstanceof.ts, 51, 40))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>sayHi : Symbol(sayHi, Decl(narrowByInstanceof.ts, 51, 40))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 }
 
 class Car {
 >Car : Symbol(Car, Decl(narrowByInstanceof.ts, 53, 1))
 
     sayHi(): void { console.log("Wof Wof") }
->sayHi : Symbol(Car.sayHi, Decl(narrowByInstanceof.ts, 55, 11))
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>sayHi : Symbol(sayHi, Decl(narrowByInstanceof.ts, 55, 11))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 }
 
 function test(o: Person | Car) {
@@= skipped -33, +33 lines =@@
 >cls : Symbol(cls, Decl(narrowByInstanceof.ts, 48, 5))
 
         console.log("Is Person");
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 
         (o as Person).work()
->(o as Person).work : Symbol(Person.work, Decl(narrowByInstanceof.ts, 50, 14))
+>(o as Person).work : Symbol(work, Decl(narrowByInstanceof.ts, 50, 14))
 >o : Symbol(o, Decl(narrowByInstanceof.ts, 59, 14))
 >Person : Symbol(Person, Decl(narrowByInstanceof.ts, 48, 30))
->work : Symbol(Person.work, Decl(narrowByInstanceof.ts, 50, 14))
+>work : Symbol(work, Decl(narrowByInstanceof.ts, 50, 14))
     }
     else {
         console.log("Is Car")
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 
         o.sayHi();
 >o.sayHi : Symbol(sayHi, Decl(narrowByInstanceof.ts, 55, 11), Decl(narrowByInstanceof.ts, 51, 40))
