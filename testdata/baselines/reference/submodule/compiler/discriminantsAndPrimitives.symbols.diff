--- old.discriminantsAndPrimitives.symbols
+++ new.discriminantsAndPrimitives.symbols
@@= skipped -6, +6 lines =@@
 >Foo : Symbol(Foo, Decl(discriminantsAndPrimitives.ts, 0, 0))
 
     kind: "foo";
->kind : Symbol(Foo.kind, Decl(discriminantsAndPrimitives.ts, 2, 15))
+>kind : Symbol(kind, Decl(discriminantsAndPrimitives.ts, 2, 15))
 
     name: string;
->name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
 }
 
 interface Bar {
 >Bar : Symbol(Bar, Decl(discriminantsAndPrimitives.ts, 5, 1))
 
     kind: "bar";
->kind : Symbol(Bar.kind, Decl(discriminantsAndPrimitives.ts, 7, 15))
+>kind : Symbol(kind, Decl(discriminantsAndPrimitives.ts, 7, 15))
 
     length: string;
->length : Symbol(Bar.length, Decl(discriminantsAndPrimitives.ts, 8, 16))
+>length : Symbol(length, Decl(discriminantsAndPrimitives.ts, 8, 16))
 }
 
 function f1(x: Foo | Bar | string) {
@@= skipped -32, +32 lines =@@
 
             case 'foo':
                 x.name;
->x.name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>x.name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
 >x : Symbol(x, Decl(discriminantsAndPrimitives.ts, 12, 12))
->name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
         }
     }
 }
@@= skipped -23, +23 lines =@@
 
             case 'foo':
                 x.name;
->x.name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>x.name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
 >x : Symbol(x, Decl(discriminantsAndPrimitives.ts, 21, 12))
->name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
         }
     }
 }
@@= skipped -24, +24 lines =@@
 
             case 'foo':
                 x.name;
->x.name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>x.name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
 >x : Symbol(x, Decl(discriminantsAndPrimitives.ts, 30, 12))
->name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
         }
     }
 }
@@= skipped -24, +24 lines =@@
 
             case 'foo':
                 x.name;
->x.name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>x.name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
 >x : Symbol(x, Decl(discriminantsAndPrimitives.ts, 39, 12))
->name : Symbol(Foo.name, Decl(discriminantsAndPrimitives.ts, 3, 16))
+>name : Symbol(name, Decl(discriminantsAndPrimitives.ts, 3, 16))
         }
     }
 }
@@= skipped -13, +13 lines =@@
 >EnumTypeNode : Symbol(EnumTypeNode, Decl(discriminantsAndPrimitives.ts, 46, 1))
 
     Pattern = "Pattern",
->Pattern : Symbol(EnumTypeNode.Pattern, Decl(discriminantsAndPrimitives.ts, 50, 25))
+>Pattern : Symbol(Pattern, Decl(discriminantsAndPrimitives.ts, 50, 25))
 
     Disjunction = "Disjunction",
->Disjunction : Symbol(EnumTypeNode.Disjunction, Decl(discriminantsAndPrimitives.ts, 51, 24))
+>Disjunction : Symbol(Disjunction, Decl(discriminantsAndPrimitives.ts, 51, 24))
 }
 
 type NodeA = Disjunction | Pattern;
@@= skipped -15, +15 lines =@@
 >NodeBase : Symbol(NodeBase, Decl(discriminantsAndPrimitives.ts, 55, 35))
 
     type: NodeA["type"]
->type : Symbol(NodeBase.type, Decl(discriminantsAndPrimitives.ts, 57, 20))
+>type : Symbol(type, Decl(discriminantsAndPrimitives.ts, 57, 20))
 >NodeA : Symbol(NodeA, Decl(discriminantsAndPrimitives.ts, 53, 1))
 }
 
@@= skipped -9, +9 lines =@@
 >NodeBase : Symbol(NodeBase, Decl(discriminantsAndPrimitives.ts, 55, 35))
 
     type: EnumTypeNode.Disjunction
->type : Symbol(Disjunction.type, Decl(discriminantsAndPrimitives.ts, 61, 40))
+>type : Symbol(type, Decl(discriminantsAndPrimitives.ts, 61, 40))
 >EnumTypeNode : Symbol(EnumTypeNode, Decl(discriminantsAndPrimitives.ts, 46, 1))
->Disjunction : Symbol(EnumTypeNode.Disjunction, Decl(discriminantsAndPrimitives.ts, 51, 24))
+>Disjunction : Symbol(Disjunction, Decl(discriminantsAndPrimitives.ts, 51, 24))
 
     alternatives: string[]
->alternatives : Symbol(Disjunction.alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
+>alternatives : Symbol(alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
 }
 
 interface Pattern extends NodeBase {
@@= skipped -13, +13 lines =@@
 >NodeBase : Symbol(NodeBase, Decl(discriminantsAndPrimitives.ts, 55, 35))
 
     type: EnumTypeNode.Pattern
->type : Symbol(Pattern.type, Decl(discriminantsAndPrimitives.ts, 66, 36))
+>type : Symbol(type, Decl(discriminantsAndPrimitives.ts, 66, 36))
 >EnumTypeNode : Symbol(EnumTypeNode, Decl(discriminantsAndPrimitives.ts, 46, 1))
->Pattern : Symbol(EnumTypeNode.Pattern, Decl(discriminantsAndPrimitives.ts, 50, 25))
+>Pattern : Symbol(Pattern, Decl(discriminantsAndPrimitives.ts, 50, 25))
 
     elements: string[]
->elements : Symbol(Pattern.elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
+>elements : Symbol(elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
 }
 
 let n!: NodeA
@@= skipped -18, +18 lines =@@
 >type : Symbol(type, Decl(discriminantsAndPrimitives.ts, 61, 40), Decl(discriminantsAndPrimitives.ts, 66, 36))
 
     n.alternatives.slice()
->n.alternatives.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
->n.alternatives : Symbol(Disjunction.alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
+>n.alternatives.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
+>n.alternatives : Symbol(alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
 >n : Symbol(n, Decl(discriminantsAndPrimitives.ts, 71, 3))
->alternatives : Symbol(Disjunction.alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
+>alternatives : Symbol(alternatives, Decl(discriminantsAndPrimitives.ts, 62, 34))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
 }
 else {
     n.elements.slice() // n should be narrowed to Pattern
->n.elements.slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
->n.elements : Symbol(Pattern.elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
+>n.elements.slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
+>n.elements : Symbol(elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
 >n : Symbol(n, Decl(discriminantsAndPrimitives.ts, 71, 3))
->elements : Symbol(Pattern.elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
->slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --))
+>elements : Symbol(elements, Decl(discriminantsAndPrimitives.ts, 67, 30))
+>slice : Symbol(slice, Decl(lib.es5.d.ts, --, --))
 }
 
