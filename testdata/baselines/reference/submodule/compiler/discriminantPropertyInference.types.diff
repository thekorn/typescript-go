--- old.discriminantPropertyInference.types
+++ new.discriminantPropertyInference.types
@@= skipped -30, +30 lines =@@
 >Props : Props
 
 declare function f(options: DiscriminatorTrue | DiscriminatorFalse): any;
->f : (options: DiscriminatorTrue | DiscriminatorFalse) => any
+>f : (options: DiscriminatorFalse | DiscriminatorTrue) => any
 >options : DiscriminatorFalse | DiscriminatorTrue
 
 // simple inference
 f({
 >f({    disc: true,    cb: s => parseInt(s)}) : any
->f : (options: DiscriminatorTrue | DiscriminatorFalse) => any
+>f : (options: DiscriminatorFalse | DiscriminatorTrue) => any
 >{    disc: true,    cb: s => parseInt(s)} : { disc: true; cb: (s: string) => number; }
 
     disc: true,
@@= skipped -18, +18 lines =@@
 >s => parseInt(s) : (s: string) => number
 >s : string
 >parseInt(s) : number
->parseInt : (string: string, radix?: number) => number
+>parseInt : (string: string, radix?: number | undefined) => number
 >s : string
 
 });
@@= skipped -8, +8 lines =@@
 // simple inference
 f({
 >f({    disc: false,    cb: n => n.toFixed()}) : any
->f : (options: DiscriminatorTrue | DiscriminatorFalse) => any
+>f : (options: DiscriminatorFalse | DiscriminatorTrue) => any
 >{    disc: false,    cb: n => n.toFixed()} : { disc: false; cb: (n: number) => string; }
 
     disc: false,
@@= skipped -12, +12 lines =@@
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
 });
 
 // simple inference when strict-null-checks are enabled
 f({
 >f({    disc: undefined,    cb: n => n.toFixed()}) : any
->f : (options: DiscriminatorTrue | DiscriminatorFalse) => any
+>f : (options: DiscriminatorFalse | DiscriminatorTrue) => any
 >{    disc: undefined,    cb: n => n.toFixed()} : { disc: undefined; cb: (n: number) => string; }
 
     disc: undefined,
@@= skipped -21, +21 lines =@@
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
 });
 
 // requires checking type information since discriminator is missing from object
 f({
 >f({    cb: n => n.toFixed()}) : any
->f : (options: DiscriminatorTrue | DiscriminatorFalse) => any
+>f : (options: DiscriminatorFalse | DiscriminatorTrue) => any
 >{    cb: n => n.toFixed()} : { cb: (n: number) => string; }
 
     cb: n => n.toFixed()
@@= skipped -17, +17 lines =@@
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
 });
 
