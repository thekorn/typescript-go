//// [tests/cases/compiler/jsxIntrinsicElementsTypeArgumentErrors.tsx] ////

=== jsxIntrinsicElementsTypeArgumentErrors.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : typeof React

// opening + closing
const a = <div<>></div>; // empty type args
>a : Element
><div<>></div> : Element
>div : any
>div : any

const b = <div<number,>></div>; // trailing comma type args
>b : Element
><div<number,>></div> : Element
>div : any
>div : any

const c = <div<Missing>></div>; // nonexistant type args
>c : Element
><div<Missing>></div> : Element
>div : any
>div : any

const d = <div<Missing<AlsoMissing>>></div>; // nested missing type args
>d : Element
><div<Missing<AlsoMissing>>></div> : Element
>div : any
>div : any

const e = <div<Record<object, object>>></div>; // existing but incorrect nested type args
>e : Element
><div<Record<object, object>>></div> : Element
>div : any
>div : any

const f = <div<number>></div>; // existing type argument with no internal issues
>f : Element
><div<number>></div> : Element
>div : any
>div : any

// self-closing
const g = <div<>/>; // empty type args
>g : Element
><div<>/> : Element
>div : any

const h = <div<number,>/>; // trailing comma type args
>h : Element
><div<number,>/> : Element
>div : any

const i = <div<Missing>/>; // nonexistant type args
>i : Element
><div<Missing>/> : Element
>div : any

const j = <div<Missing<AlsoMissing>>/>; // nested missing type args
>j : Element
><div<Missing<AlsoMissing>>/> : Element
>div : any

const k = <div<Record<object, object>>/>; // existing but incorrect nested type args
>k : Element
><div<Record<object, object>>/> : Element
>div : any

const l = <div<number>/>; // existing type argument with no internal issues
>l : Element
><div<number>/> : Element
>div : any

