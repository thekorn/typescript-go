--- old.templateLiteralsInTypes.types
+++ new.templateLiteralsInTypes.types
@@= skipped -1, +1 lines =@@
 
 === templateLiteralsInTypes.ts ===
 const f = (hdr: string, val: number) => `${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n`;
->f : (hdr: string, val: number) => `${string}:\t${number}\r\n`
->(hdr: string, val: number) => `${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : (hdr: string, val: number) => `${string}:\t${number}\r\n`
+>f : (hdr: string, val: number) => `${string}:	${number}
+`
+>(hdr: string, val: number) => `${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : (hdr: string, val: number) => `${string}:	${number}
+`
 >hdr : string
 >val : number
->`${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : `${string}:\t${number}\r\n`
->`${hdr}:\t${val}\r\n` : `${string}:\t${number}\r\n`
+>`${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : `${string}:	${number}
+`
+>`${hdr}:\t${val}\r\n` : `${string}:	${number}
+`
 >hdr : string
 >val : number
 
 f("x").foo;
 >f("x").foo : any
->f("x") : `${string}:\t${number}\r\n`
->f : (hdr: string, val: number) => `${string}:\t${number}\r\n`
+>f("x") : `${string}:	${number}
+`
+>f : (hdr: string, val: number) => `${string}:	${number}
+`
 >"x" : "x"
 >foo : any
 
