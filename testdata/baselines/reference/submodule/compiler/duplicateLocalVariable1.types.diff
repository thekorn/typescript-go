--- old.duplicateLocalVariable1.types
+++ new.duplicateLocalVariable1.types
@@= skipped -11, +11 lines =@@
 
 var TestFileDir = ".\\TempTestFiles";
 >TestFileDir : string
->".\\TempTestFiles" : ".\\TempTestFiles"
+>".\\TempTestFiles" : ".\TempTestFiles"
 
 export class TestCase {
 >TestCase : TestCase
@@= skipped -310, +310 lines =@@
 >fileExists : any
 >TestFileDir + "\\Test.txt" : string
 >TestFileDir : string
->"\\Test.txt" : "\\Test.txt"
+>"\\Test.txt" : "\Test.txt"
 
         }));
     testRunner.addTest(new TestCase("Check file doesn't exist",
@@= skipped -25, +25 lines =@@
 >fileExists : any
 >TestFileDir + "\\Test2.txt" : string
 >TestFileDir : string
->"\\Test2.txt" : "\\Test2.txt"
+>"\\Test2.txt" : "\Test2.txt"
 
         }));
 
@@= skipped -27, +27 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\somedir\\readme.txt" : "C:\\somedir\\readme.txt"
+>"C:\\somedir\\readme.txt" : "C:\somedir\readme.txt"
 
                 FileManager.FileBuffer.isTextFile("C:\\spaces path\\myapp.str") &&
 >FileManager.FileBuffer.isTextFile("C:\\spaces path\\myapp.str") : any
@@= skipped -9, +9 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\spaces path\\myapp.str" : "C:\\spaces path\\myapp.str"
+>"C:\\spaces path\\myapp.str" : "C:\spaces path\myapp.str"
 
                 FileManager.FileBuffer.isTextFile("C:\\somedir\\code.js"))
 >FileManager.FileBuffer.isTextFile("C:\\somedir\\code.js") : any
@@= skipped -9, +9 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\somedir\\code.js" : "C:\\somedir\\code.js"
+>"C:\\somedir\\code.js" : "C:\somedir\code.js"
 
         }));
     testRunner.addTest(new TestCase("Check makefile match",
@@= skipped -22, +22 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\some dir\\makefile" : "C:\\some dir\\makefile"
+>"C:\\some dir\\makefile" : "C:\some dir\makefile"
 
         }));
     testRunner.addTest(new TestCase("Check binary file doesn't match",
@@= skipped -25, +25 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\somedir\\app.exe" : "C:\\somedir\\app.exe"
+>"C:\\somedir\\app.exe" : "C:\somedir\app.exe"
 
             !FileManager.FileBuffer.isTextFile("C:\\somedir\\my lib.dll"));
 >!FileManager.FileBuffer.isTextFile("C:\\somedir\\my lib.dll") : boolean
@@= skipped -10, +10 lines =@@
 >FileManager : any
 >FileBuffer : any
 >isTextFile : any
->"C:\\somedir\\my lib.dll" : "C:\\somedir\\my lib.dll"
+>"C:\\somedir\\my lib.dll" : "C:\somedir\my lib.dll"
 
         }));
 
@@= skipped -65, +65 lines =@@
 >app.rootDirectory : any
 >app : any
 >rootDirectory : any
->".\\" : ".\\"
+>".\\" : ".\"
 
                    app.encodings[0] === "ascii" &&
 >app.encodings[0] === "ascii" : boolean
@@= skipped -40, +40 lines =@@
 >App : any
 >App : any
 >["-dir=C:\\test dir", "-lineEndings=LF", "-encodings=utf16be,ascii", "-recurse=false", "-fixlines"] : string[]
->"-dir=C:\\test dir" : "-dir=C:\\test dir"
+>"-dir=C:\\test dir" : "-dir=C:\test dir"
 >"-lineEndings=LF" : "-lineEndings=LF"
 >"-encodings=utf16be,ascii" : "-encodings=utf16be,ascii"
 >"-recurse=false" : "-recurse=false"
@@= skipped -47, +47 lines =@@
 >app.rootDirectory : any
 >app : any
 >rootDirectory : any
->"C:\\test dir" : "C:\\test dir"
+>"C:\\test dir" : "C:\test dir"
 
                    app.encodings[0] === "utf16be" &&
 >app.encodings[0] === "utf16be" : boolean
@@= skipped -52, +52 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\noBOM.txt" : string
 >TestFileDir : string
->"\\noBOM.txt" : "\\noBOM.txt"
+>"\\noBOM.txt" : "\noBOM.txt"
 
             return fb.bom === 'none' && fb.encoding === 'utf8';
 >fb.bom === 'none' && fb.encoding === 'utf8' : boolean
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF8BOM.txt" : string
 >TestFileDir : string
->"\\UTF8BOM.txt" : "\\UTF8BOM.txt"
+>"\\UTF8BOM.txt" : "\UTF8BOM.txt"
 
             return fb.bom === 'utf8' && fb.encoding === 'utf8';
 >fb.bom === 'utf8' && fb.encoding === 'utf8' : boolean
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF16BE.txt" : string
 >TestFileDir : string
->"\\UTF16BE.txt" : "\\UTF16BE.txt"
+>"\\UTF16BE.txt" : "\UTF16BE.txt"
 
             return fb.bom === 'utf16be' && fb.encoding === 'utf16be';
 >fb.bom === 'utf16be' && fb.encoding === 'utf16be' : boolean
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF16LE.txt" : string
 >TestFileDir : string
->"\\UTF16LE.txt" : "\\UTF16LE.txt"
+>"\\UTF16LE.txt" : "\UTF16LE.txt"
 
             return fb.bom === 'utf16le' && fb.encoding === 'utf16le';
 >fb.bom === 'utf16le' && fb.encoding === 'utf16le' : boolean
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\1bytefile.txt" : string
 >TestFileDir : string
->"\\1bytefile.txt" : "\\1bytefile.txt"
+>"\\1bytefile.txt" : "\1bytefile.txt"
 
             return fb.bom === 'none' && fb.encoding === 'utf8';
 >fb.bom === 'none' && fb.encoding === 'utf8' : boolean
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\0bytefile.txt" : string
 >TestFileDir : string
->"\\0bytefile.txt" : "\\0bytefile.txt"
+>"\\0bytefile.txt" : "\0bytefile.txt"
 
             return fb.bom === 'none' && fb.encoding === 'utf8';
 >fb.bom === 'none' && fb.encoding === 'utf8' : boolean
@@= skipped -38, +38 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF8BOM.txt" : string
 >TestFileDir : string
->"\\UTF8BOM.txt" : "\\UTF8BOM.txt"
+>"\\UTF8BOM.txt" : "\UTF8BOM.txt"
 
             var chars = [];
 >chars : any[]
@@= skipped -67, +67 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF8BOM.txt" : string
 >TestFileDir : string
->"\\UTF8BOM.txt" : "\\UTF8BOM.txt"
+>"\\UTF8BOM.txt" : "\UTF8BOM.txt"
 
             var chars = [];
 >chars : any[]
@@= skipped -165, +165 lines =@@
 >filename : string
 >TestFileDir + "\\tmpUTF16LE.txt" : string
 >TestFileDir : string
->"\\tmpUTF16LE.txt" : "\\tmpUTF16LE.txt"
+>"\\tmpUTF16LE.txt" : "\tmpUTF16LE.txt"
 
             var fb = new FileManager.FileBuffer(14);
 >fb : any
@@= skipped -143, +143 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF8BOM.txt" : string
 >TestFileDir : string
->"\\UTF8BOM.txt" : "\\UTF8BOM.txt"
+>"\\UTF8BOM.txt" : "\UTF8BOM.txt"
 
         var result = fb.readByte(200);
 >result : any
@@= skipped -36, +36 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\UTF8BOM.txt" : string
 >TestFileDir : string
->"\\UTF8BOM.txt" : "\\UTF8BOM.txt"
+>"\\UTF8BOM.txt" : "\UTF8BOM.txt"
 
         fb.writeByte(5, 200);
 >fb.writeByte(5, 200) : any
@@= skipped -37, +37 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\utf16leNonBmp.txt" : string
 >TestFileDir : string
->"\\utf16leNonBmp.txt" : "\\utf16leNonBmp.txt"
+>"\\utf16leNonBmp.txt" : "\utf16leNonBmp.txt"
 
             if (savedFile.encoding !== 'utf16le') {
 >savedFile.encoding !== 'utf16le' : boolean
@@= skipped -79, +79 lines =@@
 >FileBuffer : any
 >TestFileDir + "\\utf8NonBmp.txt" : string
 >TestFileDir : string
->"\\utf8NonBmp.txt" : "\\utf8NonBmp.txt"
+>"\\utf8NonBmp.txt" : "\utf8NonBmp.txt"
 
             if (savedFile.encoding !== 'utf8') {
 >savedFile.encoding !== 'utf8' : boolean
@@= skipped -74, +74 lines =@@
 >filename : string
 >TestFileDir + "\\tmpUTF8nonBmp.txt" : string
 >TestFileDir : string
->"\\tmpUTF8nonBmp.txt" : "\\tmpUTF8nonBmp.txt"
+>"\\tmpUTF8nonBmp.txt" : "\tmpUTF8nonBmp.txt"
 
             var fb = new FileManager.FileBuffer(15);
 >fb : any
@@= skipped -126, +126 lines =@@
 >filename : string
 >TestFileDir + "\\utf8BadLeadByte.txt" : string
 >TestFileDir : string
->"\\utf8BadLeadByte.txt" : "\\utf8BadLeadByte.txt"
+>"\\utf8BadLeadByte.txt" : "\utf8BadLeadByte.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -32, +32 lines =@@
 >filename : string
 >TestFileDir + "\\utf8InvalidTail.txt" : string
 >TestFileDir : string
->"\\utf8InvalidTail.txt" : "\\utf8InvalidTail.txt"
+>"\\utf8InvalidTail.txt" : "\utf8InvalidTail.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -32, +32 lines =@@
 >filename : string
 >TestFileDir + "\\ansi.txt" : string
 >TestFileDir : string
->"\\ansi.txt" : "\\ansi.txt"
+>"\\ansi.txt" : "\ansi.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -32, +32 lines =@@
 >filename : string
 >TestFileDir + "\\utf16leInvalidSurrogate.txt" : string
 >TestFileDir : string
->"\\utf16leInvalidSurrogate.txt" : "\\utf16leInvalidSurrogate.txt"
+>"\\utf16leInvalidSurrogate.txt" : "\utf16leInvalidSurrogate.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -32, +32 lines =@@
 >filename : string
 >TestFileDir + "\\UTF16BEInvalidSurrogate.txt" : string
 >TestFileDir : string
->"\\UTF16BEInvalidSurrogate.txt" : "\\UTF16BEInvalidSurrogate.txt"
+>"\\UTF16BEInvalidSurrogate.txt" : "\UTF16BEInvalidSurrogate.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -32, +32 lines =@@
 >filename : string
 >TestFileDir + "\\utf16leMissingTrailSurrogate.txt" : string
 >TestFileDir : string
->"\\utf16leMissingTrailSurrogate.txt" : "\\utf16leMissingTrailSurrogate.txt"
+>"\\utf16leMissingTrailSurrogate.txt" : "\utf16leMissingTrailSurrogate.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -33, +33 lines =@@
 >filename : string
 >TestFileDir + "\\charCountASCII.txt" : string
 >TestFileDir : string
->"\\charCountASCII.txt" : "\\charCountASCII.txt"
+>"\\charCountASCII.txt" : "\charCountASCII.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
@@= skipped -59, +59 lines =@@
 >filename : string
 >TestFileDir + "\\controlChar.txt" : string
 >TestFileDir : string
->"\\controlChar.txt" : "\\controlChar.txt"
+>"\\controlChar.txt" : "\controlChar.txt"
 
             var fb = new FileManager.FileBuffer(filename);
 >fb : any
