//// [tests/cases/compiler/isolatedDeclarationErrorsExpandoFunctions.ts] ////

=== isolatedDeclarationErrorsExpandoFunctions.ts ===
export function foo() {}
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }

foo.apply = () => {}
>foo.apply = () => {} : () => void
>foo.apply : () => void
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>apply : () => void
>() => {} : () => void

foo.call = ()=> {}
>foo.call = ()=> {} : () => void
>foo.call : () => void
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>call : () => void
>()=> {} : () => void

foo.bind = ()=> {}
>foo.bind = ()=> {} : () => void
>foo.bind : () => void
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>bind : () => void
>()=> {} : () => void

foo.caller = ()=> {}
>foo.caller = ()=> {} : () => void
>foo.caller : () => void
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>caller : () => void
>()=> {} : () => void

foo.toString = ()=> {}
>foo.toString = ()=> {} : () => void
>foo.toString : () => void
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>toString : () => void
>()=> {} : () => void

foo.length = 10
>foo.length = 10 : 10
>foo.length : number
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>length : number
>10 : 10

foo.length = 10
>foo.length = 10 : 10
>foo.length : number
>foo : { (): void; apply: () => void; call: () => void; bind: () => void; caller: () => void; toString: () => void; length: number; }
>length : number
>10 : 10

