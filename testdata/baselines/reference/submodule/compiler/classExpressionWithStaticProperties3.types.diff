--- old.classExpressionWithStaticProperties3.types
+++ new.classExpressionWithStaticProperties3.types
@@= skipped -4, +4 lines =@@
 >console : any
 
 const arr: {y(): number}[] = [];
->arr : { y(): number; }[]
+>arr : { y: () => number; }[]
 >y : () => number
 >[] : undefined[]
 
@@= skipped -15, +15 lines =@@
 
     arr.push(class C {
 >arr.push(class C {        static x = i;        static y = () => C.x * 2;    }) : number
->arr.push : (...items: { y(): number; }[]) => number
->arr : { y(): number; }[]
->push : (...items: { y(): number; }[]) => number
+>arr.push : (...items: { y: () => number; }[]) => number
+>arr : { y: () => number; }[]
+>push : (...items: { y: () => number; }[]) => number
 >class C {        static x = i;        static y = () => C.x * 2;    } : typeof C
 >C : typeof C
 
@@= skipped -23, +23 lines =@@
 }
 arr.forEach(C => console.log(C.y()));
 >arr.forEach(C => console.log(C.y())) : void
->arr.forEach : (callbackfn: (value: { y(): number; }, index: number, array: { y(): number; }[]) => void, thisArg?: any) => void
->arr : { y(): number; }[]
->forEach : (callbackfn: (value: { y(): number; }, index: number, array: { y(): number; }[]) => void, thisArg?: any) => void
->C => console.log(C.y()) : (C: { y(): number; }) => any
->C : { y(): number; }
+>arr.forEach : (callbackfn: (value: { y: () => number; }, index: number, array: { y: () => number; }[]) => void, thisArg?: any) => void
+>arr : { y: () => number; }[]
+>forEach : (callbackfn: (value: { y: () => number; }, index: number, array: { y: () => number; }[]) => void, thisArg?: any) => void
+>C => console.log(C.y()) : (C: { y: () => number; }) => any
+>C : { y: () => number; }
 >console.log(C.y()) : any
 >console.log : any
 >console : any
 >log : any
 >C.y() : number
 >C.y : () => number
->C : { y(): number; }
+>C : { y: () => number; }
 >y : () => number
 
