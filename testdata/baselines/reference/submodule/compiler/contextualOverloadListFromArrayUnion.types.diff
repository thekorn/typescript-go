--- old.contextualOverloadListFromArrayUnion.types
+++ new.contextualOverloadListFromArrayUnion.types
@@= skipped -47, +47 lines =@@
 const resizeObserver = new ResizeObserver(([entry]) => {
 >resizeObserver : ResizeObserver
 >new ResizeObserver(([entry]) => {    entry}) : ResizeObserver
->ResizeObserver : { new (callback: globalThis.ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }
->([entry]) => {    entry} : ([entry]: ResizeObserverEntry[]) => void
+>ResizeObserver : { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }
+>([entry]) => {    entry} : (__0: ResizeObserverEntry[]) => void
 >entry : ResizeObserverEntry
 
     entry
@@= skipped -25, +25 lines =@@
 }
 
 export function series<T>(tasks: Task<T>[], callback: Callback<T[]>): void {
->series : <T>(tasks: Task<T>[], callback: Callback<T[]>) => void
->tasks : Task<T>[]
+>series : <T>(tasks: (Task<T>)[], callback: Callback<T[]>) => void
+>tasks : (Task<T>)[]
 >callback : Callback<T[]>
 
     let index = 0
@@= skipped -18, +18 lines =@@
         let task = tasks[index]
 >task : Task<T>
 >tasks[index] : Task<T>
->tasks : Task<T>[]
+>tasks : (Task<T>)[]
 >index : number
 
         if (!task) {
@@= skipped -53, +53 lines =@@
 
 series([
 >series([    cb => setTimeout(() => cb(null, 1), 300),    cb => setTimeout(() => cb(null, 2), 200),    cb => setTimeout(() => cb(null, 3), 100),], (error, results) => {    if (error) {        console.error(error)    } else {        console.log(results)    }}) : void
->series : <T>(tasks: Task<T>[], callback: Callback<T[]>) => void
+>series : <T>(tasks: (Task<T>)[], callback: Callback<T[]>) => void
 >[    cb => setTimeout(() => cb(null, 1), 300),    cb => setTimeout(() => cb(null, 2), 200),    cb => setTimeout(() => cb(null, 3), 100),] : ((cb: Callback<unknown>) => number)[]
 
     cb => setTimeout(() => cb(null, 1), 300),
 >cb => setTimeout(() => cb(null, 1), 300) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 1), 300) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 1) : () => unknown
 >cb(null, 1) : unknown
 >cb : Callback<unknown>
@@= skipped -18, +18 lines =@@
 >cb => setTimeout(() => cb(null, 2), 200) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 2), 200) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 2) : () => unknown
 >cb(null, 2) : unknown
 >cb : Callback<unknown>
@@= skipped -11, +11 lines =@@
 >cb => setTimeout(() => cb(null, 3), 100) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 3), 100) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 3) : () => unknown
 >cb(null, 3) : unknown
 >cb : Callback<unknown>
