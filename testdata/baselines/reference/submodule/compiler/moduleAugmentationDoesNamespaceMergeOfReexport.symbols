//// [tests/cases/compiler/moduleAugmentationDoesNamespaceMergeOfReexport.ts] ////

=== file.ts ===
export namespace Root {
>Root : Symbol(Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))

    export interface Foo {
>Foo : Symbol(Foo, Decl(file.ts, 0, 23), Decl(augment.ts, 3, 27))

        x: number;
>x : Symbol(x, Decl(file.ts, 1, 26))
    }
}
=== reexport.ts ===

export * from "./file";
=== augment.ts ===
import * as ns from "./reexport";
>ns : Symbol(ns, Decl(augment.ts, 0, 6))

declare module "./reexport" {
>"./reexport" : Symbol("reexport", Decl(reexport.ts, 0, 0), Decl(augment.ts, 0, 33))

    export namespace Root {
>Root : Symbol(Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))

        export interface Foo {
>Foo : Symbol(Foo, Decl(file.ts, 0, 23), Decl(augment.ts, 3, 27))

            self: Foo;
>self : Symbol(self, Decl(augment.ts, 4, 30))
>Foo : Symbol(Foo, Decl(file.ts, 0, 23), Decl(augment.ts, 3, 27))
        }
    }
}

declare const f: ns.Root.Foo;
>f : Symbol(f, Decl(augment.ts, 10, 13))
>ns : Symbol(ns, Decl(augment.ts, 0, 6))
>Root : Symbol(Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))
>Foo : Symbol(Foo, Decl(file.ts, 0, 23), Decl(augment.ts, 3, 27))

f.x;
>f.x : Symbol(x, Decl(file.ts, 1, 26))
>f : Symbol(f, Decl(augment.ts, 10, 13))
>x : Symbol(x, Decl(file.ts, 1, 26))

f.self;
>f.self : Symbol(self, Decl(augment.ts, 4, 30))
>f : Symbol(f, Decl(augment.ts, 10, 13))
>self : Symbol(self, Decl(augment.ts, 4, 30))

f.self.x;
>f.self.x : Symbol(x, Decl(file.ts, 1, 26))
>f.self : Symbol(self, Decl(augment.ts, 4, 30))
>f : Symbol(f, Decl(augment.ts, 10, 13))
>self : Symbol(self, Decl(augment.ts, 4, 30))
>x : Symbol(x, Decl(file.ts, 1, 26))

f.self.self;
>f.self.self : Symbol(self, Decl(augment.ts, 4, 30))
>f.self : Symbol(self, Decl(augment.ts, 4, 30))
>f : Symbol(f, Decl(augment.ts, 10, 13))
>self : Symbol(self, Decl(augment.ts, 4, 30))
>self : Symbol(self, Decl(augment.ts, 4, 30))

