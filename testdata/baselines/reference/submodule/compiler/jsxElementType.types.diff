--- old.jsxElementType.types
+++ new.jsxElementType.types
@@= skipped -44, +44 lines =@@
 
     interface IntrinsicElements {
       ['my-custom-element']: React.DOMAttributes<unknown>;
->['my-custom-element'] : React.DOMAttributes<unknown>
+>['my-custom-element'] : DOMAttributes<unknown>
 >'my-custom-element' : "my-custom-element"
 >React : any
     }
@@= skipped -12, +12 lines =@@
 >title : string
 
 const RenderElement = ({ title }: { title: string }) => <div>{title}</div>;
->RenderElement : ({ title }: { title: string; }) => JSX.Element
->({ title }: { title: string }) => <div>{title}</div> : ({ title }: { title: string; }) => JSX.Element
+>RenderElement : (__0: { title: string; }) => Element
+>({ title }: { title: string }) => <div>{title}</div> : (__0: { title: string; }) => Element
 >title : string
 >title : string
-><div>{title}</div> : JSX.Element
+><div>{title}</div> : Element
 >div : any
 >title : string
 >div : any
 
 Component = RenderElement;
->Component = RenderElement : ({ title }: { title: string; }) => JSX.Element
+>Component = RenderElement : (__0: { title: string; }) => Element
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+>RenderElement : (__0: { title: string; }) => Element
 
 <RenderElement />;
-><RenderElement /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+><RenderElement /> : Element
+>RenderElement : (__0: { title: string; }) => Element
 
 <RenderElement title="react" />;
-><RenderElement title="react" /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+><RenderElement title="react" /> : Element
+>RenderElement : (__0: { title: string; }) => Element
 >title : string
 
 <RenderElement excessProp />;
-><RenderElement excessProp /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+><RenderElement excessProp /> : Element
+>RenderElement : (__0: { title: string; }) => Element
 >excessProp : true
 
 const RenderString = ({ title }: { title: string }) => title;
->RenderString : ({ title }: { title: string; }) => string
->({ title }: { title: string }) => title : ({ title }: { title: string; }) => string
+>RenderString : (__0: { title: string; }) => string
+>({ title }: { title: string }) => title : (__0: { title: string; }) => string
 >title : string
 >title : string
 >title : string
 
 Component = RenderString;
->Component = RenderString : ({ title }: { title: string; }) => string
+>Component = RenderString : (__0: { title: string; }) => string
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderString : ({ title }: { title: string; }) => string
+>RenderString : (__0: { title: string; }) => string
 
 <RenderString />;
-><RenderString /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
+><RenderString /> : Element
+>RenderString : (__0: { title: string; }) => string
 
 <RenderString title="react" />;
-><RenderString title="react" /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
+><RenderString title="react" /> : Element
+>RenderString : (__0: { title: string; }) => string
 >title : string
 
 <RenderString excessProp />;
-><RenderString excessProp /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
+><RenderString excessProp /> : Element
+>RenderString : (__0: { title: string; }) => string
 >excessProp : true
 
 const RenderNumber = ({ title }: { title: string }) => title.length;
->RenderNumber : ({ title }: { title: string; }) => number
->({ title }: { title: string }) => title.length : ({ title }: { title: string; }) => number
+>RenderNumber : (__0: { title: string; }) => number
+>({ title }: { title: string }) => title.length : (__0: { title: string; }) => number
 >title : string
 >title : string
 >title.length : number
@@= skipped -64, +64 lines =@@
 >length : number
 
 Component = RenderNumber;
->Component = RenderNumber : ({ title }: { title: string; }) => number
+>Component = RenderNumber : (__0: { title: string; }) => number
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderNumber : ({ title }: { title: string; }) => number
+>RenderNumber : (__0: { title: string; }) => number
 
 <RenderNumber />;
-><RenderNumber /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
+><RenderNumber /> : Element
+>RenderNumber : (__0: { title: string; }) => number
 
 <RenderNumber title="react" />;
-><RenderNumber title="react" /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
+><RenderNumber title="react" /> : Element
+>RenderNumber : (__0: { title: string; }) => number
 >title : string
 
 <RenderNumber excessProp />;
-><RenderNumber excessProp /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
+><RenderNumber excessProp /> : Element
+>RenderNumber : (__0: { title: string; }) => number
 >excessProp : true
 
 const RenderArray = ({ title }: { title: string }) => [title];
->RenderArray : ({ title }: { title: string; }) => string[]
->({ title }: { title: string }) => [title] : ({ title }: { title: string; }) => string[]
+>RenderArray : (__0: { title: string; }) => string[]
+>({ title }: { title: string }) => [title] : (__0: { title: string; }) => string[]
 >title : string
 >title : string
 >[title] : string[]
 >title : string
 
 Component = RenderArray;
->Component = RenderArray : ({ title }: { title: string; }) => string[]
+>Component = RenderArray : (__0: { title: string; }) => string[]
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderArray : ({ title }: { title: string; }) => string[]
+>RenderArray : (__0: { title: string; }) => string[]
 
 <RenderArray />;
-><RenderArray /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
+><RenderArray /> : Element
+>RenderArray : (__0: { title: string; }) => string[]
 
 <RenderArray title="react" />;
-><RenderArray title="react" /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
+><RenderArray title="react" /> : Element
+>RenderArray : (__0: { title: string; }) => string[]
 >title : string
 
 <RenderArray excessProp />;
-><RenderArray excessProp /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
+><RenderArray excessProp /> : Element
+>RenderArray : (__0: { title: string; }) => string[]
 >excessProp : true
 
 // React Server Component
 const RenderPromise = async ({ title }: { title: string }) => "react";
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
->async ({ title }: { title: string }) => "react" : ({ title }: { title: string; }) => Promise<string>
+>RenderPromise : (__0: { title: string; }) => Promise<string>
+>async ({ title }: { title: string }) => "react" : (__0: { title: string; }) => Promise<string>
 >title : string
 >title : string
 >"react" : "react"
 
 Component = RenderPromise;
->Component = RenderPromise : ({ title }: { title: string; }) => Promise<string>
+>Component = RenderPromise : (__0: { title: string; }) => Promise<string>
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 
 <RenderPromise />;
-><RenderPromise /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+><RenderPromise /> : Element
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 
 <RenderPromise title="react" />;
-><RenderPromise title="react" /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+><RenderPromise title="react" /> : Element
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 >title : string
 
 <RenderPromise excessProp />;
-><RenderPromise excessProp /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+><RenderPromise excessProp /> : Element
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 >excessProp : true
 
 // Class components still work
 class RenderStringClass extends React.Component<{ title: string }> {
 >RenderStringClass : RenderStringClass
->React.Component : React.Component<{ title: string; }, {}, any>
+>React.Component : Component<{ title: string; }, {}, any>
 >React : typeof React
->Component : typeof React.Component
+>Component : typeof Component
 >title : string
 
   render() {
@@= skipped -85, +85 lines =@@
 
     return this.props.title;
 >this.props.title : string
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<{ title: string; }>
+>this.props : Readonly<{ children?: ReactNode; }> & Readonly<{ title: string; }>
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<{ title: string; }>
+>props : Readonly<{ children?: ReactNode; }> & Readonly<{ title: string; }>
 >title : string
   }
 }
@@= skipped -12, +12 lines =@@
 >RenderStringClass : typeof RenderStringClass
 
 <RenderStringClass />;
-><RenderStringClass /> : JSX.Element
+><RenderStringClass /> : Element
 >RenderStringClass : typeof RenderStringClass
 
 <RenderStringClass title="react" />;
-><RenderStringClass title="react" /> : JSX.Element
+><RenderStringClass title="react" /> : Element
 >RenderStringClass : typeof RenderStringClass
 >title : string
 
 <RenderStringClass excessProp />;
-><RenderStringClass excessProp /> : JSX.Element
+><RenderStringClass excessProp /> : Element
 >RenderStringClass : typeof RenderStringClass
 >excessProp : true
 
 // Host element types still work
 <div />;
-><div /> : JSX.Element
+><div /> : Element
 >div : any
 
 <my-custom-element />;
-><my-custom-element /> : JSX.Element
+><my-custom-element /> : Element
 >my-custom-element : any
 
 // Undeclared host element types are still rejected
 <boop />;
-><boop /> : JSX.Element
+><boop /> : Element
 >boop : any
 
 <my-undeclared-custom-element />;
-><my-undeclared-custom-element /> : JSX.Element
+><my-undeclared-custom-element /> : Element
 >my-undeclared-custom-element : any
 
 // Highlighting various ecosystem compat issues
@@= skipped -36, +36 lines =@@
 // https://github.com/software-mansion/react-native-gesture-handler/blob/79017e5e7cc2e82e6467851f870920ff836ee04f/src/components/GestureComponents.tsx#L139-L146
 interface ReactNativeFlatListProps<Item> {}
 function ReactNativeFlatList(
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
   props: {},
 >props : {}
 
   ref: React.ForwardedRef<typeof ReactNativeFlatList>
->ref : React.ForwardedRef<(props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null>
+>ref : ForwardedRef<(props: {}, ref: ForwardedRef<???>) => null>
 >React : any
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
 ) {
   return null;
 }
 <ReactNativeFlatList />;
-><ReactNativeFlatList /> : JSX.Element
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+><ReactNativeFlatList /> : Element
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
 // testing higher-order component compat
 function f1<T extends (props: {}) => React.ReactElement<any>>(Component: T) {
->f1 : <T extends (props: {}) => React.ReactElement<any>>(Component: T) => JSX.Element
+>f1 : <T extends (props: {}) => ReactElement<any>>(Component: T) => Element
 >props : {}
 >React : any
 >Component : T
 
   return <Component />;
-><Component /> : JSX.Element
+><Component /> : Element
 >Component : T
 }
 
 <Unresolved />;
-><Unresolved /> : JSX.Element
+><Unresolved /> : Element
 >Unresolved : any
 
 <Unresolved foo="abc" />;
-><Unresolved foo="abc" /> : JSX.Element
+><Unresolved foo="abc" /> : Element
 >Unresolved : any
 >foo : string
 
@@= skipped -52, +52 lines =@@
 }
 
 <a:b a="accepted" />;
-><a:b a="accepted" /> : JSX.Element
+><a:b a="accepted" /> : Element
 >a : any
 >b : any
 >a : string
 
 <a:b b="rejected" />;
-><a:b b="rejected" /> : JSX.Element
+><a:b b="rejected" /> : Element
 >a : any
 >b : any
 >b : string
 
 <a:b a="accepted" b="rejected" />;
-><a:b a="accepted" b="rejected" /> : JSX.Element
+><a:b a="accepted" b="rejected" /> : Element
 >a : any
 >b : any
 >a : string
