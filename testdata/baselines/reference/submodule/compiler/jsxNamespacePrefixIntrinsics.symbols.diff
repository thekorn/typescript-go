--- old.jsxNamespacePrefixIntrinsics.symbols
+++ new.jsxNamespacePrefixIntrinsics.symbols
@@= skipped -7, +7 lines =@@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(jsxNamespacePrefixIntrinsics.tsx, 0, 23))
 
     "ns:element": {
->"ns:element" : Symbol(IntrinsicElements["ns:element"], Decl(jsxNamespacePrefixIntrinsics.tsx, 1, 31))
+>"ns:element" : Symbol("ns:element", Decl(jsxNamespacePrefixIntrinsics.tsx, 1, 31))
 
       "ns:attribute": string;
 >"ns:attribute" : Symbol("ns:attribute", Decl(jsxNamespacePrefixIntrinsics.tsx, 2, 19))
 
     },
     "ns:NamespacedUpcaseAlsoIntrinsic": any,
->"ns:NamespacedUpcaseAlsoIntrinsic" : Symbol(IntrinsicElements["ns:NamespacedUpcaseAlsoIntrinsic"], Decl(jsxNamespacePrefixIntrinsics.tsx, 4, 6))
+>"ns:NamespacedUpcaseAlsoIntrinsic" : Symbol("ns:NamespacedUpcaseAlsoIntrinsic", Decl(jsxNamespacePrefixIntrinsics.tsx, 4, 6))
 
     "NS:NamespacedUpcaseAlsoIntrinsic": any
->"NS:NamespacedUpcaseAlsoIntrinsic" : Symbol(IntrinsicElements["NS:NamespacedUpcaseAlsoIntrinsic"], Decl(jsxNamespacePrefixIntrinsics.tsx, 5, 44))
+>"NS:NamespacedUpcaseAlsoIntrinsic" : Symbol("NS:NamespacedUpcaseAlsoIntrinsic", Decl(jsxNamespacePrefixIntrinsics.tsx, 5, 44))
   }
 }
 
 const valid = <ns:element ns:attribute="yep" />;
 >valid : Symbol(valid, Decl(jsxNamespacePrefixIntrinsics.tsx, 10, 5))
->ns:attribute : Symbol(ns:attribute, Decl(jsxNamespacePrefixIntrinsics.tsx, 10, 25))
+>ns:attribute : Symbol("þmissing", Decl(jsxNamespacePrefixIntrinsics.tsx, 10, 25))
 
 const validUpcase1 = <ns:NamespacedUpcaseAlsoIntrinsic />;
 >validUpcase1 : Symbol(validUpcase1, Decl(jsxNamespacePrefixIntrinsics.tsx, 11, 5))
@@= skipped -33, +33 lines =@@
 
 const invalid3 = <ns:element ns:invalid="nope" />;
 >invalid3 : Symbol(invalid3, Decl(jsxNamespacePrefixIntrinsics.tsx, 16, 5))
->ns:invalid : Symbol(ns:invalid, Decl(jsxNamespacePrefixIntrinsics.tsx, 16, 28))
+>ns:invalid : Symbol("þmissing", Decl(jsxNamespacePrefixIntrinsics.tsx, 16, 28))
 
