--- old.deeplyNestedMappedTypes.types
+++ new.deeplyNestedMappedTypes.types
@@= skipped -212, +212 lines =@@
 })
 
 function problematicFunction1(ors: Input[]): Output[] {
->problematicFunction1 : (ors: Input[]) => Output[]
+>problematicFunction1 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +8 lines =@@
 }
 
 function problematicFunction2<T extends Output[]>(ors: Input[]): T {
->problematicFunction2 : <T extends Output[]>(ors: Input[]) => T
+>problematicFunction2 : <T extends { level1: { level2: { foo: string; bar: string; }; }; }[]>(ors: { level1: { level2: { foo: string; }; }; }[]) => T
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +8 lines =@@
 }
 
 function problematicFunction3(ors: (typeof Input.static)[]): Output[] {
->problematicFunction3 : (ors: (typeof Input.static)[]) => Output[]
+>problematicFunction3 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
 >Input.static : { level1: { level2: { foo: string; }; }; }
 >Input : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; }>; }>; }>
