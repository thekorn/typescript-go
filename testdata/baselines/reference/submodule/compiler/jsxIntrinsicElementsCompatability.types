//// [tests/cases/compiler/jsxIntrinsicElementsCompatability.tsx] ////

=== jsxIntrinsicElementsCompatability.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : typeof React

function SomeComponent<T extends 'button' | 'a'>(props: { element?: T } & JSX.IntrinsicElements[T]): JSX.Element {
>SomeComponent : <T extends "a" | "button">(props: { element?: T | undefined; } & IntrinsicElements[T]) => Element
>props : { element?: T | undefined; } & IntrinsicElements[T]
>element : T | undefined
>JSX : any
>JSX : any

    // Just so the return value is RectElement, the rendered element doesnt matter
    return <div />
><div /> : Element
>div : any
}

function Test<T extends 'button' | 'a'>(el: T) {
>Test : <T extends "a" | "button">(el: T) => Element
>el : T

    return <SomeComponent element={el} />
><SomeComponent element={el} /> : Element
>SomeComponent : <T extends "a" | "button">(props: { element?: T | undefined; } & IntrinsicElements[T]) => Element
>element : T
>el : T
}
