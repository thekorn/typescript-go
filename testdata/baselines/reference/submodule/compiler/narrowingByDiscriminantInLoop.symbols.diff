--- old.narrowingByDiscriminantInLoop.symbols
+++ new.narrowingByDiscriminantInLoop.symbols
@@= skipped -11, +11 lines =@@
 >IDLTypeDescription : Symbol(IDLTypeDescription, Decl(narrowingByDiscriminantInLoop.ts, 2, 63))
 
     origin: string;
->origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
 }
 
 interface InterfaceType {
 >InterfaceType : Symbol(InterfaceType, Decl(narrowingByDiscriminantInLoop.ts, 6, 1))
 
     members: IDLMemberTypes[];
->members : Symbol(InterfaceType.members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
+>members : Symbol(members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
 >IDLMemberTypes : Symbol(IDLMemberTypes, Decl(narrowingByDiscriminantInLoop.ts, 0, 0))
 }
 
@@= skipped -15, +15 lines =@@
 >OperationMemberType : Symbol(OperationMemberType, Decl(narrowingByDiscriminantInLoop.ts, 10, 1))
 
     type: "operation";
->type : Symbol(OperationMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
+>type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
     idlType: IDLTypeDescription;
->idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >IDLTypeDescription : Symbol(IDLTypeDescription, Decl(narrowingByDiscriminantInLoop.ts, 2, 63))
 }
 
@@= skipped -11, +11 lines =@@
 >ConstantMemberType : Symbol(ConstantMemberType, Decl(narrowingByDiscriminantInLoop.ts, 15, 1))
 
     type: "const";
->type : Symbol(ConstantMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30))
+>type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30))
 
     idlType: string;
->idlType : Symbol(ConstantMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
 }
 
 function insertInterface(callbackType: InterfaceType) {
@@= skipped -13, +13 lines =@@
 
     for (const memberType of callbackType.members) {
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 23, 14))
->callbackType.members : Symbol(InterfaceType.members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
+>callbackType.members : Symbol(members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
 >callbackType : Symbol(callbackType, Decl(narrowingByDiscriminantInLoop.ts, 22, 25))
->members : Symbol(InterfaceType.members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
+>members : Symbol(members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
 
         if (memberType.type === "const") {
 >memberType.type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30), Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
@@= skipped -10, +10 lines =@@
 >type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30), Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
             memberType.idlType;  // string
->memberType.idlType : Symbol(ConstantMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 23, 14))
->idlType : Symbol(ConstantMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
         }
         else if (memberType.type === "operation") {
->memberType.type : Symbol(OperationMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
+>memberType.type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 23, 14))
->type : Symbol(OperationMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
+>type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
             memberType.idlType.origin;  // string
->memberType.idlType.origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
->memberType.idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>memberType.idlType.origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 23, 14))
->idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
->origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
 
             (memberType.idlType as IDLTypeDescription);
->memberType.idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 23, 14))
->idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >IDLTypeDescription : Symbol(IDLTypeDescription, Decl(narrowingByDiscriminantInLoop.ts, 2, 63))
         }
     }
@@= skipped -32, +32 lines =@@
 
     for (const memberType of callbackType.members) {
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 35, 14))
->callbackType.members : Symbol(InterfaceType.members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
+>callbackType.members : Symbol(members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
 >callbackType : Symbol(callbackType, Decl(narrowingByDiscriminantInLoop.ts, 34, 26))
->members : Symbol(InterfaceType.members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
+>members : Symbol(members, Decl(narrowingByDiscriminantInLoop.ts, 8, 25))
 
         if (memberType.type === "operation") {
 >memberType.type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30), Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
@@= skipped -10, +10 lines =@@
 >type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30), Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
             memberType.idlType.origin;  // string
->memberType.idlType.origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
->memberType.idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>memberType.idlType.origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 35, 14))
->idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
->origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
         }
     }
 }
@@= skipped -20, +20 lines =@@
 >type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 17, 30), Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
         memberType.idlType;  // string
->memberType.idlType : Symbol(ConstantMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 42, 13))
->idlType : Symbol(ConstantMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 18, 18))
     }
     else if (memberType.type === "operation") {
->memberType.type : Symbol(OperationMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
+>memberType.type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 42, 13))
->type : Symbol(OperationMemberType.type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
+>type : Symbol(type, Decl(narrowingByDiscriminantInLoop.ts, 12, 31))
 
         memberType.idlType.origin;  // string
->memberType.idlType.origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
->memberType.idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>memberType.idlType.origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>memberType.idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
 >memberType : Symbol(memberType, Decl(narrowingByDiscriminantInLoop.ts, 42, 13))
->idlType : Symbol(OperationMemberType.idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
->origin : Symbol(IDLTypeDescription.origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
+>idlType : Symbol(idlType, Decl(narrowingByDiscriminantInLoop.ts, 13, 22))
+>origin : Symbol(origin, Decl(narrowingByDiscriminantInLoop.ts, 4, 30))
     }
 }
 
@@= skipped -24, +24 lines =@@
 >A : Symbol(A, Decl(narrowingByDiscriminantInLoop.ts, 49, 1))
 
     kind: true;
->kind : Symbol(A.kind, Decl(narrowingByDiscriminantInLoop.ts, 53, 13))
+>kind : Symbol(kind, Decl(narrowingByDiscriminantInLoop.ts, 53, 13))
 
     prop: { a: string; };
->prop : Symbol(A.prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
 >a : Symbol(a, Decl(narrowingByDiscriminantInLoop.ts, 55, 11))
 }
 
@@= skipped -11, +11 lines =@@
 >B : Symbol(B, Decl(narrowingByDiscriminantInLoop.ts, 56, 1))
 
     kind: false;
->kind : Symbol(B.kind, Decl(narrowingByDiscriminantInLoop.ts, 58, 13))
+>kind : Symbol(kind, Decl(narrowingByDiscriminantInLoop.ts, 58, 13))
 
     prop: { b: string; }
->prop : Symbol(B.prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
 >b : Symbol(b, Decl(narrowingByDiscriminantInLoop.ts, 60, 11))
 }
 
@@= skipped -26, +26 lines =@@
 
             x.prop.a;
 >x.prop.a : Symbol(a, Decl(narrowingByDiscriminantInLoop.ts, 55, 11))
->x.prop : Symbol(A.prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
+>x.prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
 >x : Symbol(x, Decl(narrowingByDiscriminantInLoop.ts, 63, 12))
->prop : Symbol(A.prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
 >a : Symbol(a, Decl(narrowingByDiscriminantInLoop.ts, 55, 11))
         }
         if (x.kind === false) {
@@= skipped -12, +12 lines =@@
 
             x.prop.b;
 >x.prop.b : Symbol(b, Decl(narrowingByDiscriminantInLoop.ts, 60, 11))
->x.prop : Symbol(B.prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
+>x.prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
 >x : Symbol(x, Decl(narrowingByDiscriminantInLoop.ts, 63, 12))
->prop : Symbol(B.prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
 >b : Symbol(b, Decl(narrowingByDiscriminantInLoop.ts, 60, 11))
         }
     }
@@= skipped -22, +22 lines =@@
 
             x.prop.a;
 >x.prop.a : Symbol(a, Decl(narrowingByDiscriminantInLoop.ts, 55, 11))
->x.prop : Symbol(A.prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
+>x.prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
 >x : Symbol(x, Decl(narrowingByDiscriminantInLoop.ts, 75, 12))
->prop : Symbol(A.prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 54, 15))
 >a : Symbol(a, Decl(narrowingByDiscriminantInLoop.ts, 55, 11))
         }
         if (!x.kind) {
@@= skipped -12, +12 lines =@@
 
             x.prop.b;
 >x.prop.b : Symbol(b, Decl(narrowingByDiscriminantInLoop.ts, 60, 11))
->x.prop : Symbol(B.prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
+>x.prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
 >x : Symbol(x, Decl(narrowingByDiscriminantInLoop.ts, 75, 12))
->prop : Symbol(B.prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
+>prop : Symbol(prop, Decl(narrowingByDiscriminantInLoop.ts, 59, 16))
 >b : Symbol(b, Decl(narrowingByDiscriminantInLoop.ts, 60, 11))
         }
     }
