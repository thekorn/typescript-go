--- old.objectGroupBy.types
+++ new.objectGroupBy.types
@@= skipped -3, +3 lines =@@
 const basic = Object.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large');
 >basic : Partial<Record<"large" | "small", number[]>>
 >Object.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large') : Partial<Record<"large" | "small", number[]>>
->Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >Object : ObjectConstructor
->groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >[0, 2, 8] : number[]
 >0 : 0
 >2 : 2
@@= skipped -19, +19 lines =@@
 const chars = Object.groupBy('a string', c => c);
 >chars : Partial<Record<string, string[]>>
 >Object.groupBy('a string', c => c) : Partial<Record<string, string[]>>
->Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >Object : ObjectConstructor
->groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >'a string' : "a string"
 >c => c : (c: string) => string
 >c : string
@@= skipped -21, +21 lines =@@
 const byRole = Object.groupBy(employees, x => x.role);
 >byRole : Partial<Record<"ic" | "manager", Employee[]>>
 >Object.groupBy(employees, x => x.role) : Partial<Record<"ic" | "manager", Employee[]>>
->Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >Object : ObjectConstructor
->groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >employees : Set<Employee>
 >x => x.role : (x: Employee) => "ic" | "manager"
 >x : Employee
@@= skipped -13, +13 lines =@@
 const byNonKey = Object.groupBy(employees, x => x);
 >byNonKey : Partial<Record<PropertyKey, Employee[]>>
 >Object.groupBy(employees, x => x) : Partial<Record<PropertyKey, Employee[]>>
->Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>Object.groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >Object : ObjectConstructor
->groupBy : <K extends PropertyKey, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
+>groupBy : <K extends PropertyKey, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Partial<Record<K, T[]>>
 >employees : Set<Employee>
 >x => x : (x: Employee) => Employee
 >x : Employee
