--- old.moduleAugmentationImportsAndExports1.symbols
+++ new.moduleAugmentationImportsAndExports1.symbols
@@= skipped -8, +8 lines =@@
 >B : Symbol(B, Decl(f2.ts, 0, 0))
 
     n: number;
->n : Symbol(B.n, Decl(f2.ts, 0, 16))
+>n : Symbol(n, Decl(f2.ts, 0, 16))
 }
 
 === f3.ts ===
@@= skipped -11, +11 lines =@@
 >B : Symbol(B, Decl(f3.ts, 1, 8))
 
 A.prototype.foo = function () { return undefined; }
->A.prototype.foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
->A.prototype : Symbol(A.prototype)
+>A.prototype.foo : Symbol(foo, Decl(f3.ts, 5, 17))
+>A.prototype : Symbol(prototype)
 >A : Symbol(A, Decl(f3.ts, 0, 8))
->prototype : Symbol(A.prototype)
->foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
+>prototype : Symbol(prototype)
+>foo : Symbol(foo, Decl(f3.ts, 5, 17))
 >undefined : Symbol(undefined)
 
 declare module "./f1" {
@@= skipped -14, +14 lines =@@
 >A : Symbol(A, Decl(f1.ts, 0, 0), Decl(f3.ts, 4, 23))
 
         foo(): B;
->foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
+>foo : Symbol(foo, Decl(f3.ts, 5, 17))
 >B : Symbol(B, Decl(f3.ts, 1, 8))
     }
 }
@@= skipped -17, +17 lines =@@
 
 let b = a.foo().n;
 >b : Symbol(b, Decl(f4.ts, 4, 3))
->a.foo().n : Symbol(B.n, Decl(f2.ts, 0, 16))
->a.foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
+>a.foo().n : Symbol(n, Decl(f2.ts, 0, 16))
+>a.foo : Symbol(foo, Decl(f3.ts, 5, 17))
 >a : Symbol(a, Decl(f4.ts, 3, 3))
->foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
->n : Symbol(B.n, Decl(f2.ts, 0, 16))
+>foo : Symbol(foo, Decl(f3.ts, 5, 17))
+>n : Symbol(n, Decl(f2.ts, 0, 16))
 
