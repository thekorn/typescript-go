--- old.inferTypePredicates.types
+++ new.inferTypePredicates.types
@@= skipped -215, +215 lines =@@
 >myArray  .map((arr) => arr.list)  .filter((arr) => arr && arr.length) : (MyObj[] | undefined)[]
 >myArray  .map((arr) => arr.list)  .filter : { <S extends MyObj[] | undefined>(predicate: (value: MyObj[] | undefined, index: number, array: (MyObj[] | undefined)[]) => value is S, thisArg?: any): S[]; (predicate: (value: MyObj[] | undefined, index: number, array: (MyObj[] | undefined)[]) => unknown, thisArg?: any): (MyObj[] | undefined)[]; }
 >myArray  .map((arr) => arr.list) : (MyObj[] | undefined)[]
->myArray  .map : <U>(callbackfn: (value: { list?: MyObj[]; }, index: number, array: { list?: MyObj[]; }[]) => U, thisArg?: any) => U[]
+>myArray  .map : <U>(callbackfn: (value: { list?: MyObj[] | undefined; }, index: number, array: { list?: MyObj[] | undefined; }[]) => U, thisArg?: any) => U[]
 >myArray : MyArray
 
   .map((arr) => arr.list)
->map : <U>(callbackfn: (value: { list?: MyObj[]; }, index: number, array: { list?: MyObj[]; }[]) => U, thisArg?: any) => U[]
->(arr) => arr.list : (arr: { list?: MyObj[]; }) => MyObj[] | undefined
->arr : { list?: MyObj[]; }
+>map : <U>(callbackfn: (value: { list?: MyObj[] | undefined; }, index: number, array: { list?: MyObj[] | undefined; }[]) => U, thisArg?: any) => U[]
+>(arr) => arr.list : (arr: { list?: MyObj[] | undefined; }) => MyObj[] | undefined
+>arr : { list?: MyObj[] | undefined; }
 >arr.list : MyObj[] | undefined
->arr : { list?: MyObj[]; }
+>arr : { list?: MyObj[] | undefined; }
 >list : MyObj[] | undefined
 
   .filter((arr) => arr && arr.length)
@@= skipped -46, +46 lines =@@
 >obj => JSON.parse(obj.data) : (obj: MyObj) => any
 >obj : MyObj
 >JSON.parse(obj.data) : any
->JSON.parse : (text: string, reviver?: (this: any, key: string, value: any) => any) => any
+>JSON.parse : (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any
 >JSON : JSON
->parse : (text: string, reviver?: (this: any, key: string, value: any) => any) => any
+>parse : (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any
 >obj.data : string | undefined
 >obj : MyObj
 >data : string | undefined
@@= skipped -18, +18 lines =@@
 >myArray  .map((arr) => arr.list)  .filter((arr) => !!arr) : MyObj[][]
 >myArray  .map((arr) => arr.list)  .filter : { <S extends MyObj[] | undefined>(predicate: (value: MyObj[] | undefined, index: number, array: (MyObj[] | undefined)[]) => value is S, thisArg?: any): S[]; (predicate: (value: MyObj[] | undefined, index: number, array: (MyObj[] | undefined)[]) => unknown, thisArg?: any): (MyObj[] | undefined)[]; }
 >myArray  .map((arr) => arr.list) : (MyObj[] | undefined)[]
->myArray  .map : <U>(callbackfn: (value: { list?: MyObj[]; }, index: number, array: { list?: MyObj[]; }[]) => U, thisArg?: any) => U[]
+>myArray  .map : <U>(callbackfn: (value: { list?: MyObj[] | undefined; }, index: number, array: { list?: MyObj[] | undefined; }[]) => U, thisArg?: any) => U[]
 >myArray : MyArray
 
   .map((arr) => arr.list)
->map : <U>(callbackfn: (value: { list?: MyObj[]; }, index: number, array: { list?: MyObj[]; }[]) => U, thisArg?: any) => U[]
->(arr) => arr.list : (arr: { list?: MyObj[]; }) => MyObj[] | undefined
->arr : { list?: MyObj[]; }
+>map : <U>(callbackfn: (value: { list?: MyObj[] | undefined; }, index: number, array: { list?: MyObj[] | undefined; }[]) => U, thisArg?: any) => U[]
+>(arr) => arr.list : (arr: { list?: MyObj[] | undefined; }) => MyObj[] | undefined
+>arr : { list?: MyObj[] | undefined; }
 >arr.list : MyObj[] | undefined
->arr : { list?: MyObj[]; }
+>arr : { list?: MyObj[] | undefined; }
 >list : MyObj[] | undefined
 
   .filter((arr) => !!arr)
@@= skipped -61, +61 lines =@@
 >obj => JSON.parse(obj.data) : (obj: MyObj) => any
 >obj : MyObj
 >JSON.parse(obj.data) : any
->JSON.parse : (text: string, reviver?: (this: any, key: string, value: any) => any) => any
+>JSON.parse : (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any
 >JSON : JSON
->parse : (text: string, reviver?: (this: any, key: string, value: any) => any) => any
+>parse : (text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any
 >obj.data : string | undefined
 >obj : MyObj
 >data : string | undefined
@@= skipped -94, +94 lines =@@
 
 // Defer to explicit type guards, even when they're incorrect.
 function backwardsGuard(x: number|string): x is number {
->backwardsGuard : (x: number | string) => x is number
+>backwardsGuard : (x: string | number) => x is number
 >x : string | number
 
   return typeof x === 'string';
@@= skipped -233, +233 lines =@@
 
 // Checks that there are no string escaping issues
 function dunderguard(__x: number | string) {
->dunderguard : (__x: number | string) => __x is string
+>dunderguard : (__x: string | number) => __x is string
 >__x : string | number
 
   return typeof __x  === 'string';
@@= skipped -32, +32 lines =@@
 // inferred guards in methods
 interface NumberInferrer {
   isNumber(x: number | string): x is number;
->isNumber : (x: number | string) => x is number
+>isNumber : (x: string | number) => x is number
 >x : string | number
 }
 class Inferrer implements NumberInferrer {
 >Inferrer : Inferrer
 
   isNumber(x: number | string) {  // should ok
->isNumber : (x: number | string) => x is number
+>isNumber : (x: string | number) => x is number
 >x : string | number
 
     return typeof x === 'number';
@@= skipped -27, +27 lines =@@
 
 if (inf.isNumber(numOrStr)) {
 >inf.isNumber(numOrStr) : boolean
->inf.isNumber : (x: number | string) => x is number
+>inf.isNumber : (x: string | number) => x is number
 >inf : Inferrer
->isNumber : (x: number | string) => x is number
+>isNumber : (x: string | number) => x is number
 >numOrStr : string | number
 
   let t: number = numOrStr;  // should ok
@@= skipped -51, +51 lines =@@
 }
 
 function doNotRefineDestructuredParam({x, y}: {x: number | null, y: number}) {
->doNotRefineDestructuredParam : ({ x, y }: { x: number | null; y: number; }) => boolean
+>doNotRefineDestructuredParam : (__0: { x: number | null; y: number; }) => boolean
 >x : number | null
 >y : number
 >x : number | null
@@= skipped -148, +148 lines =@@
 }
 
 function isNumberWithThis(this: Date, x: number | string) {
->isNumberWithThis : (this: Date, x: number | string) => x is number
+>isNumberWithThis : (this: Date, x: string | number) => x is number
 >this : Date
 >x : string | number
 
@@= skipped -66, +66 lines =@@
 >bar : string
 
 const foobarPred = (fb: typeof foobar) => fb.type === "foo";
->foobarPred : (fb: typeof foobar) => fb is { type: "foo"; foo: number; }
->(fb: typeof foobar) => fb.type === "foo" : (fb: typeof foobar) => fb is { type: "foo"; foo: number; }
+>foobarPred : (fb: { type: "foo"; foo: number; } | { type: "bar"; bar: string; }) => fb is { type: "foo"; foo: number; }
+>(fb: typeof foobar) => fb.type === "foo" : (fb: { type: "foo"; foo: number; } | { type: "bar"; bar: string; }) => fb is { type: "foo"; foo: number; }
 >fb : { type: "foo"; foo: number; } | { type: "bar"; bar: string; }
 >foobar : { type: "foo"; foo: number; } | { type: "bar"; bar: string; }
 >fb.type === "foo" : boolean
@@= skipped -12, +12 lines =@@
 
 if (foobarPred(foobar)) {
 >foobarPred(foobar) : boolean
->foobarPred : (fb: typeof foobar) => fb is { type: "foo"; foo: number; }
+>foobarPred : (fb: { type: "foo"; foo: number; } | { type: "bar"; bar: string; }) => fb is { type: "foo"; foo: number; }
 >foobar : { type: "foo"; foo: number; } | { type: "bar"; bar: string; }
 
   foobar.foo;
