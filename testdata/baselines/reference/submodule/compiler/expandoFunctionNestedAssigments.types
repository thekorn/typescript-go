//// [tests/cases/compiler/expandoFunctionNestedAssigments.ts] ////

=== expandoFunctionNestedAssigments.ts ===
function Foo(): void {
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }

}
let d: number = (Foo.inVariableInit = 1);
>d : number
>(Foo.inVariableInit = 1) : 1
>Foo.inVariableInit = 1 : 1
>Foo.inVariableInit : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>inVariableInit : number
>1 : 1


function bar(p = (Foo.inNestedFunction = 1)) {
>bar : (p?: number) => void
>p : number
>(Foo.inNestedFunction = 1) : 1
>Foo.inNestedFunction = 1 : 1
>Foo.inNestedFunction : any
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>inNestedFunction : any
>1 : 1

}

(Foo.bla = { foo: 1}).foo = (Foo.baz = 1) + (Foo.bar  = 0);
>(Foo.bla = { foo: 1}).foo = (Foo.baz = 1) + (Foo.bar  = 0) : number
>(Foo.bla = { foo: 1}).foo : number
>(Foo.bla = { foo: 1}) : { foo: number; }
>Foo.bla = { foo: 1} : { foo: number; }
>Foo.bla : { foo: number; }
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>bla : { foo: number; }
>{ foo: 1} : { foo: number; }
>foo : number
>1 : 1
>foo : number
>(Foo.baz = 1) + (Foo.bar  = 0) : number
>(Foo.baz = 1) : 1
>Foo.baz = 1 : 1
>Foo.baz : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>baz : number
>1 : 1
>(Foo.bar  = 0) : 0
>Foo.bar  = 0 : 0
>Foo.bar : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>bar : number
>0 : 0

if(Foo.fromIf = 1) {
>Foo.fromIf = 1 : 1
>Foo.fromIf : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromIf : number
>1 : 1

    Foo.inIf = 1;
>Foo.inIf = 1 : 1
>Foo.inIf : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>inIf : number
>1 : 1
}

while(Foo.fromWhileCondition = 1) {
>Foo.fromWhileCondition = 1 : 1
>Foo.fromWhileCondition : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromWhileCondition : number
>1 : 1

    Foo.fromWhileBody = 1;
>Foo.fromWhileBody = 1 : 1
>Foo.fromWhileBody : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromWhileBody : number
>1 : 1
    {
        Foo.fromWhileBodyNested = 1;
>Foo.fromWhileBodyNested = 1 : 1
>Foo.fromWhileBodyNested : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromWhileBodyNested : number
>1 : 1
    }
}

do {
    Foo.fromDoBody = 1;
>Foo.fromDoBody = 1 : 1
>Foo.fromDoBody : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromDoBody : number
>1 : 1
    {
        Foo.fromDoBodyNested = 1;
>Foo.fromDoBodyNested = 1 : 1
>Foo.fromDoBodyNested : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromDoBodyNested : number
>1 : 1
    }
} while(Foo.fromDoCondition = 1);
>Foo.fromDoCondition = 1 : 1
>Foo.fromDoCondition : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromDoCondition : number
>1 : 1

for(Foo.forInit = 1; (Foo.forCond = 1) > 1; Foo.forIncr = 1){
>Foo.forInit = 1 : 1
>Foo.forInit : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>forInit : number
>1 : 1
>(Foo.forCond = 1) > 1 : boolean
>(Foo.forCond = 1) : 1
>Foo.forCond = 1 : 1
>Foo.forCond : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>forCond : number
>1 : 1
>1 : 1
>Foo.forIncr = 1 : 1
>Foo.forIncr : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>forIncr : number
>1 : 1

    Foo.fromForBody = 1;
>Foo.fromForBody = 1 : 1
>Foo.fromForBody : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForBody : number
>1 : 1
    {
        Foo.fromForBodyNested = 1;
>Foo.fromForBodyNested = 1 : 1
>Foo.fromForBodyNested : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForBodyNested : number
>1 : 1
    }
}

for(let f of (Foo.forOf = []) ){
>f : any
>(Foo.forOf = []) : undefined[]
>Foo.forOf = [] : undefined[]
>Foo.forOf : any[]
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>forOf : any[]
>[] : undefined[]

    Foo.fromForOfBody = 1;
>Foo.fromForOfBody = 1 : 1
>Foo.fromForOfBody : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForOfBody : number
>1 : 1
    {
        Foo.fromForOfBodyNested = 1;
>Foo.fromForOfBodyNested = 1 : 1
>Foo.fromForOfBodyNested : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForOfBodyNested : number
>1 : 1
    }
}


for(let f in (Foo.forIn = []) ){
>f : string
>(Foo.forIn = []) : undefined[]
>Foo.forIn = [] : undefined[]
>Foo.forIn : any[]
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>forIn : any[]
>[] : undefined[]

    Foo.fromForInBody = 1;
>Foo.fromForInBody = 1 : 1
>Foo.fromForInBody : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForInBody : number
>1 : 1
    {
        Foo.fromForInBodyNested = 1;
>Foo.fromForInBodyNested = 1 : 1
>Foo.fromForInBodyNested : number
>Foo : { (): void; inVariableInit: number; bla: { foo: number; }; baz: number; bar: number; fromIf: number; inIf: number; fromWhileCondition: number; fromWhileBody: number; fromWhileBodyNested: number; fromDoBody: number; fromDoBodyNested: number; fromDoCondition: number; forInit: number; forCond: number; forIncr: number; fromForBody: number; fromForBodyNested: number; forOf: any[]; fromForOfBody: number; fromForOfBodyNested: number; forIn: any[]; fromForInBody: number; fromForInBodyNested: number; }
>fromForInBodyNested : number
>1 : 1
    }
}
