--- old.crashInYieldStarInAsyncFunction.types
+++ new.crashInYieldStarInAsyncFunction.types
@@= skipped -2, +2 lines =@@
 === crashInYieldStarInAsyncFunction.ts ===
 // https://github.com/microsoft/TypeScript/issues/53145
 var obj = {
->obj : { [Symbol.asyncIterator](): { next(): { then(): void; }; }; }
->{    [Symbol.asyncIterator]() {        return {            next() {                return { then() { } };            }        };    }} : { [Symbol.asyncIterator](): { next(): { then(): void; }; }; }
+>obj : { [Symbol.asyncIterator]: () => { next: () => { then: () => void; }; }; }
+>{    [Symbol.asyncIterator]() {        return {            next() {                return { then() { } };            }        };    }} : { [Symbol.asyncIterator]: () => { next: () => { then: () => void; }; }; }
 
     [Symbol.asyncIterator]() {
->[Symbol.asyncIterator] : () => { next(): { then(): void; }; }
+>[Symbol.asyncIterator] : () => { next: () => { then: () => void; }; }
 >Symbol.asyncIterator : unique symbol
 >Symbol : SymbolConstructor
 >asyncIterator : unique symbol
 
         return {
->{            next() {                return { then() { } };            }        } : { next(): { then(): void; }; }
+>{            next() {                return { then() { } };            }        } : { next: () => { then: () => void; }; }
 
             next() {
->next : () => { then(): void; }
+>next : () => { then: () => void; }
 
                 return { then() { } };
->{ then() { } } : { then(): void; }
+>{ then() { } } : { then: () => void; }
 >then : () => void
             }
         };
@@= skipped -28, +28 lines =@@
 
     yield* obj;
 >yield* obj : any
->obj : { [Symbol.asyncIterator](): { next(): { then(): void; }; }; }
+>obj : { [Symbol.asyncIterator]: () => { next: () => { then: () => void; }; }; }
 }
