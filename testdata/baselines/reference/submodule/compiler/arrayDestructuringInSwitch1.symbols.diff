--- old.arrayDestructuringInSwitch1.symbols
+++ new.arrayDestructuringInSwitch1.symbols
@@= skipped -15, +15 lines =@@
 >Expression : Symbol(Expression, Decl(arrayDestructuringInSwitch1.ts, 0, 0))
 
   if (Array.isArray(expression)) {
->Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>Array.isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >expression : Symbol(expression, Decl(arrayDestructuringInSwitch1.ts, 3, 25))
 
     const [operator, ...operands] = expression;
@@= skipped -15, +15 lines =@@
 
       case 'and': {
         return operands.every((child) => evaluate(child));
->operands.every : Symbol(Array.every, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>operands.every : Symbol(every, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >operands : Symbol(operands, Decl(arrayDestructuringInSwitch1.ts, 5, 20))
->every : Symbol(Array.every, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>every : Symbol(every, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >child : Symbol(child, Decl(arrayDestructuringInSwitch1.ts, 8, 31))
 >evaluate : Symbol(evaluate, Decl(arrayDestructuringInSwitch1.ts, 1, 84))
 >child : Symbol(child, Decl(arrayDestructuringInSwitch1.ts, 8, 31))
