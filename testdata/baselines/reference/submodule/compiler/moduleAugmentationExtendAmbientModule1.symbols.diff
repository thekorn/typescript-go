--- old.moduleAugmentationExtendAmbientModule1.symbols
+++ new.moduleAugmentationExtendAmbientModule1.symbols
@@= skipped -12, +12 lines =@@
 
 let y = x.map(x => x + 1);
 >y : Symbol(y, Decl(main.ts, 5, 3))
->x.map : Symbol(Observable.map, Decl(map.ts, 5, 29))
+>x.map : Symbol(map, Decl(map.ts, 5, 29))
 >x : Symbol(x, Decl(main.ts, 4, 3))
->map : Symbol(Observable.map, Decl(map.ts, 5, 29))
+>map : Symbol(map, Decl(map.ts, 5, 29))
 >x : Symbol(x, Decl(main.ts, 5, 14))
 >x : Symbol(x, Decl(main.ts, 5, 14))
 
@@= skipped -11, +11 lines =@@
 >Observable : Symbol(Observable, Decl(map.ts, 0, 8))
 
 (<any>Observable.prototype).map = function() { }
->Observable.prototype : Symbol(Observable.prototype)
+>Observable.prototype : Symbol(prototype)
 >Observable : Symbol(Observable, Decl(map.ts, 0, 8))
->prototype : Symbol(Observable.prototype)
+>prototype : Symbol(prototype)
 
 declare module "observable" {
 >"observable" : Symbol("observable", Decl(observable.d.ts, 0, 0), Decl(map.ts, 2, 48))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(observable.d.ts, 1, 21), Decl(map.ts, 5, 25))
 
         map<U>(proj: (e:T) => U): Observable<U>
->map : Symbol(Observable.map, Decl(map.ts, 5, 29))
+>map : Symbol(map, Decl(map.ts, 5, 29))
 >U : Symbol(U, Decl(map.ts, 6, 12))
 >proj : Symbol(proj, Decl(map.ts, 6, 15))
 >e : Symbol(e, Decl(map.ts, 6, 22))
@@= skipped -26, +26 lines =@@
 >T : Symbol(T, Decl(observable.d.ts, 1, 21), Decl(map.ts, 5, 25))
 
         filter(pred: (e:T) => boolean): Observable<T>;
->filter : Symbol(Observable.filter, Decl(observable.d.ts, 1, 25))
+>filter : Symbol(filter, Decl(observable.d.ts, 1, 25))
 >pred : Symbol(pred, Decl(observable.d.ts, 2, 15))
 >e : Symbol(e, Decl(observable.d.ts, 2, 22))
 >T : Symbol(T, Decl(observable.d.ts, 1, 21), Decl(map.ts, 5, 25))
