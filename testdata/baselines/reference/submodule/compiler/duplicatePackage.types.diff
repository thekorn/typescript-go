--- old.duplicatePackage.types
+++ new.duplicatePackage.types
@@= skipped -1, +1 lines =@@
 
 === /src/a.ts ===
 import { a } from "a";
->a : (x: import("/node_modules/a/node_modules/x/index").default) => void
+>a : (x: default) => void
 
 import { b } from "b";
->b : import("/node_modules/a/node_modules/x/index").default
+>b : X
 
 import { c } from "c";
->c : import("/node_modules/c/node_modules/x/index").default
+>c : default
 
 a(b); // Works
 >a(b) : void
->a : (x: import("/node_modules/a/node_modules/x/index").default) => void
->b : import("/node_modules/a/node_modules/x/index").default
+>a : (x: default) => void
+>b : X
 
 a(c); // Error, these are from different versions of the library.
 >a(c) : void
->a : (x: import("/node_modules/a/node_modules/x/index").default) => void
->c : import("/node_modules/c/node_modules/x/index").default
+>a : (x: default) => void
+>c : default
 
 === /node_modules/a/index.d.ts ===
 import X from "x";
->X : typeof X
+>X : typeof default
 
 export function a(x: X): void;
->a : (x: X) => void
->x : X
+>a : (x: default) => void
+>x : default
 
 === /node_modules/a/node_modules/x/index.d.ts ===
 export default class X {
->X : X
+>X : default
 
     private x: number;
 >x : number
@@= skipped -36, +36 lines =@@
 
 === /node_modules/b/index.d.ts ===
 import X from "x";
->X : typeof X
+>X : any
 
 export const b: X;
 >b : X
 
 === /node_modules/b/node_modules/x/index.d.ts ===
 content not parsed
->X : X
+>content : any
+>not : any
+>parsed : any
 
->x : number
-
 === /node_modules/c/index.d.ts ===
 import X from "x";
->X : typeof X
+>X : typeof default
 
 export const c: X;
->c : X
+>c : default
 
 === /node_modules/c/node_modules/x/index.d.ts ===
 export default class X {
->X : X
+>X : default
 
     private x: number;
 >x : number
