//// [tests/cases/compiler/templateLiteralsInTypes.ts] ////

=== templateLiteralsInTypes.ts ===
const f = (hdr: string, val: number) => `${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n`;
>f : (hdr: string, val: number) => `${string}:	${number}
`
>(hdr: string, val: number) => `${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : (hdr: string, val: number) => `${string}:	${number}
`
>hdr : string
>val : number
>`${hdr}:\t${val}\r\n` as `${string}:\t${number}\r\n` : `${string}:	${number}
`
>`${hdr}:\t${val}\r\n` : `${string}:	${number}
`
>hdr : string
>val : number

f("x").foo;
>f("x").foo : any
>f("x") : `${string}:	${number}
`
>f : (hdr: string, val: number) => `${string}:	${number}
`
>"x" : "x"
>foo : any

