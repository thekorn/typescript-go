//// [tests/cases/compiler/formatToPartsFractionalSecond.ts] ////

=== formatToPartsFractionalSecond.ts ===
new Intl.DateTimeFormat().formatToParts().find((val) => val.type === 'fractionalSecond')
>new Intl.DateTimeFormat().formatToParts().find((val) => val.type === 'fractionalSecond') : DateTimeFormatPart
>new Intl.DateTimeFormat().formatToParts().find : { <S extends DateTimeFormatPart>(predicate: (value: DateTimeFormatPart, index: number, obj: DateTimeFormatPart[]) => value is S, thisArg?: any): S; (predicate: (value: DateTimeFormatPart, index: number, obj: DateTimeFormatPart[]) => unknown, thisArg?: any): DateTimeFormatPart; }
>new Intl.DateTimeFormat().formatToParts() : DateTimeFormatPart[]
>new Intl.DateTimeFormat().formatToParts : (date?: number | Date) => DateTimeFormatPart[]
>new Intl.DateTimeFormat() : DateTimeFormat
>Intl.DateTimeFormat : DateTimeFormatConstructor
>Intl : typeof Intl
>DateTimeFormat : DateTimeFormatConstructor
>formatToParts : (date?: number | Date) => DateTimeFormatPart[]
>find : { <S extends DateTimeFormatPart>(predicate: (value: DateTimeFormatPart, index: number, obj: DateTimeFormatPart[]) => value is S, thisArg?: any): S; (predicate: (value: DateTimeFormatPart, index: number, obj: DateTimeFormatPart[]) => unknown, thisArg?: any): DateTimeFormatPart; }
>(val) => val.type === 'fractionalSecond' : (val: DateTimeFormatPart) => boolean
>val : DateTimeFormatPart
>val.type === 'fractionalSecond' : boolean
>val.type : keyof DateTimeFormatPartTypesRegistry
>val : DateTimeFormatPart
>type : keyof DateTimeFormatPartTypesRegistry
>'fractionalSecond' : "fractionalSecond"

