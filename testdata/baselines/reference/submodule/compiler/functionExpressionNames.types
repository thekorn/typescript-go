//// [tests/cases/compiler/functionExpressionNames.ts] ////

=== b.js ===
exports.E = function() {
>exports.E = function() {    this.e = 'exported'} : () => void
>exports.E : any
>exports : any
>E : any
>function() {    this.e = 'exported'} : () => void

    this.e = 'exported'
>this.e = 'exported' : "exported"
>this.e : any
>this : any
>e : any
>'exported' : "exported"
}
var e = new exports.E();
>e : any
>new exports.E() : any
>exports.E : any
>exports : any
>E : any

var o = {
>o : { C: () => void; }
>{    C: function () {        this.c = 'nested object'    }} : { C: () => void; }

    C: function () {
>C : () => void
>function () {        this.c = 'nested object'    } : () => void

        this.c = 'nested object'
>this.c = 'nested object' : "nested object"
>this.c : any
>this : any
>c : any
>'nested object' : "nested object"
    }
}
var og = new o.C();
>og : any
>new o.C() : any
>o.C : () => void
>o : { C: () => void; }
>C : () => void

var V = function () {
>V : () => void
>function () {    this.v = 'simple'} : () => void

    this.v = 'simple'
>this.v = 'simple' : "simple"
>this.v : any
>this : any
>v : any
>'simple' : "simple"
}
var v = new V();
>v : any
>new V() : any
>V : () => void

var A;
>A : any

A = function () {
>A = function () {    this.a = 'assignment'} : () => void
>A : any
>function () {    this.a = 'assignment'} : () => void

    this.a = 'assignment'
>this.a = 'assignment' : "assignment"
>this.a : any
>this : any
>a : any
>'assignment' : "assignment"
}
var a = new A();
>a : any
>new A() : any
>A : any

const {
    B = function() {
>B : () => void
>function() {        this.b = 'binding pattern'    } : () => void

        this.b = 'binding pattern'
>this.b = 'binding pattern' : "binding pattern"
>this.b : any
>this : any
>b : any
>'binding pattern' : "binding pattern"
    }
} = { B: undefined };
>{ B: undefined } : { B?: undefined; }
>B : undefined
>undefined : undefined

var b = new B();
>b : any
>new B() : any
>B : () => void

