//// [tests/cases/compiler/argumentsReferenceInMethod4_Js.ts] ////

=== /a.js ===
class A {
>A : Symbol(A, Decl(a.js, 0, 0))

	/**
	 * @param {object} [foo={}]
	 */
	m(foo = {}) {
>m : Symbol(m, Decl(a.js, 0, 9))
>foo : Symbol(foo, Decl(a.js, 4, 3))

		const key = "bar";
>key : Symbol(key, Decl(a.js, 5, 7))

		/**
		 * @type object
		 */
		this.foo = foo;
>this : Symbol(A, Decl(a.js, 0, 0))
>foo : Symbol(foo, Decl(a.js, 4, 3))

		/**
		 * @type object
		 */
		const arguments = this.arguments;
>arguments : Symbol(arguments, Decl(a.js, 15, 7))
>this.arguments : Symbol(arguments, Decl(a.js, 31, 2))
>this : Symbol(A, Decl(a.js, 0, 0))
>arguments : Symbol(arguments, Decl(a.js, 31, 2))

		/**
		 * @type object
		 */
		this.bar = arguments.bar;
>this : Symbol(A, Decl(a.js, 0, 0))
>arguments : Symbol(arguments, Decl(a.js, 15, 7))

		/**
		 * @type object
		 */
		this.baz = arguments[key];
>this : Symbol(A, Decl(a.js, 0, 0))
>arguments : Symbol(arguments, Decl(a.js, 15, 7))
>key : Symbol(key, Decl(a.js, 5, 7))

		/**
		 * @type object
		 */
		this.options = arguments;
>this : Symbol(A, Decl(a.js, 0, 0))
>arguments : Symbol(arguments, Decl(a.js, 15, 7))
	}

	get arguments() {
>arguments : Symbol(arguments, Decl(a.js, 31, 2))

		return { bar: {} };
>bar : Symbol(bar, Decl(a.js, 34, 10))
	}
}

