--- old.moduleAugmentationExtendAmbientModule2.errors.txt
+++ new.moduleAugmentationExtendAmbientModule2.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+main.ts(6,11): error TS2339: Property 'map' does not exist on type 'Observable<number>'.
+main.ts(8,21): error TS2339: Property 'someAnotherValue' does not exist on type 'typeof Observable'.
+map.ts(6,15): error TS2428: All declarations of 'Observable' must have identical type parameters.
+map.ts(7,35): error TS2314: Generic type 'Observable<T, T>' requires 2 type argument(s).
+observable.d.ts(2,11): error TS2428: All declarations of 'Observable' must have identical type parameters.
+
+
+==== main.ts (2 errors) ====
+    /// <reference path="observable.d.ts"/>
+    import { Observable } from "observable"
+    import "./map";
+    
+    let x: Observable<number>;
+    let y = x.map(x => x + 1);
+              ~~~
+!!! error TS2339: Property 'map' does not exist on type 'Observable<number>'.
+    let z1 = Observable.someValue.toFixed();
+    let z2 = Observable.someAnotherValue.toLowerCase();
+                        ~~~~~~~~~~~~~~~~
+!!! error TS2339: Property 'someAnotherValue' does not exist on type 'typeof Observable'.
+==== map.ts (2 errors) ====
+    import { Observable } from "observable"
+    
+    (<any>Observable.prototype).map = function() { }
+    
+    declare module "observable" {
+        interface Observable<T> {
+                  ~~~~~~~~~~
+!!! error TS2428: All declarations of 'Observable' must have identical type parameters.
+            map<U>(proj: (e:T) => U): Observable<U>
+                                      ~~~~~~~~~~~~~
+!!! error TS2314: Generic type 'Observable<T, T>' requires 2 type argument(s).
+        }
+        namespace Observable {
+            let someAnotherValue: string;
+        }
+    }
+    
+==== observable.d.ts (1 errors) ====
+    declare module "observable" {
+        class Observable<T> {
+              ~~~~~~~~~~
+!!! error TS2428: All declarations of 'Observable' must have identical type parameters.
+            filter(pred: (e:T) => boolean): Observable<T>;
+        }
+        namespace Observable {
+            export let someValue: number;
+        }
+    }
+    
