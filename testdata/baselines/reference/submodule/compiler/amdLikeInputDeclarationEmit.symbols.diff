--- old.amdLikeInputDeclarationEmit.symbols
+++ new.amdLikeInputDeclarationEmit.symbols
@@= skipped -17, +17 lines =@@
 >BaseClass : Symbol(BaseClass, Decl(BaseClass.d.ts, 0, 33))
 
         static extends<A>(a: A): new () => A & BaseClass;
->extends : Symbol(BaseClass.extends, Decl(BaseClass.d.ts, 1, 21))
+>extends : Symbol(extends, Decl(BaseClass.d.ts, 1, 21))
 >A : Symbol(A, Decl(BaseClass.d.ts, 2, 23))
 >a : Symbol(a, Decl(BaseClass.d.ts, 2, 26))
 >A : Symbol(A, Decl(BaseClass.d.ts, 2, 23))
@@= skipped -24, +24 lines =@@
     
     const ExtendedClass = BaseClass.extends({
 >ExtendedClass : Symbol(ExtendedClass, Decl(ExtendedClass.js, 8, 9))
->BaseClass.extends : Symbol(BaseClass.extends, Decl(BaseClass.d.ts, 1, 21))
+>BaseClass.extends : Symbol(extends, Decl(BaseClass.d.ts, 1, 21))
 >BaseClass : Symbol(BaseClass, Decl(ExtendedClass.js, 6, 1))
->extends : Symbol(BaseClass.extends, Decl(BaseClass.d.ts, 1, 21))
+>extends : Symbol(extends, Decl(BaseClass.d.ts, 1, 21))
 
         f: function() {
 >f : Symbol(f, Decl(ExtendedClass.js, 8, 45))
@@= skipped -16, +16 lines =@@
 >module : Symbol(module, Decl(ExtendedClass.js, 15, 9))
 
     module.exports = ExtendedClass
->module : Symbol(export=, Decl(ExtendedClass.js, 15, 22))
->exports : Symbol(export=, Decl(ExtendedClass.js, 15, 22))
+>module : Symbol(module, Decl(ExtendedClass.js, 15, 9))
 >ExtendedClass : Symbol(ExtendedClass, Decl(ExtendedClass.js, 8, 9))
 
     return module.exports;
