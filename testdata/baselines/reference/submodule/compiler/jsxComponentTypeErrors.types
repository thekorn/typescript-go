//// [tests/cases/compiler/jsxComponentTypeErrors.tsx] ////

=== jsxComponentTypeErrors.tsx ===
namespace JSX {
  export interface Element {
    type: 'element';
>type : "element"
  }
  export interface ElementClass {
    type: 'element-class';
>type : "element-class"
  }
}

function FunctionComponent<T extends string>({type}: {type?: T}) {
>FunctionComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }
>type : T | undefined
>type : T | undefined

  return {
>{    type  } : { type: T | undefined; }

    type
>type : T | undefined
  }
}
FunctionComponent.useThis = function() {
>FunctionComponent.useThis = function() {  return <this type="foo" />;} : () => Element
>FunctionComponent.useThis : () => Element
>FunctionComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }
>useThis : () => Element
>function() {  return <this type="foo" />;} : () => Element

  return <this type="foo" />;
><this type="foo" /> : Element
>this : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }
>type : "foo"
}

class ClassComponent {
>ClassComponent : ClassComponent

  type = 'string';
>type : string
>'string' : "string"
}

const MixedComponent = Math.random() ? FunctionComponent : ClassComponent;
>MixedComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; } | typeof ClassComponent
>Math.random() ? FunctionComponent : ClassComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; } | typeof ClassComponent
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>FunctionComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }
>ClassComponent : typeof ClassComponent

const elem1 = <FunctionComponent type="abc" />;
>elem1 : Element
><FunctionComponent type="abc" /> : Element
>FunctionComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }
>type : "abc"

const elem2 = <FunctionComponent<"abc"> />;
>elem2 : Element
><FunctionComponent<"abc"> /> : Element
>FunctionComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; }

const elem3 = <ClassComponent />;
>elem3 : Element
><ClassComponent /> : Element
>ClassComponent : typeof ClassComponent

const elem4 = <MixedComponent />;
>elem4 : Element
><MixedComponent /> : Element
>MixedComponent : { <T extends string>(__0: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => Element; } | typeof ClassComponent

const obj = {
>obj : { MemberFunctionComponent: () => {}; MemberClassComponent: typeof MemberClassComponent; }
>{  MemberFunctionComponent() {    return {};  },  MemberClassComponent: class {},} : { MemberFunctionComponent: () => {}; MemberClassComponent: typeof MemberClassComponent; }

  MemberFunctionComponent() {
>MemberFunctionComponent : () => {}

    return {};
>{} : {}

  },
  MemberClassComponent: class {},
>MemberClassComponent : typeof MemberClassComponent
>class {} : typeof MemberClassComponent

};

const elem5 = <obj.MemberFunctionComponent />;
>elem5 : Element
><obj.MemberFunctionComponent /> : Element
>obj.MemberFunctionComponent : () => {}
>obj : { MemberFunctionComponent: () => {}; MemberClassComponent: typeof MemberClassComponent; }
>MemberFunctionComponent : () => {}

const elem6 = <obj. MemberClassComponent />;
>elem6 : Element
><obj. MemberClassComponent /> : Element
>obj. MemberClassComponent : typeof MemberClassComponent
>obj : { MemberFunctionComponent: () => {}; MemberClassComponent: typeof MemberClassComponent; }
>MemberClassComponent : typeof MemberClassComponent

