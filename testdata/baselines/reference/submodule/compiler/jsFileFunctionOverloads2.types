//// [tests/cases/compiler/jsFileFunctionOverloads2.ts] ////

=== jsFileFunctionOverloads2.js ===
// Also works if all @overload tags are combined in one comment.
/**
 * @overload
 * @param {number} x
 * @returns {'number'}
 *
 * @overload
 * @param {string} x
 * @returns {'string'}
 *
 * @overload
 * @param {boolean} x
 * @returns {'boolean'}
 *
 * @param {unknown} x
 * @returns {string}
 */
 function getTypeName(x) {
>getTypeName : (x: any) => "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>x : any

  return typeof x;
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>x : any
}

/**
 * @template T
 * @param {T} x 
 * @returns {T}
 */
const identity = x => x;
>identity : (x: any) => any
>x => x : (x: any) => any
>x : any
>x : any

/**
 * @template T
 * @template U
 * @overload
 * @param {T[]} array 
 * @param {(x: T) => U[]} iterable 
 * @returns {U[]}
 *
 * @overload
 * @param {T[][]} array
 * @returns {T[]}
 *
 * @param {unknown[]} array 
 * @param {(x: unknown) => unknown} iterable 
 * @returns {unknown[]}
 */
function flatMap(array, iterable = identity) {
>flatMap : (array: any, iterable?: (x: any) => any) => any[]
>array : any
>iterable : (x: any) => any
>identity : (x: any) => any

  /** @type {unknown[]} */
  const result = [];
>result : any[]
>[] : undefined[]

  for (let i = 0; i < array.length; i += 1) {
>i : number
>0 : 0
>i < array.length : boolean
>i : number
>array.length : any
>array : any
>length : any
>i += 1 : number
>i : number
>1 : 1

    result.push(.../** @type {unknown[]} */(iterable(array[i])));
>result.push(.../** @type {unknown[]} */(iterable(array[i]))) : number
>result.push : (...items: any[]) => number
>result : any[]
>push : (...items: any[]) => number
>.../** @type {unknown[]} */(iterable(array[i])) : any
>(iterable(array[i])) : any
>iterable(array[i]) : any
>iterable : (x: any) => any
>array[i] : any
>array : any
>i : number
  }
  return result;
>result : any[]
}

