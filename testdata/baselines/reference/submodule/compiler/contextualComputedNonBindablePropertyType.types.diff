--- old.contextualComputedNonBindablePropertyType.types
+++ new.contextualComputedNonBindablePropertyType.types
@@= skipped -26, +26 lines =@@
 });
 
 declare function forceMatch2<T>(matched: {
->forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
->matched : { [key in keyof T]: ({ key }: { key: key; }) => void; }
+>forceMatch2 : <T>(matched: { [key in keyof T]: (__0: { key: key; }) => void; }) => void
+>matched : { [key in keyof T]: (__0: { key: key; }) => void; }
 
   [key in keyof T]: ({ key }: { key: key }) => void;
 >key : key
@@= skipped -11, +11 lines =@@
 
 forceMatch2({
 >forceMatch2({  [testD()]: ({ key }) => {},}) : void
->forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
->{  [testD()]: ({ key }) => {},} : { d: ({ key }: { key: "d"; }) => void; }
+>forceMatch2 : <T>(matched: { [key in keyof T]: (__0: { key: key; }) => void; }) => void
+>{  [testD()]: ({ key }) => {},} : { d: (__0: { key: "d"; }) => void; }
 
   [testD()]: ({ key }) => {},
->[testD()] : ({ key }: { key: "d"; }) => void
+>[testD()] : (__0: { key: "d"; }) => void
 >testD() : "d"
 >testD : () => "d"
->({ key }) => {} : ({ key }: { key: "d"; }) => void
+>({ key }) => {} : (__0: { key: "d"; }) => void
 >key : "d"
 
 });
