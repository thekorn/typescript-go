//// [tests/cases/compiler/genericInferenceDefaultTypeParameterJsxReact.tsx] ////

=== genericInferenceDefaultTypeParameterJsxReact.tsx ===
/// <reference path="react16.d.ts" />

// Repro from #50858

import React, { ComponentPropsWithRef, ElementType, ReactNode } from 'react';
>React : typeof React
>ComponentPropsWithRef : any
>ElementType : any
>ReactNode : any

type ButtonBaseProps<T extends ElementType> = ComponentPropsWithRef<T> & { children?: ReactNode };
>ButtonBaseProps : ButtonBaseProps<T>
>children : ReactNode

function Component<T extends ElementType = 'span'>(props: ButtonBaseProps<T>) {
>Component : <T extends ElementType>(props: ButtonBaseProps<T>) => Element
>props : ButtonBaseProps<T>

    return <></>;
><></> : Element
}

const v1 = <Component onClick={e => e.preventDefault()} />;
>v1 : Element
><Component onClick={e => e.preventDefault()} /> : Element
>Component : <T extends ElementType>(props: ButtonBaseProps<T>) => Element
>onClick : (e: MouseEvent<HTMLSpanElement>) => void
>e => e.preventDefault() : (e: MouseEvent<HTMLSpanElement>) => void
>e : MouseEvent<HTMLSpanElement>
>e.preventDefault() : void
>e.preventDefault : () => void
>e : MouseEvent<HTMLSpanElement>
>preventDefault : () => void

