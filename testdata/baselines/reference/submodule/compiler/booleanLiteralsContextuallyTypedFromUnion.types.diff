--- old.booleanLiteralsContextuallyTypedFromUnion.types
+++ new.booleanLiteralsContextuallyTypedFromUnion.types
@@= skipped -69, +69 lines =@@
     };
 
 let Funk = (_props: ComponentProps) => <div>Hello</div>;
->Funk : (_props: ComponentProps) => JSX.Element
->(_props: ComponentProps) => <div>Hello</div> : (_props: ComponentProps) => JSX.Element
+>Funk : (_props: ComponentProps) => Element
+>(_props: ComponentProps) => <div>Hello</div> : (_props: ComponentProps) => Element
 >_props : ComponentProps
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : Element
 >div : any
 >div : any
 
 let Fail1 = () => <Funk mandatoryFn={() => { }} optionalBool={true} />
->Fail1 : () => JSX.Element
->() => <Funk mandatoryFn={() => { }} optionalBool={true} /> : () => JSX.Element
-><Funk mandatoryFn={() => { }} optionalBool={true} /> : JSX.Element
->Funk : (_props: ComponentProps) => JSX.Element
+>Fail1 : () => Element
+>() => <Funk mandatoryFn={() => { }} optionalBool={true} /> : () => Element
+><Funk mandatoryFn={() => { }} optionalBool={true} /> : Element
+>Funk : (_props: ComponentProps) => Element
 >mandatoryFn : () => void
 >() => { } : () => void
 >optionalBool : true
 >true : true
 
 let Fail2 = () => <Funk mandatoryFn={() => { }} optionalBool={true as true} />
->Fail2 : () => JSX.Element
->() => <Funk mandatoryFn={() => { }} optionalBool={true as true} /> : () => JSX.Element
-><Funk mandatoryFn={() => { }} optionalBool={true as true} /> : JSX.Element
->Funk : (_props: ComponentProps) => JSX.Element
+>Fail2 : () => Element
+>() => <Funk mandatoryFn={() => { }} optionalBool={true as true} /> : () => Element
+><Funk mandatoryFn={() => { }} optionalBool={true as true} /> : Element
+>Funk : (_props: ComponentProps) => Element
 >mandatoryFn : () => void
 >() => { } : () => void
 >optionalBool : true
@@= skipped -36, +36 lines =@@
 >true : true
 
 let Fail3 = () => <Funk mandatoryFn={() => { }} optionalBool={True} />
->Fail3 : () => JSX.Element
->() => <Funk mandatoryFn={() => { }} optionalBool={True} /> : () => JSX.Element
-><Funk mandatoryFn={() => { }} optionalBool={True} /> : JSX.Element
->Funk : (_props: ComponentProps) => JSX.Element
+>Fail3 : () => Element
+>() => <Funk mandatoryFn={() => { }} optionalBool={True} /> : () => Element
+><Funk mandatoryFn={() => { }} optionalBool={True} /> : Element
+>Funk : (_props: ComponentProps) => Element
 >mandatoryFn : () => void
 >() => { } : () => void
 >optionalBool : true
@@= skipped -20, +20 lines =@@
 >() => { } : () => void
 
 let Success = () => <Funk {...attrs2} />
->Success : () => JSX.Element
->() => <Funk {...attrs2} /> : () => JSX.Element
-><Funk {...attrs2} /> : JSX.Element
->Funk : (_props: ComponentProps) => JSX.Element
+>Success : () => Element
+>() => <Funk {...attrs2} /> : () => Element
+><Funk {...attrs2} /> : Element
+>Funk : (_props: ComponentProps) => Element
 >attrs2 : { optionalBool: true; mandatoryFn: () => void; }
 
