--- old.reactDefaultPropsInferenceSuccess.types
+++ new.reactDefaultPropsInferenceSuccess.types
@@= skipped -19, +19 lines =@@
 
 class FieldFeedback<P extends Props = BaseProps> extends React.Component<P> {
 >FieldFeedback : FieldFeedback<P>
->React.Component : React.Component<P, {}, any>
+>React.Component : Component<P, {}, any>
 >React : typeof React
->Component : typeof React.Component
+>Component : typeof Component
 
   static defaultProps = {
 >defaultProps : { when: () => boolean; }
@@= skipped -16, +16 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => Element
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : Element
 >div : any
 >div : any
   }
@@= skipped -11, +11 lines =@@
 
 // OK
 const Test1 = () => <FieldFeedback when={value => !!value} />;
->Test1 : () => JSX.Element
->() => <FieldFeedback when={value => !!value} /> : () => JSX.Element
-><FieldFeedback when={value => !!value} /> : JSX.Element
+>Test1 : () => Element
+>() => <FieldFeedback when={value => !!value} /> : () => Element
+><FieldFeedback when={value => !!value} /> : Element
 >FieldFeedback : typeof FieldFeedback
 >when : (value: string) => boolean
 >value => !!value : (value: string) => boolean
@@= skipped -13, +13 lines =@@
 
 // Error: Void not assignable to boolean
 const Test2 = () => <FieldFeedback when={value => console.log(value)} />;
->Test2 : () => JSX.Element
->() => <FieldFeedback when={value => console.log(value)} /> : () => JSX.Element
-><FieldFeedback when={value => console.log(value)} /> : JSX.Element
+>Test2 : () => Element
+>() => <FieldFeedback when={value => console.log(value)} /> : () => Element
+><FieldFeedback when={value => console.log(value)} /> : Element
 >FieldFeedback : typeof FieldFeedback
 >when : (value: string) => void
 >value => console.log(value) : (value: string) => void
@@= skipped -15, +15 lines =@@
 
 class FieldFeedbackBeta<P extends Props = BaseProps> extends React.Component<P> {
 >FieldFeedbackBeta : FieldFeedbackBeta<P>
->React.Component : React.Component<P, {}, any>
+>React.Component : Component<P, {}, any>
 >React : typeof React
->Component : typeof React.Component
+>Component : typeof Component
 
   static defaultProps: BaseProps = {
 >defaultProps : BaseProps
@@= skipped -16, +16 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => Element
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : Element
 >div : any
 >div : any
   }
@@= skipped -11, +11 lines =@@
 
 // OK
 const Test1a = () => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta>;
->Test1a : () => JSX.Element
->() => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : () => JSX.Element
-><FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : JSX.Element
+>Test1a : () => Element
+>() => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : () => Element
+><FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : Element
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
 >when : (value: string) => boolean
 >value => !!value : (value: string) => boolean
@@= skipped -15, +15 lines =@@
 
 // Error: Void not assignable to boolean
 const Test2a = () => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta>;
->Test2a : () => JSX.Element
->() => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : () => JSX.Element
-><FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : JSX.Element
+>Test2a : () => Element
+>() => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : () => Element
+><FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : Element
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
 >when : (value: string) => void
 >value => console.log(value) : (value: string) => void
@@= skipped -37, +37 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => Element
 
     this.props.when("now"); // OK, always defined
 >this.props.when("now") : boolean
 >this.props.when : P["when"]
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
+>this.props : Readonly<{ children?: ReactNode; }> & Readonly<P>
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
+>props : Readonly<{ children?: ReactNode; }> & Readonly<P>
 >when : P["when"]
 >"now" : "now"
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : Element
 >div : any
 >div : any
   }
@@= skipped -20, +20 lines =@@
 
 // OK
 const Test3 = () => <FieldFeedback2 when={value => !!value} />;
->Test3 : () => JSX.Element
->() => <FieldFeedback2 when={value => !!value} /> : () => JSX.Element
-><FieldFeedback2 when={value => !!value} /> : JSX.Element
+>Test3 : () => Element
+>() => <FieldFeedback2 when={value => !!value} /> : () => Element
+><FieldFeedback2 when={value => !!value} /> : Element
 >FieldFeedback2 : typeof FieldFeedback2
 >when : (value: string) => boolean
 >value => !!value : (value: string) => boolean
@@= skipped -13, +13 lines =@@
 
 // Error: Void not assignable to boolean
 const Test4 = () => <FieldFeedback2 when={value => console.log(value)} />;
->Test4 : () => JSX.Element
->() => <FieldFeedback2 when={value => console.log(value)} /> : () => JSX.Element
-><FieldFeedback2 when={value => console.log(value)} /> : JSX.Element
+>Test4 : () => Element
+>() => <FieldFeedback2 when={value => console.log(value)} /> : () => Element
+><FieldFeedback2 when={value => console.log(value)} /> : Element
 >FieldFeedback2 : typeof FieldFeedback2
 >when : (value: string) => void
 >value => console.log(value) : (value: string) => void
@@= skipped -15, +15 lines =@@
 
 // OK
 const Test5 = () => <FieldFeedback2 />;
->Test5 : () => JSX.Element
->() => <FieldFeedback2 /> : () => JSX.Element
-><FieldFeedback2 /> : JSX.Element
+>Test5 : () => Element
+>() => <FieldFeedback2 /> : () => Element
+><FieldFeedback2 /> : Element
 >FieldFeedback2 : typeof FieldFeedback2
 
