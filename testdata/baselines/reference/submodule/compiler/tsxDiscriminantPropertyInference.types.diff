--- old.tsxDiscriminantPropertyInference.types
+++ new.tsxDiscriminantPropertyInference.types
@@= skipped -33, +33 lines =@@
 >Props : Props
 
 declare function Comp(props: DiscriminatorTrue | DiscriminatorFalse): JSX.Element;
->Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
+>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
 >props : DiscriminatorFalse | DiscriminatorTrue
 >JSX : any
 
 // simple inference
 void (<Comp disc cb={s => parseInt(s)} />);
 >void (<Comp disc cb={s => parseInt(s)} />) : undefined
->(<Comp disc cb={s => parseInt(s)} />) : JSX.Element
-><Comp disc cb={s => parseInt(s)} /> : JSX.Element
->Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
+>(<Comp disc cb={s => parseInt(s)} />) : Element
+><Comp disc cb={s => parseInt(s)} /> : Element
+>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
 >disc : true
 >cb : (s: string) => number
 >s => parseInt(s) : (s: string) => number
 >s : string
 >parseInt(s) : number
->parseInt : (string: string, radix?: number) => number
+>parseInt : (string: string, radix?: number | undefined) => number
 >s : string
 
 // simple inference
 void (<Comp disc={false} cb={n => n.toFixed()} />);
 >void (<Comp disc={false} cb={n => n.toFixed()} />) : undefined
->(<Comp disc={false} cb={n => n.toFixed()} />) : JSX.Element
-><Comp disc={false} cb={n => n.toFixed()} /> : JSX.Element
->Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
+>(<Comp disc={false} cb={n => n.toFixed()} />) : Element
+><Comp disc={false} cb={n => n.toFixed()} /> : Element
+>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
 >disc : false
 >false : false
 >cb : (n: number) => string
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
 // simple inference when strict-null-checks are enabled
 void (<Comp disc={undefined} cb={n => n.toFixed()} />);
 >void (<Comp disc={undefined} cb={n => n.toFixed()} />) : undefined
->(<Comp disc={undefined} cb={n => n.toFixed()} />) : JSX.Element
-><Comp disc={undefined} cb={n => n.toFixed()} /> : JSX.Element
->Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
+>(<Comp disc={undefined} cb={n => n.toFixed()} />) : Element
+><Comp disc={undefined} cb={n => n.toFixed()} /> : Element
+>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
 >disc : undefined
 >undefined : undefined
 >cb : (n: number) => string
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
 // requires checking type information since discriminator is missing from object
 void (<Comp cb={n => n.toFixed()} />);
 >void (<Comp cb={n => n.toFixed()} />) : undefined
->(<Comp cb={n => n.toFixed()} />) : JSX.Element
-><Comp cb={n => n.toFixed()} /> : JSX.Element
->Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
+>(<Comp cb={n => n.toFixed()} />) : Element
+><Comp cb={n => n.toFixed()} /> : Element
+>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
 >cb : (n: number) => string
 >n => n.toFixed() : (n: number) => string
 >n : number
 >n.toFixed() : string
->n.toFixed : (fractionDigits?: number) => string
+>n.toFixed : (fractionDigits?: number | undefined) => string
 >n : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 
