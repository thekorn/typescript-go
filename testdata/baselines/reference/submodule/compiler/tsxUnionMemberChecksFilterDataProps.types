//// [tests/cases/compiler/tsxUnionMemberChecksFilterDataProps.tsx] ////

=== tsxUnionMemberChecksFilterDataProps.tsx ===
/// <reference path="react16.d.ts" />
import React, { ReactElement } from "react";
>React : typeof React
>ReactElement : any

declare function NotHappy(props: ({ fixed?: boolean } | { value?: number })): ReactElement<any>;
>NotHappy : (props: { fixed?: boolean; } | { value?: number; }) => ReactElement<any>
>props : { fixed?: boolean; } | { value?: number; }
>fixed : boolean
>value : number

declare function Happy(props: { fixed?: boolean, value?: number }): ReactElement<any>;
>Happy : (props: { fixed?: boolean; value?: number; }) => ReactElement<any>
>props : { fixed?: boolean; value?: number; }
>fixed : boolean
>value : number

const RootNotHappy = () => (<NotHappy data-testid="my-test-id" />);
>RootNotHappy : () => Element
>() => (<NotHappy data-testid="my-test-id" />) : () => Element
>(<NotHappy data-testid="my-test-id" />) : Element
><NotHappy data-testid="my-test-id" /> : Element
>NotHappy : (props: { fixed?: boolean; } | { value?: number; }) => ReactElement<any>
>data-testid : string

const RootHappy = () => (<Happy data-testid="my-test-id" />);
>RootHappy : () => Element
>() => (<Happy data-testid="my-test-id" />) : () => Element
>(<Happy data-testid="my-test-id" />) : Element
><Happy data-testid="my-test-id" /> : Element
>Happy : (props: { fixed?: boolean; value?: number; }) => ReactElement<any>
>data-testid : string

