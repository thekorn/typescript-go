--- old.builtinIterator.types
+++ new.builtinIterator.types
@@= skipped -3, +3 lines =@@
 const iterator = Iterator.from([0, 1, 2]);
 >iterator : IteratorObject<number, undefined, unknown>
 >Iterator.from([0, 1, 2]) : IteratorObject<number, undefined, unknown>
->Iterator.from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>Iterator.from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
 >Iterator : IteratorConstructor
->from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
 >[0, 1, 2] : number[]
 >0 : 0
 >1 : 1
@@= skipped -48, +48 lines =@@
 const iteratorFromBare = Iterator.from({
 >iteratorFromBare : IteratorObject<string, undefined, unknown>
 >Iterator.from({  next() {    return {      done: Math.random() < .5,      value: "a string",    };  },}) : IteratorObject<string, undefined, unknown>
->Iterator.from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>Iterator.from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
 >Iterator : IteratorConstructor
->from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
->{  next() {    return {      done: Math.random() < .5,      value: "a string",    };  },} : { next(): { done: boolean; value: string; }; }
+>from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>{  next() {    return {      done: Math.random() < .5,      value: "a string",    };  },} : { next: () => { done: boolean; value: string; }; }
 
   next() {
 >next : () => { done: boolean; value: string; }
@@= skipped -192, +192 lines =@@
 const iter1 = Iterator.from(g1);
 >iter1 : IteratorObject<string, undefined, unknown>
 >Iterator.from(g1) : IteratorObject<string, undefined, unknown>
->Iterator.from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>Iterator.from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
 >Iterator : IteratorConstructor
->from : <T>(value: Iterator<T, unknown, undefined> | Iterable<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
+>from : <T>(value: Iterable<T, unknown, undefined> | Iterator<T, unknown, undefined>) => IteratorObject<T, undefined, unknown>
 >g1 : Generator<string, number, boolean>
 
 declare const iter2: IteratorObject<string>;
