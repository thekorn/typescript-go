//// [tests/cases/compiler/tsxNotUsingApparentTypeOfSFC.tsx] ////

=== tsxNotUsingApparentTypeOfSFC.tsx ===
/// <reference path="react16.d.ts" />

import React from 'react';
>React : typeof React

function test<P>(wrappedProps: P) {
>test : <P>(wrappedProps: P) => void
>wrappedProps : P

    let MySFC = function(props: P) {
>MySFC : (props: P) => Element
>function(props: P) {        return <>hello</>;    } : (props: P) => Element
>props : P

        return <>hello</>;
><>hello</> : Element

    };
    class MyComponent extends React.Component<P> {
>MyComponent : MyComponent<P>
>React.Component : Component<P, {}, any>
>React : typeof React
>Component : typeof Component

        render() {
>render : () => Element

            return <>hello</>;
><>hello</> : Element
        }
    }
    let x = <MySFC />;  // should error
>x : Element
><MySFC /> : Element
>MySFC : (props: P) => Element

    let y = <MyComponent />;  // should error
>y : Element
><MyComponent /> : Element
>MyComponent : typeof MyComponent

    let z = <MySFC {...wrappedProps} /> // should work
>z : Element
><MySFC {...wrappedProps} /> : Element
>MySFC : (props: P) => Element
>wrappedProps : P

    let q = <MyComponent {...wrappedProps} /> // should work
>q : Element
><MyComponent {...wrappedProps} /> : Element
>MyComponent : typeof MyComponent
>wrappedProps : P
}
