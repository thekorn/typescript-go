--- old.strictFunctionTypes1.types
+++ new.strictFunctionTypes1.types
@@= skipped -98, +98 lines =@@
 // Repro from #21112
 
 declare function foo<T>(a: ReadonlyArray<T>): T;
->foo : <T>(a: ReadonlyArray<T>) => T
+>foo : <T>(a: readonly T[]) => T
 >a : readonly T[]
 
 let x = foo([]);  // never
 >x : never
 >foo([]) : never
->foo : <T>(a: ReadonlyArray<T>) => T
+>foo : <T>(a: readonly T[]) => T
 >[] : never[]
 
 // Modified repros from #26127
@@= skipped -18, +18 lines =@@
 >b : string
 
 declare function acceptUnion(x: A | number): void;
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 >x : number | A
 
 declare function acceptA(x: A): void;
@@= skipped -24, +24 lines =@@
 >coAndContra(a, acceptUnion) : A
 >coAndContra : <T>(value: T, func: (t: T) => void) => T
 >a : A
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 
 const t2: B = coAndContra(b, acceptA);
 >t2 : B
@@= skipped -28, +28 lines =@@
 >coAndContraArray : <T>(value: T[], func: (t: T) => void) => T[]
 >[a] : A[]
 >a : A
->acceptUnion : (x: A | number) => void
+>acceptUnion : (x: number | A) => void
 
 const t5: B[] = coAndContraArray([b], acceptA);
 >t5 : B[]
