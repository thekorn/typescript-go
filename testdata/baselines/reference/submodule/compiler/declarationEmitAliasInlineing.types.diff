--- old.declarationEmitAliasInlineing.types
+++ new.declarationEmitAliasInlineing.types
@@= skipped -18, +18 lines =@@
 }
 
 export const fn = (v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {};
->fn : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
->(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
+>fn : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
+>(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 >v : string
 >p : Omit<O, "prop">
 >key : keyof O
@@= skipped -26, +26 lines =@@
 }
 
 export const fnExp = (v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {};
->fnExp : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
->(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
+>fnExp : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
+>(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 >v : string
 >p : Omit<O, "prop">
 >key : keyof O
@@= skipped -9, +9 lines =@@
 
 === b.ts ===
 import {fn} from './a'
->fn : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
+>fn : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 
 import {fnExp} from './aExp'
->fnExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
+>fnExp : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 
 export const f = fn;
->f : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
->fn : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
+>f : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
+>fn : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 
 export const fExp = fnExp;
->fExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
->fnExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
+>fExp : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
+>fnExp : (v: string, p: Omit<O, "prop">, key: keyof O, p2: Omit<O, "prop">) => void
 
