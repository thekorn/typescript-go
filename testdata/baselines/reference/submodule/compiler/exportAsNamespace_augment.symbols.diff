--- old.exportAsNamespace_augment.symbols
+++ new.exportAsNamespace_augment.symbols
@@= skipped -17, +17 lines =@@
 >global : Symbol(global, Decl(b.ts, 0, 26))
 
     namespace a {
->a : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>a : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
 
         export const y = 0;
 >y : Symbol(y, Decl(b.ts, 4, 20))
@@= skipped -11, +11 lines =@@
 }
 
 declare module "./a" {
->"./a" : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>"./a" : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
 
     export const z = 0;
 >z : Symbol(z, Decl(b.ts, 10, 16))
@@= skipped -10, +10 lines =@@
 }
 
 a.x + a.y + a.z + a.conflict;
->a.x : Symbol(a2.x, Decl(a.d.ts, 1, 12))
->a : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
->x : Symbol(a2.x, Decl(a.d.ts, 1, 12))
->a.y : Symbol(a2.y, Decl(b.ts, 4, 20))
->a : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
->y : Symbol(a2.y, Decl(b.ts, 4, 20))
->a.z : Symbol(a2.z, Decl(b.ts, 10, 16))
->a : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
->z : Symbol(a2.z, Decl(b.ts, 10, 16))
->a.conflict : Symbol(a2.conflict, Decl(a.d.ts, 2, 12))
->a : Symbol(a2, Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
->conflict : Symbol(a2.conflict, Decl(a.d.ts, 2, 12))
+>a.x : Symbol(x, Decl(a.d.ts, 1, 12))
+>a : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>x : Symbol(x, Decl(a.d.ts, 1, 12))
+>a.y : Symbol(y, Decl(b.ts, 4, 20))
+>a : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>y : Symbol(y, Decl(b.ts, 4, 20))
+>a.z : Symbol(z, Decl(b.ts, 10, 16))
+>a : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>z : Symbol(z, Decl(b.ts, 10, 16))
+>a.conflict : Symbol(conflict, Decl(a.d.ts, 2, 12))
+>a : Symbol("/a", Decl(a.d.ts, 0, 0), Decl(b.ts, 2, 16), Decl(b.ts, 7, 1))
+>conflict : Symbol(conflict, Decl(a.d.ts, 2, 12))
 
 a2.x + a2.y + a2.z + a2.conflict;
->a2.x : Symbol(a2.x, Decl(a.d.ts, 1, 12))
+>a2.x : Symbol(x, Decl(a.d.ts, 1, 12))
 >a2 : Symbol(a2, Decl(b.ts, 0, 6))
->x : Symbol(a2.x, Decl(a.d.ts, 1, 12))
->a2.y : Symbol(a2.y, Decl(b.ts, 4, 20))
+>x : Symbol(x, Decl(a.d.ts, 1, 12))
+>a2.y : Symbol(y, Decl(b.ts, 4, 20))
 >a2 : Symbol(a2, Decl(b.ts, 0, 6))
->y : Symbol(a2.y, Decl(b.ts, 4, 20))
->a2.z : Symbol(a2.z, Decl(b.ts, 10, 16))
+>y : Symbol(y, Decl(b.ts, 4, 20))
+>a2.z : Symbol(z, Decl(b.ts, 10, 16))
 >a2 : Symbol(a2, Decl(b.ts, 0, 6))
->z : Symbol(a2.z, Decl(b.ts, 10, 16))
->a2.conflict : Symbol(a2.conflict, Decl(a.d.ts, 2, 12))
+>z : Symbol(z, Decl(b.ts, 10, 16))
+>a2.conflict : Symbol(conflict, Decl(a.d.ts, 2, 12))
 >a2 : Symbol(a2, Decl(b.ts, 0, 6))
->conflict : Symbol(a2.conflict, Decl(a.d.ts, 2, 12))
+>conflict : Symbol(conflict, Decl(a.d.ts, 2, 12))
 
