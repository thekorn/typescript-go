--- old.discriminantPropertyCheck.symbols
+++ new.discriminantPropertyCheck.symbols
@@= skipped -9, +9 lines =@@
 >Base : Symbol(Base, Decl(discriminantPropertyCheck.ts, 0, 26))
 
     bar: boolean;
->bar : Symbol(Base.bar, Decl(discriminantPropertyCheck.ts, 2, 16))
+>bar : Symbol(bar, Decl(discriminantPropertyCheck.ts, 2, 16))
 }
 
 interface Item1 extends Base {
@@= skipped -8, +8 lines =@@
 >Base : Symbol(Base, Decl(discriminantPropertyCheck.ts, 0, 26))
 
     kind: "A";
->kind : Symbol(Item1.kind, Decl(discriminantPropertyCheck.ts, 6, 30))
+>kind : Symbol(kind, Decl(discriminantPropertyCheck.ts, 6, 30))
 
     foo: string | undefined;
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 
     baz: boolean;
->baz : Symbol(Item1.baz, Decl(discriminantPropertyCheck.ts, 8, 28))
+>baz : Symbol(baz, Decl(discriminantPropertyCheck.ts, 8, 28))
 
     qux: true;
->qux : Symbol(Item1.qux, Decl(discriminantPropertyCheck.ts, 9, 17))
+>qux : Symbol(qux, Decl(discriminantPropertyCheck.ts, 9, 17))
 }
 
 interface Item2 extends Base {
@@= skipped -17, +17 lines =@@
 >Base : Symbol(Base, Decl(discriminantPropertyCheck.ts, 0, 26))
 
     kind: "B";
->kind : Symbol(Item2.kind, Decl(discriminantPropertyCheck.ts, 13, 30))
+>kind : Symbol(kind, Decl(discriminantPropertyCheck.ts, 13, 30))
 
     foo: string | undefined;
->foo : Symbol(Item2.foo, Decl(discriminantPropertyCheck.ts, 14, 14))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 14, 14))
 
     baz: boolean;
->baz : Symbol(Item2.baz, Decl(discriminantPropertyCheck.ts, 15, 28))
+>baz : Symbol(baz, Decl(discriminantPropertyCheck.ts, 15, 28))
 
     qux: false;
->qux : Symbol(Item2.qux, Decl(discriminantPropertyCheck.ts, 16, 17))
+>qux : Symbol(qux, Decl(discriminantPropertyCheck.ts, 16, 17))
 }
 
 function goo1(x: Item) {
@@= skipped -21, +21 lines =@@
 >x.kind : Symbol(kind, Decl(discriminantPropertyCheck.ts, 6, 30), Decl(discriminantPropertyCheck.ts, 13, 30))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 20, 14))
 >kind : Symbol(kind, Decl(discriminantPropertyCheck.ts, 6, 30), Decl(discriminantPropertyCheck.ts, 13, 30))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 20, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >undefined : Symbol(undefined)
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 20, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -29, +29 lines =@@
 >kind : Symbol(kind, Decl(discriminantPropertyCheck.ts, 6, 30), Decl(discriminantPropertyCheck.ts, 13, 30))
 
         x.foo.length;  // Error, intervening discriminant guard
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 26, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -14, +14 lines =@@
 >Item : Symbol(Item, Decl(discriminantPropertyCheck.ts, 0, 0))
 
     if (x.bar && x.foo !== undefined) {
->x.bar : Symbol(Base.bar, Decl(discriminantPropertyCheck.ts, 2, 16))
+>x.bar : Symbol(bar, Decl(discriminantPropertyCheck.ts, 2, 16))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 32, 14))
->bar : Symbol(Base.bar, Decl(discriminantPropertyCheck.ts, 2, 16))
+>bar : Symbol(bar, Decl(discriminantPropertyCheck.ts, 2, 16))
 >x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 32, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >undefined : Symbol(undefined)
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 32, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -27, +27 lines =@@
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 38, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >undefined : Symbol(undefined)
->x.bar : Symbol(Base.bar, Decl(discriminantPropertyCheck.ts, 2, 16))
+>x.bar : Symbol(bar, Decl(discriminantPropertyCheck.ts, 2, 16))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 38, 14))
->bar : Symbol(Base.bar, Decl(discriminantPropertyCheck.ts, 2, 16))
+>bar : Symbol(bar, Decl(discriminantPropertyCheck.ts, 2, 16))
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 38, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -28, +28 lines =@@
 >undefined : Symbol(undefined)
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 44, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -23, +23 lines =@@
 >baz : Symbol(baz, Decl(discriminantPropertyCheck.ts, 8, 28), Decl(discriminantPropertyCheck.ts, 15, 28))
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 50, 14))
 >foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14), Decl(discriminantPropertyCheck.ts, 14, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -17, +17 lines =@@
 >x.qux : Symbol(qux, Decl(discriminantPropertyCheck.ts, 9, 17), Decl(discriminantPropertyCheck.ts, 16, 17))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 56, 14))
 >qux : Symbol(qux, Decl(discriminantPropertyCheck.ts, 9, 17), Decl(discriminantPropertyCheck.ts, 16, 17))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 56, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >undefined : Symbol(undefined)
 
         x.foo.length;
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 56, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -29, +29 lines =@@
 >qux : Symbol(qux, Decl(discriminantPropertyCheck.ts, 9, 17), Decl(discriminantPropertyCheck.ts, 16, 17))
 
         x.foo.length;  // Error, intervening discriminant guard
->x.foo.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->x.foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>x.foo.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>x.foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
 >x : Symbol(x, Decl(discriminantPropertyCheck.ts, 62, 14))
->foo : Symbol(Item1.foo, Decl(discriminantPropertyCheck.ts, 7, 14))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>foo : Symbol(foo, Decl(discriminantPropertyCheck.ts, 7, 14))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -12, +12 lines =@@
 
 enum Types { Str = 1, Num = 2 }
 >Types : Symbol(Types, Decl(discriminantPropertyCheck.ts, 66, 1))
->Str : Symbol(Types.Str, Decl(discriminantPropertyCheck.ts, 70, 12))
->Num : Symbol(Types.Num, Decl(discriminantPropertyCheck.ts, 70, 21))
+>Str : Symbol(Str, Decl(discriminantPropertyCheck.ts, 70, 12))
+>Num : Symbol(Num, Decl(discriminantPropertyCheck.ts, 70, 21))
 
 type Instance = StrType | NumType;
 >Instance : Symbol(Instance, Decl(discriminantPropertyCheck.ts, 70, 31))
@@= skipped -12, +12 lines =@@
 >StrType : Symbol(StrType, Decl(discriminantPropertyCheck.ts, 72, 34))
 
     type: Types.Str;
->type : Symbol(StrType.type, Decl(discriminantPropertyCheck.ts, 74, 19))
+>type : Symbol(type, Decl(discriminantPropertyCheck.ts, 74, 19))
 >Types : Symbol(Types, Decl(discriminantPropertyCheck.ts, 66, 1))
->Str : Symbol(Types.Str, Decl(discriminantPropertyCheck.ts, 70, 12))
+>Str : Symbol(Str, Decl(discriminantPropertyCheck.ts, 70, 12))
 
     value: string;
->value : Symbol(StrType.value, Decl(discriminantPropertyCheck.ts, 75, 20))
+>value : Symbol(value, Decl(discriminantPropertyCheck.ts, 75, 20))
 
     length: number;
->length : Symbol(StrType.length, Decl(discriminantPropertyCheck.ts, 76, 18))
+>length : Symbol(length, Decl(discriminantPropertyCheck.ts, 76, 18))
 }
 
 interface NumType {
 >NumType : Symbol(NumType, Decl(discriminantPropertyCheck.ts, 78, 1))
 
     type: Types.Num;
->type : Symbol(NumType.type, Decl(discriminantPropertyCheck.ts, 80, 19))
+>type : Symbol(type, Decl(discriminantPropertyCheck.ts, 80, 19))
 >Types : Symbol(Types, Decl(discriminantPropertyCheck.ts, 66, 1))
->Num : Symbol(Types.Num, Decl(discriminantPropertyCheck.ts, 70, 21))
+>Num : Symbol(Num, Decl(discriminantPropertyCheck.ts, 70, 21))
 
     value: number;
->value : Symbol(NumType.value, Decl(discriminantPropertyCheck.ts, 81, 20))
+>value : Symbol(value, Decl(discriminantPropertyCheck.ts, 81, 20))
 }
 
 function func2(inst: Instance) {
@@= skipped -35, +35 lines =@@
 >type : Symbol(type, Decl(discriminantPropertyCheck.ts, 80, 19), Decl(discriminantPropertyCheck.ts, 74, 19))
 
             case Types.Str: {
->Types.Str : Symbol(Types.Str, Decl(discriminantPropertyCheck.ts, 70, 12))
+>Types.Str : Symbol(Str, Decl(discriminantPropertyCheck.ts, 70, 12))
 >Types : Symbol(Types, Decl(discriminantPropertyCheck.ts, 66, 1))
->Str : Symbol(Types.Str, Decl(discriminantPropertyCheck.ts, 70, 12))
+>Str : Symbol(Str, Decl(discriminantPropertyCheck.ts, 70, 12))
 
                 inst.value.length;
->inst.value.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
->inst.value : Symbol(StrType.value, Decl(discriminantPropertyCheck.ts, 75, 20))
+>inst.value.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>inst.value : Symbol(value, Decl(discriminantPropertyCheck.ts, 75, 20))
 >inst : Symbol(inst, Decl(discriminantPropertyCheck.ts, 85, 15))
->value : Symbol(StrType.value, Decl(discriminantPropertyCheck.ts, 75, 20))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>value : Symbol(value, Decl(discriminantPropertyCheck.ts, 75, 20))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
                 break;
             }
             case Types.Num: {
->Types.Num : Symbol(Types.Num, Decl(discriminantPropertyCheck.ts, 70, 21))
+>Types.Num : Symbol(Num, Decl(discriminantPropertyCheck.ts, 70, 21))
 >Types : Symbol(Types, Decl(discriminantPropertyCheck.ts, 66, 1))
->Num : Symbol(Types.Num, Decl(discriminantPropertyCheck.ts, 70, 21))
+>Num : Symbol(Num, Decl(discriminantPropertyCheck.ts, 70, 21))
 
                 inst.value.toExponential;
->inst.value.toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
->inst.value : Symbol(NumType.value, Decl(discriminantPropertyCheck.ts, 81, 20))
+>inst.value.toExponential : Symbol(toExponential, Decl(lib.es5.d.ts, --, --))
+>inst.value : Symbol(value, Decl(discriminantPropertyCheck.ts, 81, 20))
 >inst : Symbol(inst, Decl(discriminantPropertyCheck.ts, 85, 15))
->value : Symbol(NumType.value, Decl(discriminantPropertyCheck.ts, 81, 20))
->toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
+>value : Symbol(value, Decl(discriminantPropertyCheck.ts, 81, 20))
+>toExponential : Symbol(toExponential, Decl(lib.es5.d.ts, --, --))
 
                 break;
             }
@@= skipped -42, +42 lines =@@
 >A : Symbol(A, Decl(discriminantPropertyCheck.ts, 102, 47))
 
   a?: string;
->a : Symbol(A.a, Decl(discriminantPropertyCheck.ts, 104, 13))
+>a : Symbol(a, Decl(discriminantPropertyCheck.ts, 104, 13))
 
   b?: string;
->b : Symbol(A.b, Decl(discriminantPropertyCheck.ts, 105, 13))
+>b : Symbol(b, Decl(discriminantPropertyCheck.ts, 105, 13))
 }
 
 interface B {
 >B : Symbol(B, Decl(discriminantPropertyCheck.ts, 107, 1))
 
   a: string;
->a : Symbol(B.a, Decl(discriminantPropertyCheck.ts, 109, 13))
+>a : Symbol(a, Decl(discriminantPropertyCheck.ts, 109, 13))
 
   b: string;
->b : Symbol(B.b, Decl(discriminantPropertyCheck.ts, 110, 12))
+>b : Symbol(b, Decl(discriminantPropertyCheck.ts, 110, 12))
 }
 
 type U = A | B;
@@= skipped -67, +67 lines =@@
 >AdditiveObj : Symbol(AdditiveObj, Decl(discriminantPropertyCheck.ts, 125, 32))
 
     key: Additive
->key : Symbol(AdditiveObj.key, Decl(discriminantPropertyCheck.ts, 127, 23))
+>key : Symbol(key, Decl(discriminantPropertyCheck.ts, 127, 23))
 >Additive : Symbol(Additive, Decl(discriminantPropertyCheck.ts, 120, 26))
 }
 
@@= skipped -8, +8 lines =@@
 >MultiplicativeObj : Symbol(MultiplicativeObj, Decl(discriminantPropertyCheck.ts, 129, 1))
 
     key: Multiplicative
->key : Symbol(MultiplicativeObj.key, Decl(discriminantPropertyCheck.ts, 131, 29))
+>key : Symbol(key, Decl(discriminantPropertyCheck.ts, 131, 29))
 >Multiplicative : Symbol(Multiplicative, Decl(discriminantPropertyCheck.ts, 124, 26))
 }
 
@@= skipped -22, +22 lines =@@
         case '+': {
             onlyPlus(obj.key);
 >onlyPlus : Symbol(onlyPlus, Decl(discriminantPropertyCheck.ts, 144, 1))
->obj.key : Symbol(AdditiveObj.key, Decl(discriminantPropertyCheck.ts, 127, 23))
+>obj.key : Symbol(key, Decl(discriminantPropertyCheck.ts, 127, 23))
 >obj : Symbol(obj, Decl(discriminantPropertyCheck.ts, 137, 20))
->key : Symbol(AdditiveObj.key, Decl(discriminantPropertyCheck.ts, 127, 23))
+>key : Symbol(key, Decl(discriminantPropertyCheck.ts, 127, 23))
 
             return;
         }
@@= skipped -27, +27 lines =@@
 >BarEnum : Symbol(BarEnum, Decl(discriminantPropertyCheck.ts, 152, 44))
 
     bar1 = 1,
->bar1 : Symbol(BarEnum.bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
+>bar1 : Symbol(bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
 
     bar2 = 2,
->bar2 : Symbol(BarEnum.bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
+>bar2 : Symbol(bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
 }
 
 type UnionOfBar = TypeBar1 | TypeBar2;
@@= skipped -15, +15 lines =@@
 >TypeBar1 : Symbol(TypeBar1, Decl(discriminantPropertyCheck.ts, 159, 38))
 >type : Symbol(type, Decl(discriminantPropertyCheck.ts, 160, 17))
 >BarEnum : Symbol(BarEnum, Decl(discriminantPropertyCheck.ts, 152, 44))
->bar1 : Symbol(BarEnum.bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
+>bar1 : Symbol(bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
 
 type TypeBar2 = { type: BarEnum.bar2 };
 >TypeBar2 : Symbol(TypeBar2, Decl(discriminantPropertyCheck.ts, 160, 39))
 >type : Symbol(type, Decl(discriminantPropertyCheck.ts, 161, 17))
 >BarEnum : Symbol(BarEnum, Decl(discriminantPropertyCheck.ts, 152, 44))
->bar2 : Symbol(BarEnum.bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
+>bar2 : Symbol(bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
 
 function func3(value: Partial<UnionOfBar>) {
 >func3 : Symbol(func3, Decl(discriminantPropertyCheck.ts, 161, 39))
@@= skipped -26, +26 lines =@@
 >type : Symbol(type, Decl(discriminantPropertyCheck.ts, 160, 17), Decl(discriminantPropertyCheck.ts, 161, 17))
 
             case BarEnum.bar1:
->BarEnum.bar1 : Symbol(BarEnum.bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
+>BarEnum.bar1 : Symbol(bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
 >BarEnum : Symbol(BarEnum, Decl(discriminantPropertyCheck.ts, 152, 44))
->bar1 : Symbol(BarEnum.bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
+>bar1 : Symbol(bar1, Decl(discriminantPropertyCheck.ts, 154, 20))
 
                 break;
             case BarEnum.bar2:
->BarEnum.bar2 : Symbol(BarEnum.bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
+>BarEnum.bar2 : Symbol(bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
 >BarEnum : Symbol(BarEnum, Decl(discriminantPropertyCheck.ts, 152, 44))
->bar2 : Symbol(BarEnum.bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
+>bar2 : Symbol(bar2, Decl(discriminantPropertyCheck.ts, 155, 13))
 
                 break;
             default:
@@= skipped -27, +27 lines =@@
 >TypeA : Symbol(TypeA, Decl(discriminantPropertyCheck.ts, 174, 1))
 
     Name: "TypeA";
->Name : Symbol(TypeA.Name, Decl(discriminantPropertyCheck.ts, 178, 17))
+>Name : Symbol(Name, Decl(discriminantPropertyCheck.ts, 178, 17))
 
     Value1: "Cool stuff!";
->Value1 : Symbol(TypeA.Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
+>Value1 : Symbol(Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
 }
 
 interface TypeB {
 >TypeB : Symbol(TypeB, Decl(discriminantPropertyCheck.ts, 181, 1))
 
     Name: "TypeB";
->Name : Symbol(TypeB.Name, Decl(discriminantPropertyCheck.ts, 183, 17))
+>Name : Symbol(Name, Decl(discriminantPropertyCheck.ts, 183, 17))
 
     Value2: 0;
->Value2 : Symbol(TypeB.Value2, Decl(discriminantPropertyCheck.ts, 184, 18))
+>Value2 : Symbol(Value2, Decl(discriminantPropertyCheck.ts, 184, 18))
 }
 
 type Type = TypeA | TypeB;
@@= skipped -39, +39 lines =@@
 
         const value1 = data.Value1;
 >value1 : Symbol(value1, Decl(discriminantPropertyCheck.ts, 194, 13))
->data.Value1 : Symbol(TypeA.Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
+>data.Value1 : Symbol(Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
 >data : Symbol(data, Decl(discriminantPropertyCheck.ts, 192, 23))
->Value1 : Symbol(TypeA.Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
+>Value1 : Symbol(Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
     }
 }
 
@@= skipped -21, +21 lines =@@
 
             const value1 = data.Value1;
 >value1 : Symbol(value1, Decl(discriminantPropertyCheck.ts, 201, 17))
->data.Value1 : Symbol(TypeA.Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
+>data.Value1 : Symbol(Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
 >data : Symbol(data, Decl(discriminantPropertyCheck.ts, 198, 21))
->Value1 : Symbol(TypeA.Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
+>Value1 : Symbol(Value1, Decl(discriminantPropertyCheck.ts, 179, 18))
         }
     }
 }
@@= skipped -46, +46 lines =@@
 >ids : Symbol(ids, Decl(discriminantPropertyCheck.ts, 222, 50))
 
     ids.forEach(id => {
->ids.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>ids.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >ids : Symbol(ids, Decl(discriminantPropertyCheck.ts, 222, 50))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >id : Symbol(id, Decl(discriminantPropertyCheck.ts, 223, 16))
 
         let test;
@@= skipped -19, +19 lines =@@
 >type : Symbol(type, Decl(discriminantPropertyCheck.ts, 208, 14), Decl(discriminantPropertyCheck.ts, 213, 14))
 
             console.log(test.bananas);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >test.bananas : Symbol(bananas, Decl(discriminantPropertyCheck.ts, 209, 18))
 >test : Symbol(test, Decl(discriminantPropertyCheck.ts, 224, 11))
 >bananas : Symbol(bananas, Decl(discriminantPropertyCheck.ts, 209, 18))
@@= skipped -14, +14 lines =@@
 
             case 'testA': {
                 console.log(test.bananas);
->console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>console.log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >console : Symbol(console, Decl(lib.dom.d.ts, --, --))
->log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
+>log : Symbol(log, Decl(lib.dom.d.ts, --, --))
 >test.bananas : Symbol(bananas, Decl(discriminantPropertyCheck.ts, 209, 18))
 >test : Symbol(test, Decl(discriminantPropertyCheck.ts, 224, 11))
 >bananas : Symbol(bananas, Decl(discriminantPropertyCheck.ts, 209, 18))
