//// [tests/cases/compiler/jsxIssuesErrorWhenTagExpectsTooManyArguments.tsx] ////

=== jsxIssuesErrorWhenTagExpectsTooManyArguments.tsx ===
/// <reference path="react16.d.ts" />

import * as React from "react";
>React : typeof React

interface MyProps {
    x: number;
>x : number
}

function MyComp4(props: MyProps, context: any, bad: any, verybad: any) {
>MyComp4 : (props: MyProps, context: any, bad: any, verybad: any) => Element
>props : MyProps
>context : any
>bad : any
>verybad : any

    return <div></div>;
><div></div> : Element
>div : any
>div : any
}
function MyComp3(props: MyProps, context: any, bad: any) {
>MyComp3 : (props: MyProps, context: any, bad: any) => Element
>props : MyProps
>context : any
>bad : any

    return <div></div>;
><div></div> : Element
>div : any
>div : any
}
function MyComp2(props: MyProps, context: any) {
>MyComp2 : (props: MyProps, context: any) => Element
>props : MyProps
>context : any

    return <div></div>
><div></div> : Element
>div : any
>div : any
}

const a = <MyComp4 x={2}/>; // using `MyComp` as a component should error - it expects more arguments than react provides
>a : Element
><MyComp4 x={2}/> : Element
>MyComp4 : (props: MyProps, context: any, bad: any, verybad: any) => Element
>x : number
>2 : 2

const b = <MyComp3 x={2}/>; // using `MyComp` as a component should error - it expects more arguments than react provides
>b : Element
><MyComp3 x={2}/> : Element
>MyComp3 : (props: MyProps, context: any, bad: any) => Element
>x : number
>2 : 2

const c  = <MyComp2 x={2}/>; // Should be OK, `context` is allowed, per react rules
>c : Element
><MyComp2 x={2}/> : Element
>MyComp2 : (props: MyProps, context: any) => Element
>x : number
>2 : 2

declare function MyTagWithOptionalNonJSXBits(props: MyProps, context: any, nonReactArg?: string): JSX.Element;
>MyTagWithOptionalNonJSXBits : (props: MyProps, context: any, nonReactArg?: string) => Element
>props : MyProps
>context : any
>nonReactArg : string
>JSX : any

const d = <MyTagWithOptionalNonJSXBits x={2} />; // Technically OK, but probably questionable
>d : Element
><MyTagWithOptionalNonJSXBits x={2} /> : Element
>MyTagWithOptionalNonJSXBits : (props: MyProps, context: any, nonReactArg?: string) => Element
>x : number
>2 : 2

