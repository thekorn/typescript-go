--- old.tsxAttributeQuickinfoTypesSameAsObjectLiteral.symbols
+++ new.tsxAttributeQuickinfoTypesSameAsObjectLiteral.symbols
@@= skipped -7, +7 lines =@@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 0, 15))
 
         span: {};
->span : Symbol(IntrinsicElements.span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
+>span : Symbol(span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
     }
     export interface Element {
 >Element : Symbol(Element, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 3, 5))
 
 		something?: any;
->something : Symbol(Element.something, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 4, 30))
+>something : Symbol(something, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 4, 30))
     }
 }
 
@@= skipped -14, +14 lines =@@
 >Foo : Symbol(Foo, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 5))
 >props : Symbol(props, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 13))
 >foo : Symbol(foo, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 21))
->span : Symbol(JSX.IntrinsicElements.span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
+>span : Symbol(span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
 >props.foo : Symbol(foo, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 21))
 >props : Symbol(props, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 13))
 >foo : Symbol(foo, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 21))
->span : Symbol(JSX.IntrinsicElements.span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
+>span : Symbol(span, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 1, 40))
 
 Foo({
 >Foo : Symbol(Foo, Decl(tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx, 9, 5))
