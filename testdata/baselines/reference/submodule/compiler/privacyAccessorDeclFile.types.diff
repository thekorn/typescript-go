--- old.privacyAccessorDeclFile.types
+++ new.privacyAccessorDeclFile.types
@@= skipped -308, +308 lines =@@
 >publicClassWithPrivateModuleGetAccessorTypes : publicClassWithPrivateModuleGetAccessorTypes
 
     static get myPublicStaticMethod(): privateModule.publicClass { // Error
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
         return null;
     }
     get myPublicMethod(): privateModule.publicClass { // Error
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
         return null;
     }
     static get myPublicStaticMethod1() { // Error
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
         return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
     }
     get myPublicMethod1() { // Error
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
         return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
     }
 }
 
@@= skipped -35, +35 lines =@@
 >publicClassWithPrivateModuleSetAccessorTypes : publicClassWithPrivateModuleSetAccessorTypes
 
     static set myPublicStaticMethod(param: privateModule.publicClass) { // Error
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
     }
     set myPublicMethod(param: privateModule.publicClass) { // Error
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
     }
 }
@@= skipped -15, +15 lines =@@
 >privateClassWithPrivateModuleGetAccessorTypes : privateClassWithPrivateModuleGetAccessorTypes
 
     static get myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
         return null;
     }
     get myPublicMethod(): privateModule.publicClass {
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
         return null;
     }
     static get myPublicStaticMethod1() {
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
         return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
     }
     get myPublicMethod1() {
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
         return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
     }
 }
 
@@= skipped -35, +35 lines =@@
 >privateClassWithPrivateModuleSetAccessorTypes : privateClassWithPrivateModuleSetAccessorTypes
 
     static set myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
     }
     set myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
     }
 }
@@= skipped -321, +321 lines =@@
 >publicClassWithPrivateModuleGetAccessorTypes : publicClassWithPrivateModuleGetAccessorTypes
 
         static get myPublicStaticMethod(): privateModule.publicClass { // Error
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
             return null;
         }
         get myPublicMethod(): privateModule.publicClass { // Error
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
             return null;
         }
         static get myPublicStaticMethod1() { // Error
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
         get myPublicMethod1() { // Error
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
     }
 
@@= skipped -35, +35 lines =@@
 >publicClassWithPrivateModuleSetAccessorTypes : publicClassWithPrivateModuleSetAccessorTypes
 
         static set myPublicStaticMethod(param: privateModule.publicClass) { // Error
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
         set myPublicMethod(param: privateModule.publicClass) { // Error
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
     }
@@= skipped -15, +15 lines =@@
 >privateClassWithPrivateModuleGetAccessorTypes : privateClassWithPrivateModuleGetAccessorTypes
 
         static get myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
             return null;
         }
         get myPublicMethod(): privateModule.publicClass {
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
             return null;
         }
         static get myPublicStaticMethod1() {
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
         get myPublicMethod1() {
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
     }
 
@@= skipped -35, +35 lines =@@
 >privateClassWithPrivateModuleSetAccessorTypes : privateClassWithPrivateModuleSetAccessorTypes
 
         static set myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
         set myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
     }
@@= skipped -1216, +1216 lines =@@
 >publicClassWithPrivateModuleGetAccessorTypes : publicClassWithPrivateModuleGetAccessorTypes
 
         static get myPublicStaticMethod(): privateModule.publicClass { // Error
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
             return null;
         }
         get myPublicMethod(): privateModule.publicClass { // Error
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
             return null;
         }
         static get myPublicStaticMethod1() { // Error
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
         get myPublicMethod1() { // Error
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
     }
 
@@= skipped -35, +35 lines =@@
 >publicClassWithPrivateModuleSetAccessorTypes : publicClassWithPrivateModuleSetAccessorTypes
 
         static set myPublicStaticMethod(param: privateModule.publicClass) { // Error
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
         set myPublicMethod(param: privateModule.publicClass) { // Error
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
     }
@@= skipped -15, +15 lines =@@
 >privateClassWithPrivateModuleGetAccessorTypes : privateClassWithPrivateModuleGetAccessorTypes
 
         static get myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : privateModule.publicClass
+>myPublicStaticMethod : publicClass
 >privateModule : any
 
             return null;
         }
         get myPublicMethod(): privateModule.publicClass {
->myPublicMethod : privateModule.publicClass
+>myPublicMethod : publicClass
 >privateModule : any
 
             return null;
         }
         static get myPublicStaticMethod1() {
->myPublicStaticMethod1 : privateModule.publicClass
+>myPublicStaticMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
         get myPublicMethod1() {
->myPublicMethod1 : privateModule.publicClass
+>myPublicMethod1 : publicClass
 
             return new privateModule.publicClass();
->new privateModule.publicClass() : privateModule.publicClass
->privateModule.publicClass : typeof privateModule.publicClass
+>new privateModule.publicClass() : publicClass
+>privateModule.publicClass : typeof publicClass
 >privateModule : typeof privateModule
->publicClass : typeof privateModule.publicClass
+>publicClass : typeof publicClass
         }
     }
 
@@= skipped -35, +35 lines =@@
 >privateClassWithPrivateModuleSetAccessorTypes : privateClassWithPrivateModuleSetAccessorTypes
 
         static set myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicStaticMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
         set myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : privateModule.publicClass
->param : privateModule.publicClass
+>myPublicMethod : publicClass
+>param : publicClass
 >privateModule : any
         }
     }
