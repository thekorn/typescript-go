--- old.typeInferenceLiteralUnion.types
+++ new.typeInferenceLiteralUnion.types
@@= skipped -46, +46 lines =@@
  * Return the min and max simultaneously.
  */
 export function extent<T extends Numeric>(array: Array<T | Primitive>): [T | Primitive, T | Primitive] | [undefined, undefined] {
->extent : <T extends Numeric>(array: Array<T | Primitive>) => [T | Primitive, T | Primitive] | [undefined, undefined]
+>extent : <T extends Numeric>(array: (T | Primitive)[]) => [undefined, undefined] | [T | Primitive, T | Primitive]
 >array : (T | Primitive)[]
 
     return [undefined, undefined];
@@= skipped -17, +17 lines =@@
 >extentMixed = extent([new NumCoercible(10), 13, '12', true]) : [undefined, undefined] | [NumCoercible | Primitive, NumCoercible | Primitive]
 >extentMixed : [undefined, undefined] | [NumCoercible | Primitive, NumCoercible | Primitive]
 >extent([new NumCoercible(10), 13, '12', true]) : [undefined, undefined] | [NumCoercible | Primitive, NumCoercible | Primitive]
->extent : <T extends Numeric>(array: Array<T | Primitive>) => [T | Primitive, T | Primitive] | [undefined, undefined]
+>extent : <T extends Numeric>(array: (T | Primitive)[]) => [undefined, undefined] | [T | Primitive, T | Primitive]
 >[new NumCoercible(10), 13, '12', true] : (string | number | true | NumCoercible)[]
 >new NumCoercible(10) : NumCoercible
 >NumCoercible : typeof NumCoercible
