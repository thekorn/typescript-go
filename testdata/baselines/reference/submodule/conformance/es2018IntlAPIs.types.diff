--- old.es2018IntlAPIs.types
+++ new.es2018IntlAPIs.types
@@= skipped -24, +24 lines =@@
 >Intl.PluralRules.supportedLocalesOf(locales, options).join(', ') : string
 >Intl.PluralRules.supportedLocalesOf(locales, options).join : (separator?: string) => string
 >Intl.PluralRules.supportedLocalesOf(locales, options) : string[]
->Intl.PluralRules.supportedLocalesOf : (locales: string | readonly string[], options?: { localeMatcher?: "lookup" | "best fit"; }) => string[]
->Intl.PluralRules : Intl.PluralRulesConstructor
+>Intl.PluralRules.supportedLocalesOf : (locales: string | readonly string[], options?: { localeMatcher?: "best fit" | "lookup"; }) => string[]
+>Intl.PluralRules : PluralRulesConstructor
 >Intl : typeof Intl
->PluralRules : Intl.PluralRulesConstructor
->supportedLocalesOf : (locales: string | readonly string[], options?: { localeMatcher?: "lookup" | "best fit"; }) => string[]
+>PluralRules : PluralRulesConstructor
+>supportedLocalesOf : (locales: string | readonly string[], options?: { localeMatcher?: "best fit" | "lookup"; }) => string[]
 >locales : string[]
 >options : { readonly localeMatcher: "lookup"; }
 >join : (separator?: string) => string
 >', ' : ", "
 
 const [ part ] = new Intl.NumberFormat().formatToParts();
->part : Intl.NumberFormatPart
->new Intl.NumberFormat().formatToParts() : Intl.NumberFormatPart[]
->new Intl.NumberFormat().formatToParts : (number?: number | bigint) => Intl.NumberFormatPart[]
->new Intl.NumberFormat() : Intl.NumberFormat
->Intl.NumberFormat : Intl.NumberFormatConstructor
+>part : NumberFormatPart
+>new Intl.NumberFormat().formatToParts() : NumberFormatPart[]
+>new Intl.NumberFormat().formatToParts : (number?: number | bigint) => NumberFormatPart[]
+>new Intl.NumberFormat() : NumberFormat
+>Intl.NumberFormat : NumberFormatConstructor
 >Intl : typeof Intl
->NumberFormat : Intl.NumberFormatConstructor
->formatToParts : (number?: number | bigint) => Intl.NumberFormatPart[]
+>NumberFormat : NumberFormatConstructor
+>formatToParts : (number?: number | bigint) => NumberFormatPart[]
 
 console.log(part.type, part.value);
 >console.log(part.type, part.value) : void
 >console.log : (...data: any[]) => void
 >console : Console
 >log : (...data: any[]) => void
->part.type : keyof Intl.NumberFormatPartTypeRegistry
->part : Intl.NumberFormatPart
->type : keyof Intl.NumberFormatPartTypeRegistry
+>part.type : keyof NumberFormatPartTypeRegistry
+>part : NumberFormatPart
+>type : keyof NumberFormatPartTypeRegistry
 >part.value : string
->part : Intl.NumberFormatPart
+>part : NumberFormatPart
 >value : string
 
