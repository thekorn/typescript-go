//// [tests/cases/conformance/jsdoc/checkJsdocTypeTag1.ts] ////

=== 0.js ===
// @ts-check
/** @type {String} */
var S = "hello world";
>S : string
>"hello world" : "hello world"

/** @type {number} */
var n = 10;
>n : number
>10 : 10

/** @type {*} */
var anyT = 2;
>anyT : number
>2 : 2

anyT = "hello";
>anyT = "hello" : "hello"
>anyT : number
>"hello" : "hello"

/** @type {?} */
var anyT1 = 2;
>anyT1 : number
>2 : 2

anyT1 = "hi";
>anyT1 = "hi" : "hi"
>anyT1 : number
>"hi" : "hi"

/** @type {Function} */
const x = (a) => a + 1;
>x : (a: any) => any
>(a) => a + 1 : (a: any) => any
>a : any
>a + 1 : any
>a : any
>1 : 1

x(1);
>x(1) : any
>x : (a: any) => any
>1 : 1

/** @type {function} */
const y = (a) => a + 1;
>y : (a: any) => any
>(a) => a + 1 : (a: any) => any
>a : any
>a + 1 : any
>a : any
>1 : 1

y(1);
>y(1) : any
>y : (a: any) => any
>1 : 1

/** @type {function (number)} */
const x1 = (a) => a + 1;
>x1 : (a: any) => any
>(a) => a + 1 : (a: any) => any
>a : any
>a + 1 : any
>a : any
>1 : 1

x1(0);
>x1(0) : any
>x1 : (a: any) => any
>0 : 0

/** @type {function (number): number} */
const x2 = (a) => a + 1;
>x2 : (a: any) => any
>(a) => a + 1 : (a: any) => any
>a : any
>a + 1 : any
>a : any
>1 : 1

x2(0);
>x2(0) : any
>x2 : (a: any) => any
>0 : 0

/**
 * @type {object}
 */
var props = {};
>props : {}
>{} : {}

/**
 * @type {Object}
 */
var props = {};
>props : {}
>{} : {}

