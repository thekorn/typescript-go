--- old.subtypesOfTypeParameter.types
+++ new.subtypesOfTypeParameter.types
@@= skipped -215, +215 lines =@@
 >() => { } : () => void
 
     var r8 = true ? <T>(x: T) => { return x } : x;
->r8 : T | (<T_1>(x: T_1) => T_1)
->true ? <T>(x: T) => { return x } : x : T | (<T_1>(x: T_1) => T_1)
+>r8 : T | (<T>(x: T) => T)
+>true ? <T>(x: T) => { return x } : x : T | (<T>(x: T) => T)
 >true : true
-><T>(x: T) => { return x } : <T_1>(x: T_1) => T_1
+><T>(x: T) => { return x } : <T>(x: T) => T
 >x : T
 >x : T
 >x : T
 
     var r8b = true ? x : <T>(x: T) => { return x }; // type parameters not identical across declarations
->r8b : T | (<T_1>(x: T_1) => T_1)
->true ? x : <T>(x: T) => { return x } : T | (<T_1>(x: T_1) => T_1)
+>r8b : T | (<T>(x: T) => T)
+>true ? x : <T>(x: T) => { return x } : T | (<T>(x: T) => T)
 >true : true
 >x : T
-><T>(x: T) => { return x } : <T_1>(x: T_1) => T_1
+><T>(x: T) => { return x } : <T>(x: T) => T
 >x : T
 >x : T
 
@@= skipped -143, +143 lines =@@
 >a : T
 
         var r17 = true ? x : a;
->r17 : T_1 | T
->true ? x : a : T_1 | T
+>r17 : T | T
+>true ? x : a : T | T
 >true : true
->x : T_1
+>x : T
 >a : T
 
         var r17 = true ? a : x;
->r17 : T_1 | T
->true ? a : x : T_1 | T
+>r17 : T | T
+>true ? a : x : T | T
 >true : true
 >a : T
->x : T_1
+>x : T
     }
 
     function f18<T, U extends T>(a: U) {
@@= skipped -19, +19 lines =@@
 >a : U
 
         var r18 = true ? x : a;
->r18 : T_1 | U
->true ? x : a : T_1 | U
+>r18 : T | U
+>true ? x : a : T | U
 >true : true
->x : T_1
+>x : T
 >a : U
 
         var r18 = true ? a : x;
->r18 : T_1 | U
->true ? a : x : T_1 | U
+>r18 : T | U
+>true ? a : x : T | U
 >true : true
 >a : U
->x : T_1
+>x : T
     }
 
     var r19 = true ? new Object() : x; // BCT is Object
