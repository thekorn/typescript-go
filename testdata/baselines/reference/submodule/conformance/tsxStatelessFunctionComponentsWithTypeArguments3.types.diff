--- old.tsxStatelessFunctionComponentsWithTypeArguments3.types
+++ new.tsxStatelessFunctionComponentsWithTypeArguments3.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : typeof __React
 
 declare function OverloadComponent<U>(): JSX.Element;
->OverloadComponent : { <U>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U_1>(attr: { b: U_1; a: T; }): JSX.Element; }
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >JSX : any
 
 declare function OverloadComponent<U>(attr: {b: U, a?: string, "ignore-prop": boolean}): JSX.Element;
->OverloadComponent : { <U_1>(): JSX.Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U_1>(attr: { b: U_1; a: T; }): JSX.Element; }
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >attr : { b: U; a?: string; "ignore-prop": boolean; }
 >b : U
 >a : string
@@= skipped -15, +15 lines =@@
 >JSX : any
 
 declare function OverloadComponent<T, U>(attr: {b: U, a: T}): JSX.Element;
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T, U>(attr: { b: U; a: T; }): JSX.Element; }
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >attr : { b: U; a: T; }
 >b : U
 >a : T
@@= skipped -16, +16 lines =@@
 >arg2 : U
 
     let a0 = <OverloadComponent {...arg1} a="hello" ignore-prop />;
->a0 : JSX.Element
-><OverloadComponent {...arg1} a="hello" ignore-prop /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a0 : Element
+><OverloadComponent {...arg1} a="hello" ignore-prop /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg1 : T
 >a : string
 >ignore-prop : true
 
     let a1 = <OverloadComponent {...arg2} ignore-pro="hello world" />;
->a1 : JSX.Element
-><OverloadComponent {...arg2} ignore-pro="hello world" /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a1 : Element
+><OverloadComponent {...arg2} ignore-pro="hello world" /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg2 : U
 >ignore-pro : string
 
     let a2 = <OverloadComponent {...arg2} />;
->a2 : JSX.Element
-><OverloadComponent {...arg2} /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a2 : Element
+><OverloadComponent {...arg2} /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg2 : U
 
     let a3 = <OverloadComponent {...arg1} ignore-prop />;
->a3 : JSX.Element
-><OverloadComponent {...arg1} ignore-prop /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a3 : Element
+><OverloadComponent {...arg1} ignore-prop /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg1 : T
 >ignore-prop : true
 
     let a4 = <OverloadComponent />;
->a4 : JSX.Element
-><OverloadComponent /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a4 : Element
+><OverloadComponent /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 
     let a5 = <OverloadComponent {...arg2} ignore-prop="hello" {...arg1} />;
->a5 : JSX.Element
-><OverloadComponent {...arg2} ignore-prop="hello" {...arg1} /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a5 : Element
+><OverloadComponent {...arg2} ignore-prop="hello" {...arg1} /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg2 : U
 >ignore-prop : string
 >arg1 : T
 
     let a6 = <OverloadComponent {...arg2} ignore-prop {...arg1} />;
->a6 : JSX.Element
-><OverloadComponent {...arg2} ignore-prop {...arg1} /> : JSX.Element
->OverloadComponent : { <U_1>(): JSX.Element; <U_1>(attr: { b: U_1; a?: string; "ignore-prop": boolean; }): JSX.Element; <T_1, U_1>(attr: { b: U_1; a: T_1; }): JSX.Element; }
+>a6 : Element
+><OverloadComponent {...arg2} ignore-prop {...arg1} /> : Element
+>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
 >arg2 : U
 >ignore-prop : true
 >arg1 : T
 }
 
 declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
->Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U_1>(l: { func: (arg1: U_1, arg2: string) => void; }): JSX.Element; }
+>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
 >l : { func: (arg: U) => void; }
 >func : (arg: U) => void
 >arg : U
 >JSX : any
 
 declare function Link<U>(l: {func: (arg1:U, arg2: string)=>void}): JSX.Element;
->Link : { <U_1>(l: { func: (arg: U_1) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
+>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
 >l : { func: (arg1: U, arg2: string) => void; }
 >func : (arg1: U, arg2: string) => void
 >arg1 : U
@@= skipped -70, +70 lines =@@
 >a : number
 
     let o = <Link func={func} />
->o : JSX.Element
-><Link func={func} /> : JSX.Element
->Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
+>o : Element
+><Link func={func} /> : Element
+>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
 >func : (a: number) => void
 >func : (a: number) => void
 
     let o1 = <Link func={(a:number, b:string)=>{}} />;
->o1 : JSX.Element
-><Link func={(a:number, b:string)=>{}} /> : JSX.Element
->Link : { <U>(l: { func: (arg: U) => void; }): JSX.Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): JSX.Element; }
+>o1 : Element
+><Link func={(a:number, b:string)=>{}} /> : Element
+>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
 >func : (a: number, b: string) => void
 >(a:number, b:string)=>{} : (a: number, b: string) => void
 >a : number
