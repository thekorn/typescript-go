--- old.tsxStatelessFunctionComponentOverload3.types
+++ new.tsxStatelessFunctionComponentOverload3.types
@@= skipped -5, +5 lines =@@
 >color : any
 }
 declare function ZeroThingOrTwoThing(): JSX.Element;
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >JSX : any
 
 declare function ZeroThingOrTwoThing(l: {yy: number, yy1: string}, context: Context): JSX.Element;
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >l : { yy: number; yy1: string; }
 >yy : number
 >yy1 : string
@@= skipped -16, +16 lines =@@
 
 // OK
 const two1 = <ZeroThingOrTwoThing />;
->two1 : JSX.Element
-><ZeroThingOrTwoThing /> : JSX.Element
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>two1 : Element
+><ZeroThingOrTwoThing /> : Element
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 
 const two2 = <ZeroThingOrTwoThing yy={100}  yy1="hello"/>;
->two2 : JSX.Element
-><ZeroThingOrTwoThing yy={100}  yy1="hello"/> : JSX.Element
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>two2 : Element
+><ZeroThingOrTwoThing yy={100}  yy1="hello"/> : Element
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >yy : number
 >100 : 100
 >yy1 : string
 
 const two3 = <ZeroThingOrTwoThing {...obj2} />;  // it is just any so we allow it to pass through
->two3 : JSX.Element
-><ZeroThingOrTwoThing {...obj2} /> : JSX.Element
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>two3 : Element
+><ZeroThingOrTwoThing {...obj2} /> : Element
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >obj2 : any
 
 const two4 = <ZeroThingOrTwoThing  yy={1000} {...obj2} />;  // it is just any so we allow it to pass through
->two4 : JSX.Element
-><ZeroThingOrTwoThing  yy={1000} {...obj2} /> : JSX.Element
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>two4 : Element
+><ZeroThingOrTwoThing  yy={1000} {...obj2} /> : Element
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >yy : number
 >1000 : 1000
 >obj2 : any
 
 const two5 = <ZeroThingOrTwoThing  {...obj2} yy={1000} />;  // it is just any so we allow it to pass through
->two5 : JSX.Element
-><ZeroThingOrTwoThing  {...obj2} yy={1000} /> : JSX.Element
->ZeroThingOrTwoThing : { (): JSX.Element; (l: { yy: number; yy1: string; }, context: Context): JSX.Element; }
+>two5 : Element
+><ZeroThingOrTwoThing  {...obj2} yy={1000} /> : Element
+>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
 >obj2 : any
 >yy : number
 >1000 : 1000
 
 declare function ThreeThing(l: {y1: string}): JSX.Element;
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >l : { y1: string; }
 >y1 : string
 >JSX : any
 
 declare function ThreeThing(l: {y2: string}): JSX.Element;
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >l : { y2: string; }
 >y2 : string
 >JSX : any
 
 declare function ThreeThing(l: {yy: number, yy1: string}, context: Context, updater: any): JSX.Element;
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >l : { yy: number; yy1: string; }
 >yy : number
 >yy1 : string
@@= skipped -57, +57 lines =@@
 
 // OK
 const three1 = <ThreeThing yy={99} yy1="hello world" />;
->three1 : JSX.Element
-><ThreeThing yy={99} yy1="hello world" /> : JSX.Element
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>three1 : Element
+><ThreeThing yy={99} yy1="hello world" /> : Element
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >yy : number
 >99 : 99
 >yy1 : string
 
 const three2 = <ThreeThing y2="Bye" />;
->three2 : JSX.Element
-><ThreeThing y2="Bye" /> : JSX.Element
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>three2 : Element
+><ThreeThing y2="Bye" /> : Element
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >y2 : string
 
 const three3 = <ThreeThing {...obj2} y2={10} />;  // it is just any so we allow it to pass through
->three3 : JSX.Element
-><ThreeThing {...obj2} y2={10} /> : JSX.Element
->ThreeThing : { (l: { y1: string; }): JSX.Element; (l: { y2: string; }): JSX.Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): JSX.Element; }
+>three3 : Element
+><ThreeThing {...obj2} y2={10} /> : Element
+>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
 >obj2 : any
 >y2 : number
 >10 : 10
