a.js(8,6): error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
a.js(9,6): error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
a.js(10,1): error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type 'typeof globalThis'.
  Property 'y' does not exist on type 'typeof globalThis'.
a.js(11,1): error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type 'typeof globalThis'.
  Property 'y' does not exist on type 'typeof globalThis'.
a.js(15,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(16,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(17,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(18,3): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
a.js(21,11): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.


==== a.js (9 errors) ====
    // This test is asserting that a single property/element access
    // on `this` is a special assignment declaration, but chaining
    // off that does not create additional declarations. Iâ€™m not sure
    // if it needs to be that way in JavaScript; the test simply
    // ensures no accidental changes were introduced while allowing
    // element access assignments to create declarations.
    
    this.x = {};
         ~
!!! error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
    this.x.y = {};
         ~
!!! error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
    this["y"] = {};
    ~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type 'typeof globalThis'.
!!! error TS7053:   Property 'y' does not exist on type 'typeof globalThis'.
    this["y"]["z"] = {};
    ~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"y"' can't be used to index type 'typeof globalThis'.
!!! error TS7053:   Property 'y' does not exist on type 'typeof globalThis'.
    
    /** @constructor */
    function F() {
      this.a = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this.a.b = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this["b"] = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      this["b"]["c"] = {};
      ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
    }
    
    const f = new F();
              ~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
    f.a;
    f.b;
    