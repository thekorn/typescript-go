//// [tests/cases/conformance/salsa/typeFromPrototypeAssignment3.ts] ////

=== bug26885.js ===
function Multimap3() {
>Multimap3 : { (): void; prototype: { get: (key: any) => any; }; }

    this._map = {};
>this._map = {} : {}
>this._map : any
>this : any
>_map : any
>{} : {}

};

Multimap3.prototype = {
>Multimap3.prototype = {    /**     * @param {string} key     * @returns {number} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }
>Multimap3.prototype : { get: (key: any) => any; }
>Multimap3 : { (): void; prototype: { get: (key: any) => any; }; }
>prototype : { get: (key: any) => any; }
>{    /**     * @param {string} key     * @returns {number} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }

    /**
     * @param {string} key
     * @returns {number} the value ok
     */
    get(key) {
>get : (key: any) => any
>key : any

        return this._map[key + ''];
>this._map[key + ''] : any
>this._map : any
>this : { get: (key: any) => any; }
>_map : any
>key + '' : string
>key : any
>'' : ""
    }
}

/** @type {Multimap3} */
const map = new Multimap3();
>map : any
>new Multimap3() : any
>Multimap3 : { (): void; prototype: { get: (key: any) => any; }; }

const n = map.get('hi')
>n : any
>map.get('hi') : any
>map.get : any
>map : any
>get : any
>'hi' : "hi"

