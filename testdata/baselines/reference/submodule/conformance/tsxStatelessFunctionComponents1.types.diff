--- old.tsxStatelessFunctionComponents1.types
+++ new.tsxStatelessFunctionComponents1.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 function EmptyPropSFC() {
->EmptyPropSFC : () => JSX.Element
+>EmptyPropSFC : () => Element
 
     return <div> Default Greeting </div>;
-><div> Default Greeting </div> : JSX.Element
+><div> Default Greeting </div> : Element
 >div : any
 >div : any
 }
 
 function Greet(x: {name: string}) {
->Greet : (x: { name: string; }) => JSX.Element
+>Greet : (x: { name: string; }) => Element
 >x : { name: string; }
 >name : string
 
 	return <div>Hello, {x}</div>;
-><div>Hello, {x}</div> : JSX.Element
+><div>Hello, {x}</div> : Element
 >div : any
 >x : { name: string; }
 >div : any
 }
 function Meet({name = 'world'}) {
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>Meet : (__0: { name?: string; }) => Element
 >name : string
 >'world' : "world"
 
 	return <div>Hello, {name}</div>;
-><div>Hello, {name}</div> : JSX.Element
+><div>Hello, {name}</div> : Element
 >div : any
 >name : string
 >div : any
 }
 function MeetAndGreet(k: {"prop-name": string}) {
->MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
+>MeetAndGreet : (k: { "prop-name": string; }) => Element
 >k : { "prop-name": string; }
 >"prop-name" : string
 
 	return <div>Hi Hi</div>;
-><div>Hi Hi</div> : JSX.Element
+><div>Hi Hi</div> : Element
 >div : any
 >div : any
 }
 
 // OK
 let a = <Greet name='world' />;
->a : JSX.Element
-><Greet name='world' /> : JSX.Element
->Greet : (x: { name: string; }) => JSX.Element
+>a : Element
+><Greet name='world' /> : Element
+>Greet : (x: { name: string; }) => Element
 >name : string
 
 let a1 = <Greet name='world' extra-prop />;
->a1 : JSX.Element
-><Greet name='world' extra-prop /> : JSX.Element
->Greet : (x: { name: string; }) => JSX.Element
+>a1 : Element
+><Greet name='world' extra-prop /> : Element
+>Greet : (x: { name: string; }) => Element
 >name : string
 >extra-prop : true
 
 // Error
 let b = <Greet naaame='world' />;
->b : JSX.Element
-><Greet naaame='world' /> : JSX.Element
->Greet : (x: { name: string; }) => JSX.Element
+>b : Element
+><Greet naaame='world' /> : Element
+>Greet : (x: { name: string; }) => Element
 >naaame : string
 
 // OK
 let c = <Meet />;
->c : JSX.Element
-><Meet /> : JSX.Element
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>c : Element
+><Meet /> : Element
+>Meet : (__0: { name?: string; }) => Element
 
 let c1 = <Meet extra-prop/>;
->c1 : JSX.Element
-><Meet extra-prop/> : JSX.Element
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>c1 : Element
+><Meet extra-prop/> : Element
+>Meet : (__0: { name?: string; }) => Element
 >extra-prop : true
 
 // OK
 let d = <Meet name='me' />;
->d : JSX.Element
-><Meet name='me' /> : JSX.Element
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>d : Element
+><Meet name='me' /> : Element
+>Meet : (__0: { name?: string; }) => Element
 >name : string
 
 // Error
 let e = <Meet name={42} />;
->e : JSX.Element
-><Meet name={42} /> : JSX.Element
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>e : Element
+><Meet name={42} /> : Element
+>Meet : (__0: { name?: string; }) => Element
 >name : number
 >42 : 42
 
 // Error
 let f = <Meet naaaaaaame='no' />;
->f : JSX.Element
-><Meet naaaaaaame='no' /> : JSX.Element
->Meet : ({ name }: { name?: string; }) => JSX.Element
+>f : Element
+><Meet naaaaaaame='no' /> : Element
+>Meet : (__0: { name?: string; }) => Element
 >naaaaaaame : string
 
 // OK
 let g = <MeetAndGreet prop-name="Bob" />;
->g : JSX.Element
-><MeetAndGreet prop-name="Bob" /> : JSX.Element
->MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
+>g : Element
+><MeetAndGreet prop-name="Bob" /> : Element
+>MeetAndGreet : (k: { "prop-name": string; }) => Element
 >prop-name : string
 
 // Error
 let h = <MeetAndGreet extra-prop-name="World" />;
->h : JSX.Element
-><MeetAndGreet extra-prop-name="World" /> : JSX.Element
->MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
+>h : Element
+><MeetAndGreet extra-prop-name="World" /> : Element
+>MeetAndGreet : (k: { "prop-name": string; }) => Element
 >extra-prop-name : string
 
 // Error
 let i = <EmptyPropSFC prop1 />
->i : JSX.Element
-><EmptyPropSFC prop1 /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>i : Element
+><EmptyPropSFC prop1 /> : Element
+>EmptyPropSFC : () => Element
 >prop1 : true
 
 let i1 = <EmptyPropSFC ref={x => x.greeting.substr(10)} />
->i1 : JSX.Element
-><EmptyPropSFC ref={x => x.greeting.substr(10)} /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>i1 : Element
+><EmptyPropSFC ref={x => x.greeting.substr(10)} /> : Element
+>EmptyPropSFC : () => Element
 >ref : (x: any) => any
 >x => x.greeting.substr(10) : (x: any) => any
 >x : any
@@= skipped -143, +143 lines =@@
 
 // OK as access properties are allow when spread
 let i2 = <EmptyPropSFC {...o} />
->i2 : JSX.Element
-><EmptyPropSFC {...o} /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>i2 : Element
+><EmptyPropSFC {...o} /> : Element
+>EmptyPropSFC : () => Element
 >o : { prop1: boolean; }
 
 let o1: any;
@@= skipped -10, +10 lines =@@
 
 // OK
 let j = <EmptyPropSFC {...o1} />
->j : JSX.Element
-><EmptyPropSFC {...o1} /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>j : Element
+><EmptyPropSFC {...o1} /> : Element
+>EmptyPropSFC : () => Element
 >o1 : any
 
 let j1 = <EmptyPropSFC />
->j1 : JSX.Element
-><EmptyPropSFC /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>j1 : Element
+><EmptyPropSFC /> : Element
+>EmptyPropSFC : () => Element
 
 let j2 = <EmptyPropSFC data-prop />
->j2 : JSX.Element
-><EmptyPropSFC data-prop /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>j2 : Element
+><EmptyPropSFC data-prop /> : Element
+>EmptyPropSFC : () => Element
 >data-prop : true
 
 let j3 = <EmptyPropSFC {...{}} />
->j3 : JSX.Element
-><EmptyPropSFC {...{}} /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>j3 : Element
+><EmptyPropSFC {...{}} /> : Element
+>EmptyPropSFC : () => Element
 >{} : {}
 
 let j4 = <EmptyPropSFC {...{ "data-info": "hi"}} />
->j4 : JSX.Element
-><EmptyPropSFC {...{ "data-info": "hi"}} /> : JSX.Element
->EmptyPropSFC : () => JSX.Element
+>j4 : Element
+><EmptyPropSFC {...{ "data-info": "hi"}} /> : Element
+>EmptyPropSFC : () => Element
 >{ "data-info": "hi"} : { "data-info": string; }
 >"data-info" : string
 >"hi" : "hi"
