//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsImportAliasExposedWithinNamespace.ts] ////

=== file.js ===
/**
 * @namespace myTypes
 * @global
 * @type {Object<string,*>}
 */
const myTypes = {
>myTypes : {}
>{    // SOME PROPS HERE} : {}

    // SOME PROPS HERE
};

/** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */

/**
 * @typedef myTypes.typeB
 * @property {myTypes.typeA}    prop1 - Prop 1.
 * @property {string}           prop2 - Prop 2.
 */

/** @typedef {myTypes.typeB|Function} myTypes.typeC */

export {myTypes};
>myTypes : {}

=== file2.js ===
import {myTypes} from './file.js';
>myTypes : {}

/**
 * @namespace testFnTypes
 * @global
 * @type {Object<string,*>}
 */
const testFnTypes = {
>testFnTypes : {}
>{    // SOME PROPS HERE} : {}

    // SOME PROPS HERE
};

/** @typedef {boolean|myTypes.typeC} testFnTypes.input */

/**
 * @function testFn
 * @description A test function.
 * @param {testFnTypes.input} input - Input.
 * @returns {number|null} Result.
 */
function testFn(input) {
>testFn : (input: any) => number
>input : any

    if (typeof input === 'number') {
>typeof input === 'number' : boolean
>typeof input : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>input : any
>'number' : "number"

        return 2 * input;
>2 * input : number
>2 : 2
>input : number

    } else {
        return null;
    }
}

export {testFn, testFnTypes};
>testFn : (input: any) => number
>testFnTypes : {}

