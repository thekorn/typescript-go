//// [tests/cases/conformance/jsx/tsxSpreadAttributesResolution13.tsx] ////

=== file.tsx ===
import React = require('react');
>React : typeof __React

interface ComponentProps {
    property1: string;
>property1 : string

    property2: number;
>property2 : number
}

export default function Component(props: ComponentProps) {
>Component : (props: ComponentProps) => Element
>props : ComponentProps

    let condition1: boolean;
>condition1 : boolean

    if (condition1) {
>condition1 : boolean

        return (
>(            <ChildComponent {...props} />        ) : Element

            <ChildComponent {...props} />
><ChildComponent {...props} /> : Element
>ChildComponent : (__0: AnotherComponentProps) => Element
>props : ComponentProps

        );
    }
    else {
        return (<ChildComponent {...props} property1="NewString" />);
>(<ChildComponent {...props} property1="NewString" />) : Element
><ChildComponent {...props} property1="NewString" /> : Element
>ChildComponent : (__0: AnotherComponentProps) => Element
>props : ComponentProps
>property1 : string
    }
}

interface AnotherComponentProps {
    property1: string;
>property1 : string
}

function ChildComponent({ property1 }: AnotherComponentProps) {
>ChildComponent : (__0: AnotherComponentProps) => Element
>property1 : string

    return (
>(        <span>{property1}</span>    ) : Element

        <span>{property1}</span>
><span>{property1}</span> : Element
>span : any
>property1 : string
>span : any

    );
}
