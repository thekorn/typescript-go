//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload2.tsx] ////

=== file.tsx ===
import React = require('react')
>React : typeof __React

declare function OneThing(): JSX.Element;
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>JSX : any

declare function OneThing(l: {yy: number, yy1: string}): JSX.Element;
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>l : { yy: number; yy1: string; }
>yy : number
>yy1 : string
>JSX : any

let obj = {
>obj : { yy: number; yy1: string; }
>{    yy: 10,    yy1: "hello"} : { yy: number; yy1: string; }

    yy: 10,
>yy : number
>10 : 10

    yy1: "hello"
>yy1 : string
>"hello" : "hello"
}

let obj1 = {
>obj1 : { yy: boolean; }
>{    yy: true} : { yy: boolean; }

    yy: true
>yy : boolean
>true : true
}

let obj2 = {
>obj2 : { yy: number; "ignore-prop": string; }
>{    yy: 500,    "ignore-prop": "hello"} : { yy: number; "ignore-prop": string; }

    yy: 500,
>yy : number
>500 : 500

    "ignore-prop": "hello"
>"ignore-prop" : string
>"hello" : "hello"
}

let defaultObj: any;
>defaultObj : any

// OK
const c1 = <OneThing />
>c1 : Element
><OneThing /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }

const c2 = <OneThing {...obj}/>
>c2 : Element
><OneThing {...obj}/> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>obj : { yy: number; yy1: string; }

const c3 = <OneThing {...{}} />
>c3 : Element
><OneThing {...{}} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>{} : {}

const c4 = <OneThing {...obj1} {...obj} />
>c4 : Element
><OneThing {...obj1} {...obj} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>obj1 : { yy: boolean; }
>obj : { yy: number; yy1: string; }

const c5 = <OneThing {...obj1} yy={42} {...{yy1: "hi"}}/>
>c5 : Element
><OneThing {...obj1} yy={42} {...{yy1: "hi"}}/> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>obj1 : { yy: boolean; }
>yy : number
>42 : 42
>{yy1: "hi"} : { yy1: string; }
>yy1 : string
>"hi" : "hi"

const c6 = <OneThing {...obj1} {...{yy: 10000, yy1: "true"}} />
>c6 : Element
><OneThing {...obj1} {...{yy: 10000, yy1: "true"}} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>obj1 : { yy: boolean; }
>{yy: 10000, yy1: "true"} : { yy: number; yy1: string; }
>yy : number
>10000 : 10000
>yy1 : string
>"true" : "true"

const c7 = <OneThing {...defaultObj} yy {...obj} />;  // No error. should pick second overload
>c7 : Element
><OneThing {...defaultObj} yy {...obj} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>defaultObj : any
>yy : true
>obj : { yy: number; yy1: string; }

const c8 = <OneThing ignore-prop={100} />
>c8 : Element
><OneThing ignore-prop={100} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>ignore-prop : number
>100 : 100

const c9 = <OneThing {...{ "ignore-prop":200 }} />;
>c9 : Element
><OneThing {...{ "ignore-prop":200 }} /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>{ "ignore-prop":200 } : { "ignore-prop": number; }
>"ignore-prop" : number
>200 : 200

const c10 = <OneThing {...obj2} yy1="boo" />;
>c10 : Element
><OneThing {...obj2} yy1="boo" /> : Element
>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
>obj2 : { yy: number; "ignore-prop": string; }
>yy1 : string

