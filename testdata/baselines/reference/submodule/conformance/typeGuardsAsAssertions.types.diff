--- old.typeGuardsAsAssertions.types
+++ new.typeGuardsAsAssertions.types
@@= skipped -101, +101 lines =@@
 >x : string | number
 >"string" : "string"
 >x.slice() : string
->x.slice : (start?: number, end?: number) => string
+>x.slice : (start?: number | undefined, end?: number | undefined) => string
 >x : string
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 >"abc" : "abc"
 
         x;  // string
@@= skipped -38, +38 lines =@@
 >x = x.slice() : string
 >x : string | number | boolean
 >x.slice() : string
->x.slice : (start?: number, end?: number) => string
+>x.slice : (start?: number | undefined, end?: number | undefined) => string
 >x : string
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
         }
         else {
             x = "abc";
@@= skipped -139, +139 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | null | undefined
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = "";
 >x = "" : ""
@@= skipped -12, +12 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = undefined;
 >x = undefined : undefined
@@= skipped -12, +12 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | null | undefined
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = null;
 >x = null : null
@@= skipped -11, +11 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | null | undefined
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = <undefined | null>undefined;
 >x = <undefined | null>undefined : null | undefined
@@= skipped -13, +13 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | null | undefined
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = <string | undefined>"";
 >x = <string | undefined>"" : string | undefined
@@= skipped -13, +13 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | undefined
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 
     x = <string | null>"";
 >x = <string | null>"" : string | null
@@= skipped -13, +13 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string | null
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 }
 
 function f7() {
@@= skipped -14, +14 lines =@@
 
     x!.slice();
 >x!.slice() : string
->x!.slice : (start?: number, end?: number) => string
+>x!.slice : (start?: number | undefined, end?: number | undefined) => string
 >x! : string
 >x : string
->slice : (start?: number, end?: number) => string
+>slice : (start?: number | undefined, end?: number | undefined) => string
 }
 
