//// [tests/cases/conformance/jsdoc/jsdocTemplateTag.ts] ////

=== forgot.js ===
/**
 * @param {T} a
 * @template T
 */
function f(a) {
>f : (a: any) => () => any
>a : any

    return () => a
>() => a : () => any
>a : any
}
let n = f(1)()
>n : any
>f(1)() : any
>f(1) : () => any
>f : (a: any) => () => any
>1 : 1

/**
 * @param {T} a
 * @template T
 * @returns {function(): T}
 */
function g(a) {
>g : (a: any) => () => any
>a : any

    return () => a
>() => a : () => any
>a : any
}
let s = g('hi')()
>s : any
>g('hi')() : any
>g('hi') : () => any
>g : (a: any) => () => any
>'hi' : "hi"

/**
 * @param {Array.<Object>} keyframes - Can't look up types on Element since it's a global in another file. (But it shouldn't crash).
 */
Element.prototype.animate = function(keyframes) {};
>Element.prototype.animate = function(keyframes) {} : (keyframes: Keyframe[] | PropertyIndexedKeyframes) => void
>Element.prototype.animate : (keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation
>Element.prototype : Element
>Element : { new (): Element; prototype: Element; }
>prototype : Element
>animate : (keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation
>function(keyframes) {} : (keyframes: Keyframe[] | PropertyIndexedKeyframes) => void
>keyframes : Keyframe[] | PropertyIndexedKeyframes

