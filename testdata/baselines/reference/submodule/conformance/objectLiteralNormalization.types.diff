--- old.objectLiteralNormalization.types
+++ new.objectLiteralNormalization.types
@@= skipped -152, +152 lines =@@
 // Before widening {} acts like { [x: string]: undefined }, which is a
 // subtype of types with all optional properties
 declare let opts: { foo?: string, bar?: string, baz?: boolean };
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >foo : string | undefined
 >bar : string | undefined
 >baz : boolean | undefined
 
 let c1 = !true ? {} : opts;
->c1 : { foo?: string; bar?: string; baz?: boolean; }
->!true ? {} : opts : { foo?: string; bar?: string; baz?: boolean; }
+>c1 : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
+>!true ? {} : opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >!true : false
 >true : true
 >{} : {}
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 
 let c2 = !true ? opts : {};
->c2 : { foo?: string; bar?: string; baz?: boolean; }
->!true ? opts : {} : { foo?: string; bar?: string; baz?: boolean; }
+>c2 : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
+>!true ? opts : {} : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >!true : false
 >true : true
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >{} : {}
 
 let c3 = !true ? { a: 0, b: 0 } : {};
