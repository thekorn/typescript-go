//// [tests/cases/conformance/directives/multiline.tsx] ////

=== a.ts ===
export const texts: string[] = [];
>texts : string[]
>[] : undefined[]

/**
 @ts-ignore */
texts.push(100);
>texts.push(100) : number
>texts.push : (...items: string[]) => number
>texts : string[]
>push : (...items: string[]) => number
>100 : 100

/**
 @ts-expect-error */
texts.push(100);
>texts.push(100) : number
>texts.push : (...items: string[]) => number
>texts : string[]
>push : (...items: string[]) => number
>100 : 100

/**
 @ts-expect-error */
texts.push("100");
>texts.push("100") : number
>texts.push : (...items: string[]) => number
>texts : string[]
>push : (...items: string[]) => number
>"100" : "100"

=== b.tsx ===
import * as React from "react";
>React : typeof __React

export function MyComponent(props: { foo: string }) {
>MyComponent : (props: { foo: string; }) => any
>props : { foo: string; }
>foo : string

  return <div />;
><div /> : any
>div : any
}

let x = (
>x : any
>(  <div>    {/*   @ts-ignore */}    <MyComponent foo={100} />    {/*@ts-ignore*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={100} />    {/*   // @ts-expect-error */}    <MyComponent foo={100} />    {/*   * @ts-expect-error */}    <MyComponent foo={100} />    {/*@ts-expect-error*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={"hooray"} />  </div>) : any

  <div>
><div>    {/*   @ts-ignore */}    <MyComponent foo={100} />    {/*@ts-ignore*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={100} />    {/*   // @ts-expect-error */}    <MyComponent foo={100} />    {/*   * @ts-expect-error */}    <MyComponent foo={100} />    {/*@ts-expect-error*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={"hooray"} />  </div> : any
>div : any

    {/*
   @ts-ignore */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*@ts-ignore*/}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*
   @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*
   // @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*
   * @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*@ts-expect-error*/}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>100 : 100

    {/*
   @ts-expect-error */}
    <MyComponent foo={"hooray"} />
><MyComponent foo={"hooray"} /> : any
>MyComponent : (props: { foo: string; }) => any
>foo : any
>"hooray" : "hooray"

  </div>
>div : any

);

