//// [tests/cases/conformance/jsx/tsxSpreadAttributesResolution2.tsx] ////

=== file.tsx ===
import React = require('react');
>React : typeof __React

interface PoisonedProp {
    x: string;
>x : string

    y: "2";
>y : "2"
}

class Poisoned extends React.Component<PoisonedProp, {}> {
>Poisoned : Poisoned
>React.Component : Component<PoisonedProp, {}>
>React : typeof __React
>Component : typeof Component

    render() {
>render : () => Element

        return <div>Hello</div>;
><div>Hello</div> : Element
>div : any
>div : any
    }
}

const obj = {};
>obj : {}
>{} : {}

// OK
<Poisoned {...{x: "ok", y: "2"}} />;
><Poisoned {...{x: "ok", y: "2"}} /> : Element
>Poisoned : typeof Poisoned
>{x: "ok", y: "2"} : { x: string; y: "2"; }
>x : string
>"ok" : "ok"
>y : "2"
>"2" : "2"

// Error
let p = <Poisoned {...obj} />;
>p : Element
><Poisoned {...obj} /> : Element
>Poisoned : typeof Poisoned
>obj : {}

let y = <Poisoned />;
>y : Element
><Poisoned /> : Element
>Poisoned : typeof Poisoned

let z = <Poisoned x y/>;
>z : Element
><Poisoned x y/> : Element
>Poisoned : typeof Poisoned
>x : true
>y : true

let w = <Poisoned {...{x: 5, y: "2"}}/>;
>w : Element
><Poisoned {...{x: 5, y: "2"}}/> : Element
>Poisoned : typeof Poisoned
>{x: 5, y: "2"} : { x: number; y: "2"; }
>x : number
>5 : 5
>y : "2"
>"2" : "2"

let w1 = <Poisoned {...{x: 5, y: "2"}} X="hi" />;
>w1 : Element
><Poisoned {...{x: 5, y: "2"}} X="hi" /> : Element
>Poisoned : typeof Poisoned
>{x: 5, y: "2"} : { x: number; y: "2"; }
>x : number
>5 : 5
>y : "2"
>"2" : "2"
>X : string

