--- old.typeGuardsObjectMethods.types
+++ new.typeGuardsObjectMethods.types
@@= skipped -14, +14 lines =@@
 >var1 : string | number
 
 var obj1 = {
->obj1 : { method(param: string | number): string | number; prop: string | number; }
->{    // Inside method    method(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string        return strOrNum;    },    get prop() {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        return strOrNum;    },    set prop(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string    }} : { method(param: string | number): string | number; prop: string | number; }
+>obj1 : { method: (param: string | number) => string | number; prop: string | number; }
+>{    // Inside method    method(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string        return strOrNum;    },    get prop() {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        return strOrNum;    },    set prop(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string    }} : { method: (param: string | number) => string | number; prop: string | number; }
 
     // Inside method
     method(param: string | number) {
@@= skipped -146, +146 lines =@@
 >typeof obj1.method(strOrNum) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >obj1.method(strOrNum) : string | number
 >obj1.method : (param: string | number) => string | number
->obj1 : { method(param: string | number): string | number; prop: string | number; }
+>obj1 : { method: (param: string | number) => string | number; prop: string | number; }
 >method : (param: string | number) => string | number
 >strOrNum : string | number
 >"string" : "string"
 >obj1.method(strOrNum) : string | number
 >obj1.method : (param: string | number) => string | number
->obj1 : { method(param: string | number): string | number; prop: string | number; }
+>obj1 : { method: (param: string | number) => string | number; prop: string | number; }
 >method : (param: string | number) => string | number
 >strOrNum : string | number
 
@@= skipped -18, +18 lines =@@
 >typeof obj1.prop === "string" : boolean
 >typeof obj1.prop : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >obj1.prop : string | number
->obj1 : { method(param: string | number): string | number; prop: string | number; }
+>obj1 : { method: (param: string | number) => string | number; prop: string | number; }
 >prop : string | number
 >"string" : "string"
 >obj1.prop : string
->obj1 : { method(param: string | number): string | number; prop: string | number; }
+>obj1 : { method: (param: string | number) => string | number; prop: string | number; }
 >prop : string
 
