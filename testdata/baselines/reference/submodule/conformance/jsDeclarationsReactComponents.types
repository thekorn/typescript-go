//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsReactComponents.ts] ////

=== jsDeclarationsReactComponents1.jsx ===
/// <reference path="react16.d.ts" preserve="true" />
import React from "react";
>React : typeof React

import PropTypes from "prop-types"
>PropTypes : typeof import("prop-types")

const TabbedShowLayout = ({
>TabbedShowLayout : { (__0: {}): Element; propTypes: { version: Requireable<number>; }; defaultProps: { tabs: undefined; }; }
>({}) => {    return (        <div />    );} : { (__0: {}): Element; propTypes: { version: Requireable<number>; }; defaultProps: { tabs: undefined; }; }

}) => {
    return (
>(        <div />    ) : Element

        <div />
><div /> : Element
>div : any

    );
};

TabbedShowLayout.propTypes = {
>TabbedShowLayout.propTypes = {    version: PropTypes.number,} : { version: Requireable<number>; }
>TabbedShowLayout.propTypes : { version: Requireable<number>; }
>TabbedShowLayout : { (__0: {}): Element; propTypes: { version: Requireable<number>; }; defaultProps: { tabs: undefined; }; }
>propTypes : { version: Requireable<number>; }
>{    version: PropTypes.number,} : { version: Requireable<number>; }

    version: PropTypes.number,
>version : Requireable<number>
>PropTypes.number : Requireable<number>
>PropTypes : typeof import("prop-types")
>number : Requireable<number>

};

TabbedShowLayout.defaultProps = {
>TabbedShowLayout.defaultProps = {    tabs: undefined} : { tabs: undefined; }
>TabbedShowLayout.defaultProps : { tabs: undefined; }
>TabbedShowLayout : { (__0: {}): Element; propTypes: { version: Requireable<number>; }; defaultProps: { tabs: undefined; }; }
>defaultProps : { tabs: undefined; }
>{    tabs: undefined} : { tabs: undefined; }

    tabs: undefined
>tabs : undefined
>undefined : undefined

};

export default TabbedShowLayout;
>TabbedShowLayout : { (__0: {}): Element; propTypes: { version: Requireable<number>; }; defaultProps: { tabs: undefined; }; }

=== jsDeclarationsReactComponents2.jsx ===
import React from "react";
>React : typeof React

/**
 * @type {React.SFC}
 */
const TabbedShowLayout = () => {
>TabbedShowLayout : SFC<{}>
>() => {    return (        <div className="" key="">            ok        </div>    );} : { (): Element; defaultProps: { tabs: string; }; }

    return (
>(        <div className="" key="">            ok        </div>    ) : Element

        <div className="" key="">
><div className="" key="">            ok        </div> : Element
>div : any
>className : string
>key : string

            ok
        </div>
>div : any

    );
};

TabbedShowLayout.defaultProps = {
>TabbedShowLayout.defaultProps = {    tabs: "default value"} : { tabs: string; }
>TabbedShowLayout.defaultProps : Partial<{}> | undefined
>TabbedShowLayout : SFC<{}>
>defaultProps : Partial<{}> | undefined
>{    tabs: "default value"} : { tabs: string; }

    tabs: "default value"
>tabs : string
>"default value" : "default value"

};

export default TabbedShowLayout;
>TabbedShowLayout : SFC<{}>

=== jsDeclarationsReactComponents3.jsx ===
import React from "react";
>React : typeof React

/**
 * @type {{defaultProps: {tabs: string}} & ((props?: {elem: string}) => JSX.Element)}
 */
const TabbedShowLayout = () => {
>TabbedShowLayout : { defaultProps: { tabs: string; }; } & ((props?: { elem: string; } | undefined) => Element)
>() => {    return (        <div className="" key="">            ok        </div>    );} : { (): Element; defaultProps: { tabs: string; }; }

    return (
>(        <div className="" key="">            ok        </div>    ) : Element

        <div className="" key="">
><div className="" key="">            ok        </div> : Element
>div : any
>className : string
>key : string

            ok
        </div>
>div : any

    );
};

TabbedShowLayout.defaultProps = {
>TabbedShowLayout.defaultProps = {    tabs: "default value"} : { tabs: string; }
>TabbedShowLayout.defaultProps : { tabs: string; }
>TabbedShowLayout : { defaultProps: { tabs: string; }; } & ((props?: { elem: string; } | undefined) => Element)
>defaultProps : { tabs: string; }
>{    tabs: "default value"} : { tabs: string; }

    tabs: "default value"
>tabs : string
>"default value" : "default value"

};

export default TabbedShowLayout;
>TabbedShowLayout : { defaultProps: { tabs: string; }; } & ((props?: { elem: string; } | undefined) => Element)

=== jsDeclarationsReactComponents4.jsx ===
import React from "react";
>React : typeof React

const TabbedShowLayout = (/** @type {{className: string}}*/prop) => {
>TabbedShowLayout : { (prop: any): Element; defaultProps: { tabs: string; }; }
>(/** @type {{className: string}}*/prop) => {    return (        <div className={prop.className} key="">            ok        </div>    );} : { (prop: any): Element; defaultProps: { tabs: string; }; }
>prop : any

    return (
>(        <div className={prop.className} key="">            ok        </div>    ) : Element

        <div className={prop.className} key="">
><div className={prop.className} key="">            ok        </div> : Element
>div : any
>className : any
>prop.className : any
>prop : any
>className : any
>key : string

            ok
        </div>
>div : any

    );
};

TabbedShowLayout.defaultProps = {
>TabbedShowLayout.defaultProps = {    tabs: "default value"} : { tabs: string; }
>TabbedShowLayout.defaultProps : { tabs: string; }
>TabbedShowLayout : { (prop: any): Element; defaultProps: { tabs: string; }; }
>defaultProps : { tabs: string; }
>{    tabs: "default value"} : { tabs: string; }

    tabs: "default value"
>tabs : string
>"default value" : "default value"

};

export default TabbedShowLayout;
>TabbedShowLayout : { (prop: any): Element; defaultProps: { tabs: string; }; }

=== jsDeclarationsReactComponents5.jsx ===
import React from 'react';
>React : typeof React

import PropTypes from 'prop-types';
>PropTypes : typeof import("prop-types")

function Tree({ allowDropOnRoot }) {
>Tree : { (__0: { allowDropOnRoot: any; }): Element; propTypes: { classes: Requireable<object>; }; defaultProps: { classes: {}; parentSource: string; }; }
>allowDropOnRoot : any

  return <div />
><div /> : Element
>div : any
}

Tree.propTypes = {
>Tree.propTypes = {    classes: PropTypes.object,} : { classes: Requireable<object>; }
>Tree.propTypes : { classes: Requireable<object>; }
>Tree : { (__0: { allowDropOnRoot: any; }): Element; propTypes: { classes: Requireable<object>; }; defaultProps: { classes: {}; parentSource: string; }; }
>propTypes : { classes: Requireable<object>; }
>{    classes: PropTypes.object,} : { classes: Requireable<object>; }

    classes: PropTypes.object,
>classes : Requireable<object>
>PropTypes.object : Requireable<object>
>PropTypes : typeof import("prop-types")
>object : Requireable<object>

};

Tree.defaultProps = {
>Tree.defaultProps = {    classes: {},    parentSource: 'parent_id',} : { classes: {}; parentSource: string; }
>Tree.defaultProps : { classes: {}; parentSource: string; }
>Tree : { (__0: { allowDropOnRoot: any; }): Element; propTypes: { classes: Requireable<object>; }; defaultProps: { classes: {}; parentSource: string; }; }
>defaultProps : { classes: {}; parentSource: string; }
>{    classes: {},    parentSource: 'parent_id',} : { classes: {}; parentSource: string; }

    classes: {},
>classes : {}
>{} : {}

    parentSource: 'parent_id',
>parentSource : string
>'parent_id' : "parent_id"

};

export default Tree;
>Tree : { (__0: { allowDropOnRoot: any; }): Element; propTypes: { classes: Requireable<object>; }; defaultProps: { classes: {}; parentSource: string; }; }

