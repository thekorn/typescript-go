--- old.controlFlowGenericTypes.symbols
+++ new.controlFlowGenericTypes.symbols
@@= skipped -18, +18 lines =@@
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 0, 42))
 
         x.length;
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 0, 42))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return x;
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 0, 42))
@@= skipped -13, +13 lines =@@
 >a : Symbol(a, Decl(controlFlowGenericTypes.ts, 0, 52))
 
         y.a.length;
->y.a.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>y.a.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >y.a : Symbol(a, Decl(controlFlowGenericTypes.ts, 0, 52))
 >y : Symbol(y, Decl(controlFlowGenericTypes.ts, 0, 47))
 >a : Symbol(a, Decl(controlFlowGenericTypes.ts, 0, 52))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return y.a;
 >y.a : Symbol(a, Decl(controlFlowGenericTypes.ts, 0, 52))
@@= skipped -16, +16 lines =@@
 >0 : Symbol(0)
 
         z[0].length;
->z[0].length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>z[0].length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >z : Symbol(z, Decl(controlFlowGenericTypes.ts, 0, 60))
 >0 : Symbol(0)
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return z[0];
 >z : Symbol(z, Decl(controlFlowGenericTypes.ts, 0, 60))
@@= skipped -26, +26 lines =@@
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 17, 15))
 
         x.length;
->x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 17, 15))
->length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return x;
 >x : Symbol(x, Decl(controlFlowGenericTypes.ts, 17, 15))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(controlFlowGenericTypes.ts, 26, 14))
 
     item: T;
->item : Symbol(Box.item, Decl(controlFlowGenericTypes.ts, 26, 18))
+>item : Symbol(item, Decl(controlFlowGenericTypes.ts, 26, 18))
 >T : Symbol(T, Decl(controlFlowGenericTypes.ts, 26, 14))
 }
 
@@= skipped -253, +253 lines =@@
 >A : Symbol(A, Decl(controlFlowGenericTypes.ts, 114, 1))
 
     a: number | null;
->a : Symbol(A.a, Decl(controlFlowGenericTypes.ts, 118, 13))
+>a : Symbol(a, Decl(controlFlowGenericTypes.ts, 118, 13))
 
 };
 
@@= skipped -34, +34 lines =@@
 >ET : Symbol(ET, Decl(controlFlowGenericTypes.ts, 132, 19))
 
     off<K extends keyof ET>(...args: [K, number] | [unknown, string]):void {}
->off : Symbol(EventEmitter.off, Decl(controlFlowGenericTypes.ts, 132, 24))
+>off : Symbol(off, Decl(controlFlowGenericTypes.ts, 132, 24))
 >K : Symbol(K, Decl(controlFlowGenericTypes.ts, 133, 8))
 >ET : Symbol(ET, Decl(controlFlowGenericTypes.ts, 132, 19))
 >args : Symbol(args, Decl(controlFlowGenericTypes.ts, 133, 28))
@@= skipped -18, +18 lines =@@
 >ET : Symbol(ET, Decl(controlFlowGenericTypes.ts, 135, 14))
 
     emittingObject.off(eventName, 0);
->emittingObject.off : Symbol(EventEmitter.off, Decl(controlFlowGenericTypes.ts, 132, 24))
+>emittingObject.off : Symbol(off, Decl(controlFlowGenericTypes.ts, 132, 24))
 >emittingObject : Symbol(emittingObject, Decl(controlFlowGenericTypes.ts, 135, 46))
->off : Symbol(EventEmitter.off, Decl(controlFlowGenericTypes.ts, 132, 24))
+>off : Symbol(off, Decl(controlFlowGenericTypes.ts, 132, 24))
 >eventName : Symbol(eventName, Decl(controlFlowGenericTypes.ts, 135, 64))
 
     emittingObject.off(eventName as typeof eventName, 0);
->emittingObject.off : Symbol(EventEmitter.off, Decl(controlFlowGenericTypes.ts, 132, 24))
+>emittingObject.off : Symbol(off, Decl(controlFlowGenericTypes.ts, 132, 24))
 >emittingObject : Symbol(emittingObject, Decl(controlFlowGenericTypes.ts, 135, 46))
->off : Symbol(EventEmitter.off, Decl(controlFlowGenericTypes.ts, 132, 24))
+>off : Symbol(off, Decl(controlFlowGenericTypes.ts, 132, 24))
 >eventName : Symbol(eventName, Decl(controlFlowGenericTypes.ts, 135, 64))
 >eventName : Symbol(eventName, Decl(controlFlowGenericTypes.ts, 135, 64))
 }
@@= skipped -103, +103 lines =@@
 >PublicSpec : Symbol(PublicSpec, Decl(controlFlowGenericTypes.ts, 161, 20))
 
     m() {
->m : Symbol(TableBaseEnum.m, Decl(controlFlowGenericTypes.ts, 163, 82))
+>m : Symbol(m, Decl(controlFlowGenericTypes.ts, 163, 82))
 
         let iSpec = null! as InternalSpec;
 >iSpec : Symbol(iSpec, Decl(controlFlowGenericTypes.ts, 165, 11))
@@= skipped -59, +59 lines =@@
 >T : Symbol(T, Decl(controlFlowGenericTypes.ts, 184, 15))
 
     protected validateRow(_row: Partial<SqlInsertSet<T>>): void {
->validateRow : Symbol(SqlTable.validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
+>validateRow : Symbol(validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
 >_row : Symbol(_row, Decl(controlFlowGenericTypes.ts, 185, 26))
 >Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
 >SqlInsertSet : Symbol(SqlInsertSet, Decl(controlFlowGenericTypes.ts, 180, 1))
 >T : Symbol(T, Decl(controlFlowGenericTypes.ts, 184, 15))
     }
     public insertRow(row: SqlInsertSet<T>) {
->insertRow : Symbol(SqlTable.insertRow, Decl(controlFlowGenericTypes.ts, 186, 5))
+>insertRow : Symbol(insertRow, Decl(controlFlowGenericTypes.ts, 186, 5))
 >row : Symbol(row, Decl(controlFlowGenericTypes.ts, 187, 21))
 >SqlInsertSet : Symbol(SqlInsertSet, Decl(controlFlowGenericTypes.ts, 180, 1))
 >T : Symbol(T, Decl(controlFlowGenericTypes.ts, 184, 15))
 
         this.validateRow(row);
->this.validateRow : Symbol(SqlTable.validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
+>this.validateRow : Symbol(validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
 >this : Symbol(SqlTable, Decl(controlFlowGenericTypes.ts, 182, 82))
->validateRow : Symbol(SqlTable.validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
+>validateRow : Symbol(validateRow, Decl(controlFlowGenericTypes.ts, 184, 19))
 >row : Symbol(row, Decl(controlFlowGenericTypes.ts, 187, 21))
     }
 }
@@= skipped -26, +26 lines =@@
 >Button : Symbol(Button, Decl(controlFlowGenericTypes.ts, 190, 1))
 
     type: "button";
->type : Symbol(Button.type, Decl(controlFlowGenericTypes.ts, 194, 18))
+>type : Symbol(type, Decl(controlFlowGenericTypes.ts, 194, 18))
 
     text: string;
->text : Symbol(Button.text, Decl(controlFlowGenericTypes.ts, 195, 19))
+>text : Symbol(text, Decl(controlFlowGenericTypes.ts, 195, 19))
 }
 
 interface Checkbox {
 >Checkbox : Symbol(Checkbox, Decl(controlFlowGenericTypes.ts, 197, 1))
 
     type: "checkbox";
->type : Symbol(Checkbox.type, Decl(controlFlowGenericTypes.ts, 199, 20))
+>type : Symbol(type, Decl(controlFlowGenericTypes.ts, 199, 20))
 
     isChecked: boolean;
->isChecked : Symbol(Checkbox.isChecked, Decl(controlFlowGenericTypes.ts, 200, 21))
+>isChecked : Symbol(isChecked, Decl(controlFlowGenericTypes.ts, 200, 21))
 }
 
 type Control = Button | Checkbox;
