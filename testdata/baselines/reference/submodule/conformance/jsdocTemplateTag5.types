//// [tests/cases/conformance/jsdoc/jsdocTemplateTag5.ts] ////

=== a.js ===
/**
 * Should work for function declarations
 * @constructor
 * @template {string} K
 * @template V
 */
function Multimap() {
>Multimap : { (): void; prototype: { get: (key: any) => any; }; }

    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
    this._map = {};
>this._map = {} : {}
>this._map : any
>this : any
>_map : any
>{} : {}

};

Multimap.prototype = {
>Multimap.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }
>Multimap.prototype : { get: (key: any) => any; }
>Multimap : { (): void; prototype: { get: (key: any) => any; }; }
>prototype : { get: (key: any) => any; }
>{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }

    /**
     * @param {K} key the key ok
     * @returns {V} the value ok
     */
    get(key) {
>get : (key: any) => any
>key : any

        return this._map[key + ''];
>this._map[key + ''] : any
>this._map : any
>this : { get: (key: any) => any; }
>_map : any
>key + '' : string
>key : any
>'' : ""
    }
}

/**
 * Should work for initialisers too
 * @constructor
 * @template {string} K
 * @template V
 */
var Multimap2 = function() {
>Multimap2 : () => void
>function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : () => void

    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
    this._map = {};
>this._map = {} : {}
>this._map : any
>this : any
>_map : any
>{} : {}

};

Multimap2.prototype = {
>Multimap2.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get: function(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }
>Multimap2.prototype : any
>Multimap2 : () => void
>prototype : any
>{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get: function(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }

    /**
     * @param {K} key the key ok
     * @returns {V} the value ok
     */
    get: function(key) {
>get : (key: any) => any
>function(key) {        return this._map[key + ''];    } : (key: any) => any
>key : any

        return this._map[key + ''];
>this._map[key + ''] : any
>this._map : any
>this : any
>_map : any
>key + '' : string
>key : any
>'' : ""
    }
}

var Ns = {};
>Ns : {}
>{} : {}

/**
 * Should work for expando-namespaced initialisers too
 * @constructor
 * @template {string} K
 * @template V
 */
Ns.Multimap3 = function() {
>Ns.Multimap3 = function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : () => void
>Ns.Multimap3 : any
>Ns : {}
>Multimap3 : any
>function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : () => void

    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
    this._map = {};
>this._map = {} : {}
>this._map : any
>this : {}
>_map : any
>{} : {}

};

Ns.Multimap3.prototype = {
>Ns.Multimap3.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }
>Ns.Multimap3.prototype : any
>Ns.Multimap3 : any
>Ns : {}
>Multimap3 : any
>prototype : any
>{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get: (key: any) => any; }

    /**
     * @param {K} key the key ok
     * @returns {V} the value ok
     */
    get(key) {
>get : (key: any) => any
>key : any

        return this._map[key + ''];
>this._map[key + ''] : any
>this._map : any
>this : any
>_map : any
>key + '' : string
>key : any
>'' : ""
    }
}


