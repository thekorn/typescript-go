//// [tests/cases/conformance/jsdoc/jsdocParamTag2.ts] ////

=== 0.js ===
// Object literal syntax
/**
 * @param {{a: string, b: string}} obj
 * @param {string} x
 */
function good1({a, b}, x) {}
>good1 : (__0: { a: any; b: any; }, x: any) => void
>a : any
>b : any
>x : any

/**
 * @param {{a: string, b: string}} obj
 * @param {{c: number, d: number}} OBJECTION
 */
function good2({a, b}, {c, d}) {}
>good2 : (__0: { a: any; b: any; }, __1: { c: any; d: any; }) => void
>a : any
>b : any
>c : any
>d : any

/**
 * @param {number} x
 * @param {{a: string, b: string}} obj
 * @param {string} y
 */
function good3(x, {a, b}, y) {}
>good3 : (x: any, __1: { a: any; b: any; }, y: any) => void
>x : any
>a : any
>b : any
>y : any

/**
 * @param {{a: string, b: string}} obj
 */
function good4({a, b}) {}
>good4 : (__0: { a: any; b: any; }) => void
>a : any
>b : any

// nested object syntax
/**
 * @param {Object} obj
 * @param {string} obj.a - this is like the saddest way to specify a type
 * @param {string} obj.b - but it sure does allow a lot of documentation
 * @param {string} x
 */
function good5({a, b}, x) {}
>good5 : (__0: { a: any; b: any; }, x: any) => void
>a : any
>b : any
>x : any

/**
 * @param {Object} obj
 * @param {string} obj.a
 * @param {string} obj.b - but it sure does allow a lot of documentation
 * @param {Object} OBJECTION - documentation here too
 * @param {string} OBJECTION.c
 * @param {string} OBJECTION.d - meh
 */
function good6({a, b}, {c, d}) {}
>good6 : (__0: { a: any; b: any; }, __1: { c: any; d: any; }) => void
>a : any
>b : any
>c : any
>d : any

/**
 * @param {number} x
 * @param {Object} obj
 * @param {string} obj.a
 * @param {string} obj.b
 * @param {string} y
 */
function good7(x, {a, b}, y) {}
>good7 : (x: any, __1: { a: any; b: any; }, y: any) => void
>x : any
>a : any
>b : any
>y : any

/**
 * @param {Object} obj
 * @param {string} obj.a
 * @param {string} obj.b
 */
function good8({a, b}) {}
>good8 : (__0: { a: any; b: any; }) => void
>a : any
>b : any

/**
 * @param {{ a: string }} argument
 */
function good9({ a }) {
>good9 : (__0: { a: any; }) => void
>a : any

    console.log(arguments, a);
>console.log(arguments, a) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>arguments : IArguments
>a : any
}

/**
 * @param {object} obj - this type gets ignored
 * @param {string} obj.a
 * @param {string} obj.b - and x's type gets used for both parameters
 * @param {string} x
 */
function bad1(x, {a, b}) {}
>bad1 : (x: any, __1: { a: any; b: any; }) => void
>x : any
>a : any
>b : any

/**
 * @param {string} y - here, y's type gets ignored but obj's is fine
 * @param {{a: string, b: string}} obj
 */
function bad2(x, {a, b}) {}
>bad2 : (x: any, __1: { a: any; b: any; }) => void
>x : any
>a : any
>b : any

