//// [tests/cases/conformance/jsdoc/jsdocTypeTagCast.ts] ////

=== a.ts ===
var W: string;
>W : string

=== b.js ===
// @ts-check
var W = /** @type {string} */(/** @type {*} */ (4));
>W : string
>(/** @type {*} */ (4)) : 4
>(4) : 4
>4 : 4

var W = /** @type {string} */(4); // Error
>W : string
>(4) : 4
>4 : 4

/** @type {*} */
var a;
>a : any

/** @type {string} */
var s;
>s : any

var a = /** @type {*} */("" + 4);
>a : any
>("" + 4) : string
>"" + 4 : string
>"" : ""
>4 : 4

var s = "" + /** @type {*} */(4);
>s : any
>"" + /** @type {*} */(4) : string
>"" : ""
>(4) : 4
>4 : 4

class SomeBase {
>SomeBase : SomeBase

    constructor() {
        this.p = 42;
>this.p = 42 : 42
>this.p : any
>this : this
>p : any
>42 : 42
    }
}
class SomeDerived extends SomeBase {
>SomeDerived : SomeDerived
>SomeBase : SomeBase

    constructor() {
        super();
>super() : void
>super : typeof SomeBase

        this.x = 42;
>this.x = 42 : 42
>this.x : any
>this : this
>x : any
>42 : 42
    }
}
class SomeOther {
>SomeOther : SomeOther

    constructor() {
        this.q = 42;
>this.q = 42 : 42
>this.q : any
>this : this
>q : any
>42 : 42
    }
}

function SomeFakeClass() {
>SomeFakeClass : () => void

    /** @type {string|number} */
    this.p = "bar";
>this.p = "bar" : "bar"
>this.p : any
>this : any
>p : any
>"bar" : "bar"
}

// Type assertion should check for assignability in either direction
var someBase = new SomeBase();
>someBase : SomeBase
>new SomeBase() : SomeBase
>SomeBase : typeof SomeBase

var someDerived = new SomeDerived();
>someDerived : SomeDerived
>new SomeDerived() : SomeDerived
>SomeDerived : typeof SomeDerived

var someOther = new SomeOther();
>someOther : SomeOther
>new SomeOther() : SomeOther
>SomeOther : typeof SomeOther

var someFakeClass = new SomeFakeClass();
>someFakeClass : any
>new SomeFakeClass() : any
>SomeFakeClass : () => void

someBase = /** @type {SomeBase} */(someDerived);
>someBase = /** @type {SomeBase} */(someDerived) : SomeDerived
>someBase : SomeBase
>(someDerived) : SomeDerived
>someDerived : SomeDerived

someBase = /** @type {SomeBase} */(someBase);
>someBase = /** @type {SomeBase} */(someBase) : SomeBase
>someBase : SomeBase
>(someBase) : SomeBase
>someBase : SomeBase

someBase = /** @type {SomeBase} */(someOther); // Error
>someBase = /** @type {SomeBase} */(someOther) : SomeOther
>someBase : SomeBase
>(someOther) : SomeOther
>someOther : SomeOther

someDerived = /** @type {SomeDerived} */(someDerived);
>someDerived = /** @type {SomeDerived} */(someDerived) : SomeDerived
>someDerived : SomeDerived
>(someDerived) : SomeDerived
>someDerived : SomeDerived

someDerived = /** @type {SomeDerived} */(someBase);
>someDerived = /** @type {SomeDerived} */(someBase) : SomeBase
>someDerived : SomeDerived
>(someBase) : SomeBase
>someBase : SomeBase

someDerived = /** @type {SomeDerived} */(someOther); // Error
>someDerived = /** @type {SomeDerived} */(someOther) : SomeOther
>someDerived : SomeDerived
>(someOther) : SomeOther
>someOther : SomeOther

someOther = /** @type {SomeOther} */(someDerived); // Error
>someOther = /** @type {SomeOther} */(someDerived) : SomeDerived
>someOther : SomeOther
>(someDerived) : SomeDerived
>someDerived : SomeDerived

someOther = /** @type {SomeOther} */(someBase); // Error
>someOther = /** @type {SomeOther} */(someBase) : SomeBase
>someOther : SomeOther
>(someBase) : SomeBase
>someBase : SomeBase

someOther = /** @type {SomeOther} */(someOther);
>someOther = /** @type {SomeOther} */(someOther) : SomeOther
>someOther : SomeOther
>(someOther) : SomeOther
>someOther : SomeOther

someFakeClass = someBase;
>someFakeClass = someBase : SomeBase
>someFakeClass : any
>someBase : SomeBase

someFakeClass = someDerived;
>someFakeClass = someDerived : SomeDerived
>someFakeClass : any
>someDerived : SomeDerived

someBase = someFakeClass; // Error
>someBase = someFakeClass : any
>someBase : SomeBase
>someFakeClass : any

someBase = /** @type {SomeBase} */(someFakeClass);
>someBase = /** @type {SomeBase} */(someFakeClass) : any
>someBase : SomeBase
>(someFakeClass) : any
>someFakeClass : any

// Type assertion cannot be a type-predicate type
/** @type {number | string} */
var numOrStr;
>numOrStr : any

/** @type {string} */
var str;
>str : any

if(/** @type {numOrStr is string} */(numOrStr === undefined)) { // Error
>(numOrStr === undefined) : boolean
>numOrStr === undefined : boolean
>numOrStr : any
>undefined : undefined

	str = numOrStr; // Error, no narrowing occurred
>str = numOrStr : any
>str : any
>numOrStr : any
}


var asConst1 = /** @type {const} */(1);
>asConst1 : number
>(1) : 1
>1 : 1

var asConst2 = /** @type {const} */({
>asConst2 : { x: number; }
>({    x: 1}) : { x: number; }
>{    x: 1} : { x: number; }

    x: 1
>x : number
>1 : 1

});
