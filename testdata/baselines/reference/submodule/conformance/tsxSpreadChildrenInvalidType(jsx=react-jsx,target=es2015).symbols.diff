--- old.tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es2015).symbols
+++ new.tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es2015).symbols
@@= skipped -20, +20 lines =@@
 >TodoProp : Symbol(TodoProp, Decl(tsxSpreadChildrenInvalidType.tsx, 6, 23))
 
     id: number;
->id : Symbol(TodoProp.id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
+>id : Symbol(id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
 
     todo: string;
->todo : Symbol(TodoProp.todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
+>todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
 }
 interface TodoListProps {
 >TodoListProps : Symbol(TodoListProps, Decl(tsxSpreadChildrenInvalidType.tsx, 11, 1))
 
     todos: TodoProp[];
->todos : Symbol(TodoListProps.todos, Decl(tsxSpreadChildrenInvalidType.tsx, 12, 25))
+>todos : Symbol(todos, Decl(tsxSpreadChildrenInvalidType.tsx, 12, 25))
 >TodoProp : Symbol(TodoProp, Decl(tsxSpreadChildrenInvalidType.tsx, 6, 23))
 }
 function Todo(prop: { key: number, todo: string }) {
@@= skipped -19, +19 lines =@@
 >todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 34))
 
     return <div>{prop.key.toString() + prop.todo}</div>;
->prop.key.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
+>prop.key.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >prop.key : Symbol(key, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 21))
 >prop : Symbol(prop, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 14))
 >key : Symbol(key, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 21))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >prop.todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 34))
 >prop : Symbol(prop, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 14))
 >todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 15, 34))
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
 }
 function TodoList({ todos }: TodoListProps) {
 >TodoList : Symbol(TodoList, Decl(tsxSpreadChildrenInvalidType.tsx, 17, 1))
@@= skipped -15, +17 lines =@@
 >TodoListProps : Symbol(TodoListProps, Decl(tsxSpreadChildrenInvalidType.tsx, 11, 1))
 
     return <div>
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
+
         {...<Todo key={todos[0].id} todo={todos[0].todo} />}
 >Todo : Symbol(Todo, Decl(tsxSpreadChildrenInvalidType.tsx, 14, 1))
 >key : Symbol(key, Decl(tsxSpreadChildrenInvalidType.tsx, 20, 17))
->todos[0].id : Symbol(TodoProp.id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
+>todos[0].id : Symbol(id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
 >todos : Symbol(todos, Decl(tsxSpreadChildrenInvalidType.tsx, 18, 19))
->id : Symbol(TodoProp.id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
+>id : Symbol(id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
 >todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 20, 35))
->todos[0].todo : Symbol(TodoProp.todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
+>todos[0].todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
 >todos : Symbol(todos, Decl(tsxSpreadChildrenInvalidType.tsx, 18, 19))
->todo : Symbol(TodoProp.todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
+>todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
 
     </div>;
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
 }
 function TodoListNoError({ todos }: TodoListProps) {
 >TodoListNoError : Symbol(TodoListNoError, Decl(tsxSpreadChildrenInvalidType.tsx, 22, 1))
@@= skipped -20, +23 lines =@@
 
     // any is not checked
     return <div>
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
+
         {...(<Todo key={todos[0].id} todo={todos[0].todo} /> as any)}
 >Todo : Symbol(Todo, Decl(tsxSpreadChildrenInvalidType.tsx, 14, 1))
 >key : Symbol(key, Decl(tsxSpreadChildrenInvalidType.tsx, 26, 18))
->todos[0].id : Symbol(TodoProp.id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
+>todos[0].id : Symbol(id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
 >todos : Symbol(todos, Decl(tsxSpreadChildrenInvalidType.tsx, 23, 26))
->id : Symbol(TodoProp.id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
+>id : Symbol(id, Decl(tsxSpreadChildrenInvalidType.tsx, 8, 20))
 >todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 26, 36))
->todos[0].todo : Symbol(TodoProp.todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
+>todos[0].todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
 >todos : Symbol(todos, Decl(tsxSpreadChildrenInvalidType.tsx, 23, 26))
->todo : Symbol(TodoProp.todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
+>todo : Symbol(todo, Decl(tsxSpreadChildrenInvalidType.tsx, 9, 15))
 
     </div>;
+>div : Symbol((Missing), Decl(tsxSpreadChildrenInvalidType.tsx, 2, 30))
 }
 let x: TodoListProps;
 >x : Symbol(x, Decl(tsxSpreadChildrenInvalidType.tsx, 29, 3))
