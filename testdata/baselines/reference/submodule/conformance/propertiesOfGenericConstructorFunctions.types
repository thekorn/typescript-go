//// [tests/cases/conformance/salsa/propertiesOfGenericConstructorFunctions.ts] ////

=== propertiesOfGenericConstructorFunctions.js ===
/**
 * @template {string} K
 * @template V
 * @param {string} ik
 * @param {V} iv
 */
function Multimap(ik, iv) {
>Multimap : (ik: any, iv: any) => void
>ik : any
>iv : any

    /** @type {{ [s: string]: V }} */
    this._map = {};
>this._map = {} : {}
>this._map : any
>this : any
>_map : any
>{} : {}

    // without type annotation
    this._map2 = { [ik]: iv };
>this._map2 = { [ik]: iv } : { [x: number]: any; }
>this._map2 : any
>this : any
>_map2 : any
>{ [ik]: iv } : { [x: number]: any; }
>[ik] : any
>ik : any
>iv : any

};

/** @type {Multimap<"a" | "b", number>} with type annotation */
const map = new Multimap("a", 1);
>map : any
>new Multimap("a", 1) : any
>Multimap : (ik: any, iv: any) => void
>"a" : "a"
>1 : 1

// without type annotation
const map2 = new Multimap("m", 2);
>map2 : any
>new Multimap("m", 2) : any
>Multimap : (ik: any, iv: any) => void
>"m" : "m"
>2 : 2

/** @type {number} */
var n = map._map['hi']
>n : any
>map._map['hi'] : any
>map._map : any
>map : any
>_map : any
>'hi' : "hi"

/** @type {number} */
var n = map._map2['hi']
>n : any
>map._map2['hi'] : any
>map._map2 : any
>map : any
>_map2 : any
>'hi' : "hi"

/** @type {number} */
var n = map2._map['hi']
>n : any
>map2._map['hi'] : any
>map2._map : any
>map2 : any
>_map : any
>'hi' : "hi"

/** @type {number} */
var n = map._map2['hi']
>n : any
>map._map2['hi'] : any
>map._map2 : any
>map : any
>_map2 : any
>'hi' : "hi"

/**
 * @class
 * @template T
 * @param {T} t
 */
function Cp(t) {
>Cp : { (t: any): void; prototype: { m1: () => any; m2: () => any; }; }
>t : any

    this.x = 1
>this.x = 1 : 1
>this.x : any
>this : any
>x : any
>1 : 1

    this.y = t
>this.y = t : any
>this.y : any
>this : any
>y : any
>t : any
}
Cp.prototype = {
>Cp.prototype = {    m1() { return this.x },    m2() { this.z = this.x + 1; return this.y }} : { m1: () => any; m2: () => any; }
>Cp.prototype : { m1: () => any; m2: () => any; }
>Cp : { (t: any): void; prototype: { m1: () => any; m2: () => any; }; }
>prototype : { m1: () => any; m2: () => any; }
>{    m1() { return this.x },    m2() { this.z = this.x + 1; return this.y }} : { m1: () => any; m2: () => any; }

    m1() { return this.x },
>m1 : () => any
>this.x : any
>this : any
>x : any

    m2() { this.z = this.x + 1; return this.y }
>m2 : () => any
>this.z = this.x + 1 : any
>this.z : any
>this : any
>z : any
>this.x + 1 : any
>this.x : any
>this : any
>x : any
>1 : 1
>this.y : any
>this : any
>y : any
}
var cp = new Cp(1)
>cp : any
>new Cp(1) : any
>Cp : { (t: any): void; prototype: { m1: () => any; m2: () => any; }; }
>1 : 1

/** @type {number} */
var n = cp.x
>n : any
>cp.x : any
>cp : any
>x : any

/** @type {number} */
var n = cp.y
>n : any
>cp.y : any
>cp : any
>y : any

/** @type {number} */
var n = cp.m1()
>n : any
>cp.m1() : any
>cp.m1 : any
>cp : any
>m1 : any

/** @type {number} */
var n = cp.m2()
>n : any
>cp.m2() : any
>cp.m2 : any
>cp : any
>m2 : any


