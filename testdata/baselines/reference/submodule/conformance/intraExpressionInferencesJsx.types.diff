--- old.intraExpressionInferencesJsx.types
+++ new.intraExpressionInferencesJsx.types
@@= skipped -66, +66 lines =@@
 };
 
 const Component = <T extends Animations>({
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
-><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => Element
+><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>(__0: AnimatedViewProps<T>) => Element
 
   animations,
 >animations : T
@@= skipped -10, +10 lines =@@
 >style : (animationsValues: StyleParam<T>) => string
 
 }: AnimatedViewProps<T>) => <></>;
-><></> : JSX.Element
+><></> : Element
 
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,    },  }}  style={(anim) => {    return "";  }}/> : Element
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => Element
 
   animations={{
 >animations : { test: { kind: "a"; value: number; a: true; }; }
@@= skipped -39, +39 lines =@@
   }}
 />;
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : Element
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => Element
 
   animations={{
->animations : { test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }
->{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  } : { test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }
+>animations : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
+>{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  } : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
 
     test: {
->test : { kind: "a"; value: number; a: true; func(): { a: true; }; }
->{      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    } : { kind: "a"; value: number; a: true; func(): { a: true; }; }
+>test : { kind: "a"; value: number; a: true; func: () => { a: true; }; }
+>{      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    } : { kind: "a"; value: number; a: true; func: () => { a: true; }; }
 
       kind: "a",
 >kind : "a"
@@= skipped -38, +38 lines =@@
     },
   }}
   style={(anim) => {
->style : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>) => string
->(anim) => {    return "";  } : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>) => string
->anim : StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>
+>style : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>) => string
+>(anim) => {    return "";  } : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>) => string
+>anim : StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>
 
     return "";
 >"" : ""
@@= skipped -10, +10 lines =@@
   }}
 />;
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : Element
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => Element
 
   animations={{
 >animations : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
@@= skipped -62, +62 lines =@@
 }
 
 function Foo<T>(props: Props<T>) {
->Foo : <T>(props: Props<T>) => JSX.Element
+>Foo : <T>(props: Props<T>) => Element
 >props : Props<T>
 
   return <div />;
-><div /> : JSX.Element
+><div /> : Element
 >div : any
 }
 
 <Foo
-><Foo  a={() => 10}  b={(arg) => { arg.toString(); }}/> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
+><Foo  a={() => 10}  b={(arg) => { arg.toString(); }}/> : Element
+>Foo : <T>(props: Props<T>) => Element
 
   a={() => 10}
 >a : () => number
@@= skipped -22, +22 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 />;
 
 <Foo
-><Foo  a={(x) => 10}  b={(arg) => { arg.toString(); }}/> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
+><Foo  a={(x) => 10}  b={(arg) => { arg.toString(); }}/> : Element
+>Foo : <T>(props: Props<T>) => Element
 
   a={(x) => 10}
 >a : (x: string) => number
@@= skipped -21, +21 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 />;
 
 <Foo {...{
-><Foo {...{  a: (x) => 10,  b: (arg) => { arg.toString(); },}} /> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
+><Foo {...{  a: (x) => 10,  b: (arg) => { arg.toString(); },}} /> : Element
+>Foo : <T>(props: Props<T>) => Element
 >{  a: (x) => 10,  b: (arg) => { arg.toString(); },} : { a: (x: string) => number; b: (arg: number) => void; }
 
   a: (x) => 10,
@@= skipped -22, +22 lines =@@
 >(arg) => { arg.toString(); } : (arg: number) => void
 >arg : number
 >arg.toString() : string
->arg.toString : (radix?: number) => string
+>arg.toString : (radix?: number | undefined) => string
 >arg : number
->toString : (radix?: number) => string
+>toString : (radix?: number | undefined) => string
 
 }} />;
 
