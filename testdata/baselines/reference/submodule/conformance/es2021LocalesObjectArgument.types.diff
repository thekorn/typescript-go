--- old.es2021LocalesObjectArgument.types
+++ new.es2021LocalesObjectArgument.types
@@= skipped -1, +1 lines =@@
 
 === es2021LocalesObjectArgument.ts ===
 const enUS = new Intl.Locale("en-US");
->enUS : Intl.Locale
->new Intl.Locale("en-US") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>enUS : Locale
+>new Intl.Locale("en-US") : Locale
+>Intl.Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >"en-US" : "en-US"
 
 const deDE = new Intl.Locale("de-DE");
->deDE : Intl.Locale
->new Intl.Locale("de-DE") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>deDE : Locale
+>new Intl.Locale("de-DE") : Locale
+>Intl.Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >"de-DE" : "de-DE"
 
 const jaJP = new Intl.Locale("ja-JP");
->jaJP : Intl.Locale
->new Intl.Locale("ja-JP") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>jaJP : Locale
+>new Intl.Locale("ja-JP") : Locale
+>Intl.Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Locale, options?: LocaleOptions) => Locale
 >"ja-JP" : "ja-JP"
 
 new Intl.ListFormat(enUS);
->new Intl.ListFormat(enUS) : Intl.ListFormat
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>new Intl.ListFormat(enUS) : ListFormat
+>Intl.ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->enUS : Intl.Locale
+>ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
+>enUS : Locale
 
 new Intl.ListFormat([deDE, jaJP]);
->new Intl.ListFormat([deDE, jaJP]) : Intl.ListFormat
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>new Intl.ListFormat([deDE, jaJP]) : ListFormat
+>Intl.ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->[deDE, jaJP] : Intl.Locale[]
->deDE : Intl.Locale
->jaJP : Intl.Locale
+>ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
+>[deDE, jaJP] : Locale[]
+>deDE : Locale
+>jaJP : Locale
 
 Intl.ListFormat.supportedLocalesOf(enUS);
 >Intl.ListFormat.supportedLocalesOf(enUS) : string[]
->Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat.supportedLocalesOf : (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]
+>Intl.ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->enUS : Intl.Locale
+>ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
+>supportedLocalesOf : (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]
+>enUS : Locale
 
 Intl.ListFormat.supportedLocalesOf([deDE, jaJP]);
 >Intl.ListFormat.supportedLocalesOf([deDE, jaJP]) : string[]
->Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat.supportedLocalesOf : (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]
+>Intl.ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->[deDE, jaJP] : Intl.Locale[]
->deDE : Intl.Locale
->jaJP : Intl.Locale
+>ListFormat : { new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat; prototype: ListFormat; supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]; }
+>supportedLocalesOf : (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[]
+>[deDE, jaJP] : Locale[]
+>deDE : Locale
+>jaJP : Locale
 
