--- old.types.asyncGenerators.es2018.1.types
+++ new.types.asyncGenerators.es2018.1.types
@@= skipped -75, +75 lines =@@
 >1 : 1
 }
 const assignability1: () => AsyncIterableIterator<number> = async function * () {
->assignability1 : () => AsyncIterableIterator<number>
+>assignability1 : () => AsyncIterableIterator<number, any, any>
 >async function * () {    yield 1;} : () => AsyncGenerator<number, void, any>
 
     yield 1;
@@= skipped -9, +9 lines =@@
 
 };
 const assignability2: () => AsyncIterableIterator<number> = async function * () {
->assignability2 : () => AsyncIterableIterator<number>
+>assignability2 : () => AsyncIterableIterator<number, any, any>
 >async function * () {    yield Promise.resolve(1);} : () => AsyncGenerator<number, void, any>
 
     yield Promise.resolve(1);
@@= skipped -13, +13 lines =@@
 
 };
 const assignability3: () => AsyncIterableIterator<number> = async function * () {
->assignability3 : () => AsyncIterableIterator<number>
+>assignability3 : () => AsyncIterableIterator<number, any, any>
 >async function * () {    yield* [1, 2];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [1, 2];
@@= skipped -11, +11 lines =@@
 
 };
 const assignability4: () => AsyncIterableIterator<number> = async function * () {
->assignability4 : () => AsyncIterableIterator<number>
+>assignability4 : () => AsyncIterableIterator<number, any, any>
 >async function * () {    yield* [Promise.resolve(1)];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [Promise.resolve(1)];
@@= skipped -14, +14 lines =@@
 
 };
 const assignability5: () => AsyncIterableIterator<number> = async function * () {
->assignability5 : () => AsyncIterableIterator<number>
+>assignability5 : () => AsyncIterableIterator<number, any, any>
 >async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncGenerator<number, void, any>
 
     yield* (async function * () { yield 1; })();
@@= skipped -13, +13 lines =@@
 
 };
 const assignability6: () => AsyncIterable<number> = async function * () {
->assignability6 : () => AsyncIterable<number>
+>assignability6 : () => AsyncIterable<number, any, any>
 >async function * () {    yield 1;} : () => AsyncGenerator<number, void, any>
 
     yield 1;
@@= skipped -9, +9 lines =@@
 
 };
 const assignability7: () => AsyncIterable<number> = async function * () {
->assignability7 : () => AsyncIterable<number>
+>assignability7 : () => AsyncIterable<number, any, any>
 >async function * () {    yield Promise.resolve(1);} : () => AsyncGenerator<number, void, any>
 
     yield Promise.resolve(1);
@@= skipped -13, +13 lines =@@
 
 };
 const assignability8: () => AsyncIterable<number> = async function * () {
->assignability8 : () => AsyncIterable<number>
+>assignability8 : () => AsyncIterable<number, any, any>
 >async function * () {    yield* [1, 2];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [1, 2];
@@= skipped -11, +11 lines =@@
 
 };
 const assignability9: () => AsyncIterable<number> = async function * () {
->assignability9 : () => AsyncIterable<number>
+>assignability9 : () => AsyncIterable<number, any, any>
 >async function * () {    yield* [Promise.resolve(1)];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [Promise.resolve(1)];
@@= skipped -14, +14 lines =@@
 
 };
 const assignability10: () => AsyncIterable<number> = async function * () {
->assignability10 : () => AsyncIterable<number>
+>assignability10 : () => AsyncIterable<number, any, any>
 >async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncGenerator<number, void, any>
 
     yield* (async function * () { yield 1; })();
@@= skipped -13, +13 lines =@@
 
 };
 const assignability11: () => AsyncIterator<number> = async function * () {
->assignability11 : () => AsyncIterator<number>
+>assignability11 : () => AsyncIterator<number, any, any>
 >async function * () {    yield 1;} : () => AsyncGenerator<number, void, any>
 
     yield 1;
@@= skipped -9, +9 lines =@@
 
 };
 const assignability12: () => AsyncIterator<number> = async function * () {
->assignability12 : () => AsyncIterator<number>
+>assignability12 : () => AsyncIterator<number, any, any>
 >async function * () {    yield Promise.resolve(1);} : () => AsyncGenerator<number, void, any>
 
     yield Promise.resolve(1);
@@= skipped -13, +13 lines =@@
 
 };
 const assignability13: () => AsyncIterator<number> = async function * () {
->assignability13 : () => AsyncIterator<number>
+>assignability13 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* [1, 2];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [1, 2];
@@= skipped -11, +11 lines =@@
 
 };
 const assignability14: () => AsyncIterator<number> = async function * () {
->assignability14 : () => AsyncIterator<number>
+>assignability14 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* [Promise.resolve(1)];} : () => AsyncGenerator<number, void, unknown>
 
     yield* [Promise.resolve(1)];
@@= skipped -14, +14 lines =@@
 
 };
 const assignability15: () => AsyncIterator<number> = async function * () {
->assignability15 : () => AsyncIterator<number>
+>assignability15 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncGenerator<number, void, any>
 
     yield* (async function * () { yield 1; })();
@@= skipped -13, +13 lines =@@
 
 };
 async function * explicitReturnType1(): AsyncIterableIterator<number> {
->explicitReturnType1 : () => AsyncIterableIterator<number>
+>explicitReturnType1 : () => AsyncIterableIterator<number, any, any>
 
     yield 1;
 >yield 1 : any
 >1 : 1
 }
 async function * explicitReturnType2(): AsyncIterableIterator<number> {
->explicitReturnType2 : () => AsyncIterableIterator<number>
+>explicitReturnType2 : () => AsyncIterableIterator<number, any, any>
 
     yield Promise.resolve(1);
 >yield Promise.resolve(1) : any
@@= skipped -18, +18 lines =@@
 >1 : 1
 }
 async function * explicitReturnType3(): AsyncIterableIterator<number> {
->explicitReturnType3 : () => AsyncIterableIterator<number>
+>explicitReturnType3 : () => AsyncIterableIterator<number, any, any>
 
     yield* [1, 2];
 >yield* [1, 2] : any
@@= skipped -9, +9 lines =@@
 >2 : 2
 }
 async function * explicitReturnType4(): AsyncIterableIterator<number> {
->explicitReturnType4 : () => AsyncIterableIterator<number>
+>explicitReturnType4 : () => AsyncIterableIterator<number, any, any>
 
     yield* [Promise.resolve(1)];
 >yield* [Promise.resolve(1)] : any
@@= skipped -12, +12 lines =@@
 >1 : 1
 }
 async function * explicitReturnType5(): AsyncIterableIterator<number> {
->explicitReturnType5 : () => AsyncIterableIterator<number>
+>explicitReturnType5 : () => AsyncIterableIterator<number, any, any>
 
     yield* (async function * () { yield 1; })();
 >yield* (async function * () { yield 1; })() : void
@@= skipped -11, +11 lines =@@
 >1 : 1
 }
 async function * explicitReturnType6(): AsyncIterable<number> {
->explicitReturnType6 : () => AsyncIterable<number>
+>explicitReturnType6 : () => AsyncIterable<number, any, any>
 
     yield 1;
 >yield 1 : any
 >1 : 1
 }
 async function * explicitReturnType7(): AsyncIterable<number> {
->explicitReturnType7 : () => AsyncIterable<number>
+>explicitReturnType7 : () => AsyncIterable<number, any, any>
 
     yield Promise.resolve(1);
 >yield Promise.resolve(1) : any
@@= skipped -18, +18 lines =@@
 >1 : 1
 }
 async function * explicitReturnType8(): AsyncIterable<number> {
->explicitReturnType8 : () => AsyncIterable<number>
+>explicitReturnType8 : () => AsyncIterable<number, any, any>
 
     yield* [1, 2];
 >yield* [1, 2] : any
@@= skipped -9, +9 lines =@@
 >2 : 2
 }
 async function * explicitReturnType9(): AsyncIterable<number> {
->explicitReturnType9 : () => AsyncIterable<number>
+>explicitReturnType9 : () => AsyncIterable<number, any, any>
 
     yield* [Promise.resolve(1)];
 >yield* [Promise.resolve(1)] : any
@@= skipped -12, +12 lines =@@
 >1 : 1
 }
 async function * explicitReturnType10(): AsyncIterable<number> {
->explicitReturnType10 : () => AsyncIterable<number>
+>explicitReturnType10 : () => AsyncIterable<number, any, any>
 
     yield* (async function * () { yield 1; })();
 >yield* (async function * () { yield 1; })() : void
@@= skipped -11, +11 lines =@@
 >1 : 1
 }
 async function * explicitReturnType11(): AsyncIterator<number> {
->explicitReturnType11 : () => AsyncIterator<number>
+>explicitReturnType11 : () => AsyncIterator<number, any, any>
 
     yield 1;
 >yield 1 : any
 >1 : 1
 }
 async function * explicitReturnType12(): AsyncIterator<number> {
->explicitReturnType12 : () => AsyncIterator<number>
+>explicitReturnType12 : () => AsyncIterator<number, any, any>
 
     yield Promise.resolve(1);
 >yield Promise.resolve(1) : any
@@= skipped -18, +18 lines =@@
 >1 : 1
 }
 async function * explicitReturnType13(): AsyncIterator<number> {
->explicitReturnType13 : () => AsyncIterator<number>
+>explicitReturnType13 : () => AsyncIterator<number, any, any>
 
     yield* [1, 2];
 >yield* [1, 2] : any
@@= skipped -9, +9 lines =@@
 >2 : 2
 }
 async function * explicitReturnType14(): AsyncIterator<number> {
->explicitReturnType14 : () => AsyncIterator<number>
+>explicitReturnType14 : () => AsyncIterator<number, any, any>
 
     yield* [Promise.resolve(1)];
 >yield* [Promise.resolve(1)] : any
@@= skipped -12, +12 lines =@@
 >1 : 1
 }
 async function * explicitReturnType15(): AsyncIterator<number> {
->explicitReturnType15 : () => AsyncIterator<number>
+>explicitReturnType15 : () => AsyncIterator<number, any, any>
 
     yield* (async function * () { yield 1; })();
 >yield* (async function * () { yield 1; })() : void
@@= skipped -38, +38 lines =@@
 >1 : 1
 }
 async function * nextType1(): { next(...args: [] | [number | PromiseLike<number>]): any } {
->nextType1 : () => { next(...args: [] | [number | PromiseLike<number>]): any; }
+>nextType1 : () => { next: (...args: [] | [number | PromiseLike<number>]) => any; }
 >next : (...args: [] | [number | PromiseLike<number>]) => any
 >args : [] | [number | PromiseLike<number>]
 
