//// [tests/cases/conformance/es2021/intlDateTimeFormatRangeES2021.ts] ////

=== intlDateTimeFormatRangeES2021.ts ===
new Intl.DateTimeFormat().formatRange(new Date(0), new Date());
>new Intl.DateTimeFormat().formatRange(new Date(0), new Date()) : string
>new Intl.DateTimeFormat().formatRange : (startDate: number | bigint | Date, endDate: number | bigint | Date) => string
>new Intl.DateTimeFormat() : DateTimeFormat
>Intl.DateTimeFormat : DateTimeFormatConstructor
>Intl : typeof Intl
>DateTimeFormat : DateTimeFormatConstructor
>formatRange : (startDate: number | bigint | Date, endDate: number | bigint | Date) => string
>new Date(0) : Date
>Date : DateConstructor
>0 : 0
>new Date() : Date
>Date : DateConstructor

const [ part ] = new Intl.DateTimeFormat().formatRangeToParts(1000, 1000000000);
>part : DateTimeRangeFormatPart
>new Intl.DateTimeFormat().formatRangeToParts(1000, 1000000000) : DateTimeRangeFormatPart[]
>new Intl.DateTimeFormat().formatRangeToParts : (startDate: number | bigint | Date, endDate: number | bigint | Date) => DateTimeRangeFormatPart[]
>new Intl.DateTimeFormat() : DateTimeFormat
>Intl.DateTimeFormat : DateTimeFormatConstructor
>Intl : typeof Intl
>DateTimeFormat : DateTimeFormatConstructor
>formatRangeToParts : (startDate: number | bigint | Date, endDate: number | bigint | Date) => DateTimeRangeFormatPart[]
>1000 : 1000
>1000000000 : 1000000000

