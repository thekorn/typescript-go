//// [tests/cases/conformance/moduleResolution/bundler/bundlerSyntaxRestrictions.ts] ////

=== /node_modules/@types/node/index.d.ts ===
declare var require: (...args: any[]) => any;
>require : (...args: any[]) => any
>args : any[]

=== /ambient.d.ts ===
declare module "fs" {
>"fs" : typeof import("fs")

    export function readFileSync(path: string, encoding?: string): string;
>readFileSync : (path: string, encoding?: string) => string
>path : string
>encoding : string
}
declare module "path" {
>"path" : typeof import("path")

    import fs = require("fs"); // ok
>fs : typeof import("fs")

    namespace path {
>path : typeof path

        export const sep: string;
>sep : string
    }
    export = path; // ok
>path : typeof path
}

=== /mainJs.js ===
import {} from "./a";
import("./a");
>import("./a") : Promise<typeof import("/a")>
>"./a" : "./a"

const _ = require("./a");
>_ : any
>require("./a") : any
>require : (...args: any[]) => any
>"./a" : "./a"

_.a; // any
>_.a : any
>_ : any
>a : any

=== /main.ts ===
import {} from "./a";
import _ = require("./a"); // Error in esnext
>_ : typeof import("/a")

export = {}; // Error
>{} : {}

export {};

=== /a.ts ===
export const a = "a";
>a : "a"
>"a" : "a"

