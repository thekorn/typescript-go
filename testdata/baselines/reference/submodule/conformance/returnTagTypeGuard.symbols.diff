--- old.returnTagTypeGuard.symbols
+++ new.returnTagTypeGuard.symbols
@@= skipped -5, +5 lines =@@
 
     constructor() {
         this.c = 1
->this.c : Symbol(Entry.c, Decl(bug25127.js, 1, 19))
 >this : Symbol(Entry, Decl(bug25127.js, 0, 0))
->c : Symbol(Entry.c, Decl(bug25127.js, 1, 19))
     }
     /**
      * @param {any} x
      * @return {this is Entry}
      */
     isInit(x) {
->isInit : Symbol(Entry.isInit, Decl(bug25127.js, 3, 5))
+>isInit : Symbol(isInit, Decl(bug25127.js, 3, 5))
 >x : Symbol(x, Decl(bug25127.js, 8, 11))
 
         return true
@@= skipped -20, +18 lines =@@
 
     constructor() {
         this.d = 'no'
->this.d : Symbol(Group.d, Decl(bug25127.js, 13, 19))
 >this : Symbol(Group, Decl(bug25127.js, 11, 1))
->d : Symbol(Group.d, Decl(bug25127.js, 13, 19))
     }
     /**
      * @param {any} x
      * @return {false}
      */
     isInit(x) {
->isInit : Symbol(Group.isInit, Decl(bug25127.js, 15, 5))
+>isInit : Symbol(isInit, Decl(bug25127.js, 15, 5))
 >x : Symbol(x, Decl(bug25127.js, 20, 11))
 
         return false
@@= skipped -26, +24 lines =@@
 >chunk : Symbol(chunk, Decl(bug25127.js, 25, 11))
 >isInit : Symbol(isInit, Decl(bug25127.js, 3, 5), Decl(bug25127.js, 15, 5))
 >chunk : Symbol(chunk, Decl(bug25127.js, 25, 11))
->chunk.c : Symbol(Entry.c, Decl(bug25127.js, 1, 19))
 >chunk : Symbol(chunk, Decl(bug25127.js, 25, 11))
->c : Symbol(Entry.c, Decl(bug25127.js, 1, 19))
->chunk.d : Symbol(Group.d, Decl(bug25127.js, 13, 19))
 >chunk : Symbol(chunk, Decl(bug25127.js, 25, 11))
->d : Symbol(Group.d, Decl(bug25127.js, 13, 19))
 
     return x
 >x : Symbol(x, Decl(bug25127.js, 26, 7))
