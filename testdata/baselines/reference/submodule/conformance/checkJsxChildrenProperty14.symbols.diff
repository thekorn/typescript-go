--- old.checkJsxChildrenProperty14.symbols
+++ new.checkJsxChildrenProperty14.symbols
@@= skipped -7, +7 lines =@@
 >Prop : Symbol(Prop, Decl(file.tsx, 0, 32))
 
     a: number,
->a : Symbol(Prop.a, Decl(file.tsx, 2, 16))
+>a : Symbol(a, Decl(file.tsx, 2, 16))
 
     b: string,
->b : Symbol(Prop.b, Decl(file.tsx, 3, 14))
+>b : Symbol(b, Decl(file.tsx, 3, 14))
 
     children: JSX.Element | JSX.Element[];
->children : Symbol(Prop.children, Decl(file.tsx, 4, 14))
+>children : Symbol(children, Decl(file.tsx, 4, 14))
 >JSX : Symbol(JSX, Decl(react.d.ts, 2353, 1))
->Element : Symbol(JSX.Element, Decl(react.d.ts, 2356, 27))
+>Element : Symbol(Element, Decl(react.d.ts, 2356, 27))
 >JSX : Symbol(JSX, Decl(react.d.ts, 2353, 1))
->Element : Symbol(JSX.Element, Decl(react.d.ts, 2356, 27))
+>Element : Symbol(Element, Decl(react.d.ts, 2356, 27))
 }
 
 class Button extends React.Component<any, any> {
 >Button : Symbol(Button, Decl(file.tsx, 6, 1))
->React.Component : Symbol(React.Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
+>React.Component : Symbol(Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
 >React : Symbol(React, Decl(file.tsx, 0, 0))
->Component : Symbol(React.Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
+>Component : Symbol(Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
 
     render() {
->render : Symbol(Button.render, Decl(file.tsx, 8, 48))
+>render : Symbol(render, Decl(file.tsx, 8, 48))
 
         return (<div>My Button</div>)
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
     }
 }
 
@@= skipped -33, +31 lines =@@
 >p : Symbol(p, Decl(file.tsx, 14, 23))
 
     return <h1>Just Another Button</h1>;
->h1 : Symbol(JSX.IntrinsicElements.h1, Decl(react.d.ts, 2410, 47))
->h1 : Symbol(JSX.IntrinsicElements.h1, Decl(react.d.ts, 2410, 47))
 }
 
 function Comp(p: Prop) {
@@= skipped -10, +8 lines =@@
 >Prop : Symbol(Prop, Decl(file.tsx, 0, 32))
 
     return <div>{p.b}</div>;
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
->p.b : Symbol(Prop.b, Decl(file.tsx, 3, 14))
+>p.b : Symbol(b, Decl(file.tsx, 3, 14))
 >p : Symbol(p, Decl(file.tsx, 18, 14))
->b : Symbol(Prop.b, Decl(file.tsx, 3, 14))
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
+>b : Symbol(b, Decl(file.tsx, 3, 14))
 }
 
 // OK
@@= skipped -39, +37 lines =@@
 >SingleChildProp : Symbol(SingleChildProp, Decl(file.tsx, 25, 69))
 
     a: number,
->a : Symbol(SingleChildProp.a, Decl(file.tsx, 27, 27))
+>a : Symbol(a, Decl(file.tsx, 27, 27))
 
     b: string,
->b : Symbol(SingleChildProp.b, Decl(file.tsx, 28, 14))
+>b : Symbol(b, Decl(file.tsx, 28, 14))
 
     children: JSX.Element;
->children : Symbol(SingleChildProp.children, Decl(file.tsx, 29, 14))
+>children : Symbol(children, Decl(file.tsx, 29, 14))
 >JSX : Symbol(JSX, Decl(react.d.ts, 2353, 1))
->Element : Symbol(JSX.Element, Decl(react.d.ts, 2356, 27))
+>Element : Symbol(Element, Decl(react.d.ts, 2356, 27))
 }
 
 function SingleChildComp(p: SingleChildProp) {
@@= skipped -17, +17 lines =@@
 >SingleChildProp : Symbol(SingleChildProp, Decl(file.tsx, 25, 69))
 
     return <div>{p.b}</div>;
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
->p.b : Symbol(SingleChildProp.b, Decl(file.tsx, 28, 14))
+>p.b : Symbol(b, Decl(file.tsx, 28, 14))
 >p : Symbol(p, Decl(file.tsx, 33, 25))
->b : Symbol(SingleChildProp.b, Decl(file.tsx, 28, 14))
->div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2400, 45))
+>b : Symbol(b, Decl(file.tsx, 28, 14))
 }
 
 // OK
