//// [tests/cases/conformance/node/nodeModulesTypesVersionPackageExports.ts] ////

=== index.ts ===
// esm format file
import * as mod from "inner";
>mod : typeof import("node_modules/inner/index")

mod.correctVersionApplied;
>mod.correctVersionApplied : any
>mod : typeof import("node_modules/inner/index")
>correctVersionApplied : any

=== index.mts ===
// esm format file
import * as mod from "inner";
>mod : typeof import("node_modules/inner/index")

mod.correctVersionApplied;
>mod.correctVersionApplied : any
>mod : typeof import("node_modules/inner/index")
>correctVersionApplied : any

=== index.cts ===
// cjs format file
import * as mod from "inner";
>mod : typeof import("node_modules/inner/index")

mod.correctVersionApplied;
>mod.correctVersionApplied : any
>mod : typeof import("node_modules/inner/index")
>correctVersionApplied : any

=== node_modules/inner/index.d.ts ===
// cjs format file
export const noConditionsApplied = true;
>noConditionsApplied : true
>true : true

=== node_modules/inner/index.d.mts ===
// esm format file
export const importConditionApplied = true;
>importConditionApplied : true
>true : true

=== node_modules/inner/index.d.cts ===
// cjs format file
export const wrongConditionApplied = true;
>wrongConditionApplied : true
>true : true

=== node_modules/inner/old-types.d.ts ===
export const noVersionApplied = true;
>noVersionApplied : true
>true : true

=== node_modules/inner/new-types.d.ts ===
export const correctVersionApplied = true;
>correctVersionApplied : true
>true : true

=== node_modules/inner/future-types.d.ts ===
export const futureVersionApplied = true;
>futureVersionApplied : true
>true : true

