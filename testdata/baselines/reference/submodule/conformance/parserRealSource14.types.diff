--- old.parserRealSource14.types
+++ new.parserRealSource14.types
@@= skipped -68, +68 lines =@@
 >AstPath : AstPath
 
         public asts: TypeScript.AST[] = [];
->asts : TypeScript.AST[]
+>asts : AST[]
 >TypeScript : any
 >[] : undefined[]
 
@@= skipped -45, +45 lines =@@
 >AstPath : typeof AstPath
 
             clone.asts = this.asts.map((value) => { return value; });
->clone.asts = this.asts.map((value) => { return value; }) : TypeScript.AST[]
->clone.asts : TypeScript.AST[]
+>clone.asts = this.asts.map((value) => { return value; }) : AST[]
+>clone.asts : AST[]
 >clone : AstPath
->asts : TypeScript.AST[]
->this.asts.map((value) => { return value; }) : TypeScript.AST[]
->this.asts.map : <U>(callbackfn: (value: TypeScript.AST, index: number, array: TypeScript.AST[]) => U, thisArg?: any) => U[]
->this.asts : TypeScript.AST[]
+>asts : AST[]
+>this.asts.map((value) => { return value; }) : AST[]
+>this.asts.map : <U>(callbackfn: (value: AST, index: number, array: AST[]) => U, thisArg?: any) => U[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
->map : <U>(callbackfn: (value: TypeScript.AST, index: number, array: TypeScript.AST[]) => U, thisArg?: any) => U[]
->(value) => { return value; } : (value: TypeScript.AST) => TypeScript.AST
->value : TypeScript.AST
->value : TypeScript.AST
+>asts : AST[]
+>map : <U>(callbackfn: (value: AST, index: number, array: AST[]) => U, thisArg?: any) => U[]
+>(value) => { return value; } : (value: AST) => AST
+>value : AST
+>value : AST
 
             clone.top = this.top;
 >clone.top = this.top : number
@@= skipped -28, +28 lines =@@
         }
 
         public pop(): TypeScript.AST {
->pop : () => TypeScript.AST
+>pop : () => AST
 >TypeScript : any
 
             var head = this.ast();
->head : TypeScript.AST
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>head : AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 
             this.up();
 >this.up() : void
@@= skipped -19, +19 lines =@@
             while (this.asts.length > this.count()) {
 >this.asts.length > this.count() : boolean
 >this.asts.length : number
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >length : number
 >this.count() : number
 >this.count : () => number
@@= skipped -10, +10 lines =@@
 >count : () => number
 
                 this.asts.pop();
->this.asts.pop() : TypeScript.AST
->this.asts.pop : () => TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts.pop() : AST
+>this.asts.pop : () => AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
->pop : () => TypeScript.AST
+>asts : AST[]
+>pop : () => AST
             }
             return head;
->head : TypeScript.AST
+>head : AST
         }
 
         public push(ast: TypeScript.AST) {
->push : (ast: TypeScript.AST) => void
->ast : TypeScript.AST
+>push : (ast: AST) => void
+>ast : AST
 >TypeScript : any
 
             while (this.asts.length > this.count()) {
 >this.asts.length > this.count() : boolean
 >this.asts.length : number
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >length : number
 >this.count() : number
 >this.count : () => number
@@= skipped -29, +29 lines =@@
 >count : () => number
 
                 this.asts.pop();
->this.asts.pop() : TypeScript.AST
->this.asts.pop : () => TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts.pop() : AST
+>this.asts.pop : () => AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
->pop : () => TypeScript.AST
+>asts : AST[]
+>pop : () => AST
             }
             this.top = this.asts.length;
 >this.top = this.asts.length : number
@@= skipped -13, +13 lines =@@
 >this : this
 >top : number
 >this.asts.length : number
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >length : number
 
             this.asts.push(ast);
 >this.asts.push(ast) : number
->this.asts.push : (...items: TypeScript.AST[]) => number
->this.asts : TypeScript.AST[]
+>this.asts.push : (...items: AST[]) => number
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
->push : (...items: TypeScript.AST[]) => number
->ast : TypeScript.AST
+>asts : AST[]
+>push : (...items: AST[]) => number
+>ast : AST
         }
 
         public up() {
@@= skipped -48, +48 lines =@@
 >top : number
 >this.ast.length - 1 : number
 >this.ast.length : number
->this.ast : () => TypeScript.AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >length : number
 >1 : 1
 
@@= skipped -19, +19 lines =@@
         }
 
         public nodeType(): TypeScript.NodeType {
->nodeType : () => TypeScript.NodeType
+>nodeType : () => NodeType
 >TypeScript : any
 
             if (this.ast() == null)
 >this.ast() == null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 
                 return TypeScript.NodeType.None;
 >TypeScript.NodeType.None : any
@@= skipped -19, +19 lines =@@
 
             return this.ast().nodeType;
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
         }
 
         public ast() {
->ast : () => TypeScript.AST
+>ast : () => AST
 
             return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1));
-><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1)) : TypeScript.AST
+><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1)) : AST
 >TypeScript : any
 >AstPath.reverseIndexOf(this.asts, this.asts.length - (this.top + 1)) : any
 >AstPath.reverseIndexOf : (items: any[], index: number) => any
 >AstPath : typeof AstPath
 >reverseIndexOf : (items: any[], index: number) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.asts.length - (this.top + 1) : number
 >this.asts.length : number
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >length : number
 >(this.top + 1) : number
 >this.top + 1 : number
@@= skipped -35, +35 lines =@@
         }
 
         public parent() {
->parent : () => TypeScript.AST
+>parent : () => AST
 
             return <TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top);
-><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top) : TypeScript.AST
+><TypeScript.AST>AstPath.reverseIndexOf(this.asts, this.asts.length - this.top) : AST
 >TypeScript : any
 >AstPath.reverseIndexOf(this.asts, this.asts.length - this.top) : any
 >AstPath.reverseIndexOf : (items: any[], index: number) => any
 >AstPath : typeof AstPath
 >reverseIndexOf : (items: any[], index: number) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.asts.length - this.top : number
 >this.asts.length : number
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >length : number
 >this.top : number
 >this : this
@@= skipped -35, +35 lines =@@
         }
 
         public get(index: number): TypeScript.AST {
->get : (index: number) => TypeScript.AST
+>get : (index: number) => AST
 >index : number
 >TypeScript : any
 
             return this.asts[index];
->this.asts[index] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[index] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >index : number
         }
 
@@= skipped -18, +18 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.ClassDeclaration) : boolean
 >this.parent().nodeType === TypeScript.NodeType.ClassDeclaration : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.ClassDeclaration : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
 >(<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast() : boolean
 >(<TypeScript.InterfaceDeclaration>this.parent()).name : any
->(<TypeScript.InterfaceDeclaration>this.parent()) : TypeScript.InterfaceDeclaration
-><TypeScript.InterfaceDeclaration>this.parent() : TypeScript.InterfaceDeclaration
+>(<TypeScript.InterfaceDeclaration>this.parent()) : InterfaceDeclaration
+><TypeScript.InterfaceDeclaration>this.parent() : InterfaceDeclaration
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >name : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isNameOfInterface(): boolean {
@@= skipped -20, +20 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration) : boolean
 >this.parent().nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.InterfaceDeclaration : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast()) : boolean
 >(<TypeScript.InterfaceDeclaration>this.parent()).name === this.ast() : boolean
 >(<TypeScript.InterfaceDeclaration>this.parent()).name : any
->(<TypeScript.InterfaceDeclaration>this.parent()) : TypeScript.InterfaceDeclaration
-><TypeScript.InterfaceDeclaration>this.parent() : TypeScript.InterfaceDeclaration
+>(<TypeScript.InterfaceDeclaration>this.parent()) : InterfaceDeclaration
+><TypeScript.InterfaceDeclaration>this.parent() : InterfaceDeclaration
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >name : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isNameOfArgument(): boolean {
@@= skipped -20, +20 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.ArgDecl) : boolean
 >this.parent().nodeType === TypeScript.NodeType.ArgDecl : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.ArgDecl : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.ArgDecl>this.parent()).id === this.ast()) : boolean
 >(<TypeScript.ArgDecl>this.parent()).id === this.ast() : boolean
 >(<TypeScript.ArgDecl>this.parent()).id : any
->(<TypeScript.ArgDecl>this.parent()) : TypeScript.ArgDecl
-><TypeScript.ArgDecl>this.parent() : TypeScript.ArgDecl
+>(<TypeScript.ArgDecl>this.parent()) : ArgDecl
+><TypeScript.ArgDecl>this.parent() : ArgDecl
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >id : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isNameOfVariable(): boolean {
@@= skipped -20, +20 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.VarDecl) : boolean
 >this.parent().nodeType === TypeScript.NodeType.VarDecl : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.VarDecl : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.VarDecl>this.parent()).id === this.ast()) : boolean
 >(<TypeScript.VarDecl>this.parent()).id === this.ast() : boolean
 >(<TypeScript.VarDecl>this.parent()).id : any
->(<TypeScript.VarDecl>this.parent()) : TypeScript.VarDecl
-><TypeScript.VarDecl>this.parent() : TypeScript.VarDecl
+>(<TypeScript.VarDecl>this.parent()) : VarDecl
+><TypeScript.VarDecl>this.parent() : VarDecl
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >id : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isNameOfModule(): boolean {
@@= skipped -20, +20 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration) : boolean
 >this.parent().nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.ModuleDeclaration : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.ModuleDeclaration>this.parent()).name === this.ast()) : boolean
 >(<TypeScript.ModuleDeclaration>this.parent()).name === this.ast() : boolean
 >(<TypeScript.ModuleDeclaration>this.parent()).name : any
->(<TypeScript.ModuleDeclaration>this.parent()) : TypeScript.ModuleDeclaration
-><TypeScript.ModuleDeclaration>this.parent() : TypeScript.ModuleDeclaration
+>(<TypeScript.ModuleDeclaration>this.parent()) : ModuleDeclaration
+><TypeScript.ModuleDeclaration>this.parent() : ModuleDeclaration
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >name : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isNameOfFunction(): boolean {
@@= skipped -20, +20 lines =@@
             if (this.ast() === null || this.parent() === null)
 >this.ast() === null || this.parent() === null : boolean
 >this.ast() === null : boolean
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >this.parent() === null : boolean
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 
                 return false;
 >false : false
@@= skipped -19, +19 lines =@@
 >(this.ast().nodeType === TypeScript.NodeType.Name) : boolean
 >this.ast().nodeType === TypeScript.NodeType.Name : boolean
 >this.ast().nodeType : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >(this.parent().nodeType === TypeScript.NodeType.FuncDecl) : boolean
 >this.parent().nodeType === TypeScript.NodeType.FuncDecl : boolean
 >this.parent().nodeType : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >nodeType : any
 >TypeScript.NodeType.FuncDecl : any
 >TypeScript.NodeType : any
@@= skipped -15, +15 lines =@@
 >((<TypeScript.FuncDecl>this.parent()).name === this.ast()) : boolean
 >(<TypeScript.FuncDecl>this.parent()).name === this.ast() : boolean
 >(<TypeScript.FuncDecl>this.parent()).name : any
->(<TypeScript.FuncDecl>this.parent()) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.parent() : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.parent()) : FuncDecl
+><TypeScript.FuncDecl>this.parent() : FuncDecl
 >TypeScript : any
->this.parent() : TypeScript.AST
->this.parent : () => TypeScript.AST
+>this.parent() : AST
+>this.parent : () => AST
 >this : this
->parent : () => TypeScript.AST
+>parent : () => AST
 >name : any
->this.ast() : TypeScript.AST
->this.ast : () => TypeScript.AST
+>this.ast() : AST
+>this.ast : () => AST
 >this : this
->ast : () => TypeScript.AST
+>ast : () => AST
         }
 
         public isChildOfScript(): boolean {
@@= skipped -21, +21 lines =@@
 >ast : any
 >lastOf(this.asts) : any
 >lastOf : (items: any[]) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 
             return this.count() >= 3 &&
 >this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script : boolean
@@= skipped -17, +17 lines =@@
 
                 this.asts[this.top] === ast &&
 >this.asts[this.top] === ast : boolean
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -12, +12 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script;
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.Script : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -24, +24 lines =@@
 >ast : any
 >lastOf(this.asts) : any
 >lastOf : (items: any[]) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 
             return this.count() >= 3 &&
 >this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
@@= skipped -17, +17 lines =@@
 
                 this.asts[this.top] === ast &&
 >this.asts[this.top] === ast : boolean
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -12, +12 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration;
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -24, +24 lines =@@
 >ast : any
 >lastOf(this.asts) : any
 >lastOf : (items: any[]) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 
             return this.count() >= 3 &&
 >this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
@@= skipped -17, +17 lines =@@
 
                 this.asts[this.top] === ast &&
 >this.asts[this.top] === ast : boolean
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -12, +12 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration;
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -24, +24 lines =@@
 >ast : any
 >lastOf(this.asts) : any
 >lastOf : (items: any[]) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 
             return this.count() >= 5 &&
 >this.count() >= 5 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&                this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&                ((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) &&                ((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]) : boolean
@@= skipped -22, +22 lines =@@
 
                 this.asts[this.top] === ast &&
 >this.asts[this.top] === ast : boolean
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -12, +12 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 3].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 3].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 3].nodeType : any
->this.asts[this.top - 3] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 3] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 3 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration &&
 >this.asts[this.top - 4].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
 >this.asts[this.top - 4].nodeType : any
->this.asts[this.top - 4] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 4] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 4 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 ((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) &&
 >((<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor) : any
 >(<TypeScript.FuncDecl>this.asts[this.top - 2]).isConstructor : any
->(<TypeScript.FuncDecl>this.asts[this.top - 2]) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.asts[this.top - 2] : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : FuncDecl
+><TypeScript.FuncDecl>this.asts[this.top - 2] : FuncDecl
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -18, +18 lines =@@
 >((<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1]) : boolean
 >(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1] : boolean
 >(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments : any
->(<TypeScript.FuncDecl>this.asts[this.top - 2]) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.asts[this.top - 2] : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : FuncDecl
+><TypeScript.FuncDecl>this.asts[this.top - 2] : FuncDecl
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >arguments : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -27, +27 lines =@@
 >((<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2]) : boolean
 >(<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl === this.asts[this.top - 2] : boolean
 >(<TypeScript.ClassDeclaration>this.asts[this.top - 4]).constructorDecl : any
->(<TypeScript.ClassDeclaration>this.asts[this.top - 4]) : TypeScript.ClassDeclaration
-><TypeScript.ClassDeclaration>this.asts[this.top - 4] : TypeScript.ClassDeclaration
+>(<TypeScript.ClassDeclaration>this.asts[this.top - 4]) : ClassDeclaration
+><TypeScript.ClassDeclaration>this.asts[this.top - 4] : ClassDeclaration
 >TypeScript : any
->this.asts[this.top - 4] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 4] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 4 : number
 >this.top : number
 >this : this
 >top : number
 >4 : 4
 >constructorDecl : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -31, +31 lines =@@
 >ast : any
 >lastOf(this.asts) : any
 >lastOf : (items: any[]) => any
->this.asts : TypeScript.AST[]
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 
             return this.count() >= 3 &&
 >this.count() >= 3 &&                this.asts[this.top] === ast &&                this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&                this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
@@= skipped -17, +17 lines =@@
 
                 this.asts[this.top] === ast &&
 >this.asts[this.top] === ast : boolean
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -12, +12 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration;
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -33, +33 lines =@@
                 this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration &&
 >this.asts[this.top].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
 >this.asts[this.top].nodeType : any
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -20, +20 lines =@@
 >TypeScript : typeof TypeScript
 >hasFlag : any
 >(<TypeScript.ModuleDeclaration>this.asts[this.top]).modFlags : any
->(<TypeScript.ModuleDeclaration>this.asts[this.top]) : TypeScript.ModuleDeclaration
-><TypeScript.ModuleDeclaration>this.asts[this.top] : TypeScript.ModuleDeclaration
+>(<TypeScript.ModuleDeclaration>this.asts[this.top]) : ModuleDeclaration
+><TypeScript.ModuleDeclaration>this.asts[this.top] : ModuleDeclaration
 >TypeScript : any
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -36, +36 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] &&
 >(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
 >(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members : any
->(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : TypeScript.ModuleDeclaration
-><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : TypeScript.ModuleDeclaration
+>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : ModuleDeclaration
+><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : ModuleDeclaration
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >members : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -29, +29 lines =@@
 >TypeScript : typeof TypeScript
 >hasFlag : any
 >(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).modFlags : any
->(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : TypeScript.ModuleDeclaration
-><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : TypeScript.ModuleDeclaration
+>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : ModuleDeclaration
+><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : ModuleDeclaration
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -36, +36 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Script : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0];
 >(<TypeScript.Script>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
 >(<TypeScript.Script>this.asts[this.top - 1]).bod : any
->(<TypeScript.Script>this.asts[this.top - 1]) : TypeScript.Script
-><TypeScript.Script>this.asts[this.top - 1] : TypeScript.Script
+>(<TypeScript.Script>this.asts[this.top - 1]) : Script
+><TypeScript.Script>this.asts[this.top - 1] : Script
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >bod : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Switch : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0];
 >(<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList == this.asts[this.top - 0] : boolean
 >(<TypeScript.SwitchStatement>this.asts[this.top - 1]).caseList : any
->(<TypeScript.SwitchStatement>this.asts[this.top - 1]) : TypeScript.SwitchStatement
-><TypeScript.SwitchStatement>this.asts[this.top - 1] : TypeScript.SwitchStatement
+>(<TypeScript.SwitchStatement>this.asts[this.top - 1]) : SwitchStatement
+><TypeScript.SwitchStatement>this.asts[this.top - 1] : SwitchStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >caseList : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ModuleDeclaration : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
 >(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
 >(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]).members : any
->(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : TypeScript.ModuleDeclaration
-><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : TypeScript.ModuleDeclaration
+>(<TypeScript.ModuleDeclaration>this.asts[this.top - 1]) : ModuleDeclaration
+><TypeScript.ModuleDeclaration>this.asts[this.top - 1] : ModuleDeclaration
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >members : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ClassDeclaration : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
 >(<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
 >(<TypeScript.ClassDeclaration>this.asts[this.top - 1]).members : any
->(<TypeScript.ClassDeclaration>this.asts[this.top - 1]) : TypeScript.ClassDeclaration
-><TypeScript.ClassDeclaration>this.asts[this.top - 1] : TypeScript.ClassDeclaration
+>(<TypeScript.ClassDeclaration>this.asts[this.top - 1]) : ClassDeclaration
+><TypeScript.ClassDeclaration>this.asts[this.top - 1] : ClassDeclaration
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >members : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0];
 >(<TypeScript.FuncDecl>this.asts[this.top - 1]).bod == this.asts[this.top - 0] : boolean
 >(<TypeScript.FuncDecl>this.asts[this.top - 1]).bod : any
->(<TypeScript.FuncDecl>this.asts[this.top - 1]) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.asts[this.top - 1] : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.asts[this.top - 1]) : FuncDecl
+><TypeScript.FuncDecl>this.asts[this.top - 1] : FuncDecl
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >bod : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.InterfaceDeclaration : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                  (<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0];
 >(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members == this.asts[this.top - 0] : boolean
 >(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]).members : any
->(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]) : TypeScript.InterfaceDeclaration
-><TypeScript.InterfaceDeclaration>this.asts[this.top - 1] : TypeScript.InterfaceDeclaration
+>(<TypeScript.InterfaceDeclaration>this.asts[this.top - 1]) : InterfaceDeclaration
+><TypeScript.InterfaceDeclaration>this.asts[this.top - 1] : InterfaceDeclaration
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >members : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Block : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0];
 >(<TypeScript.Block>this.asts[this.top - 1]).statements == this.asts[this.top - 0] : boolean
 >(<TypeScript.Block>this.asts[this.top - 1]).statements : any
->(<TypeScript.Block>this.asts[this.top - 1]) : TypeScript.Block
-><TypeScript.Block>this.asts[this.top - 1] : TypeScript.Block
+>(<TypeScript.Block>this.asts[this.top - 1]) : Block
+><TypeScript.Block>this.asts[this.top - 1] : Block
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >statements : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.For &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.For : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.ForStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.ForStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.ForStatement>this.asts[this.top - 1]) : TypeScript.ForStatement
-><TypeScript.ForStatement>this.asts[this.top - 1] : TypeScript.ForStatement
+>(<TypeScript.ForStatement>this.asts[this.top - 1]) : ForStatement
+><TypeScript.ForStatement>this.asts[this.top - 1] : ForStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Case : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.CaseStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.CaseStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.CaseStatement>this.asts[this.top - 1]) : TypeScript.CaseStatement
-><TypeScript.CaseStatement>this.asts[this.top - 1] : TypeScript.CaseStatement
+>(<TypeScript.CaseStatement>this.asts[this.top - 1]) : CaseStatement
+><TypeScript.CaseStatement>this.asts[this.top - 1] : CaseStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Try : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.Try>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.Try>this.asts[this.top - 1]).body : any
->(<TypeScript.Try>this.asts[this.top - 1]) : TypeScript.Try
-><TypeScript.Try>this.asts[this.top - 1] : TypeScript.Try
+>(<TypeScript.Try>this.asts[this.top - 1]) : Try
+><TypeScript.Try>this.asts[this.top - 1] : Try
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Catch : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.Catch>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.Catch>this.asts[this.top - 1]).body : any
->(<TypeScript.Catch>this.asts[this.top - 1]) : TypeScript.Catch
-><TypeScript.Catch>this.asts[this.top - 1] : TypeScript.Catch
+>(<TypeScript.Catch>this.asts[this.top - 1]) : Catch
+><TypeScript.Catch>this.asts[this.top - 1] : Catch
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.DoWhile : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.DoWhileStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.DoWhileStatement>this.asts[this.top - 1]) : TypeScript.DoWhileStatement
-><TypeScript.DoWhileStatement>this.asts[this.top - 1] : TypeScript.DoWhileStatement
+>(<TypeScript.DoWhileStatement>this.asts[this.top - 1]) : DoWhileStatement
+><TypeScript.DoWhileStatement>this.asts[this.top - 1] : DoWhileStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.While &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.While : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.WhileStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.WhileStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.WhileStatement>this.asts[this.top - 1]) : TypeScript.WhileStatement
-><TypeScript.WhileStatement>this.asts[this.top - 1] : TypeScript.WhileStatement
+>(<TypeScript.WhileStatement>this.asts[this.top - 1]) : WhileStatement
+><TypeScript.WhileStatement>this.asts[this.top - 1] : WhileStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ForIn : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.ForInStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.ForInStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.ForInStatement>this.asts[this.top - 1]) : TypeScript.ForInStatement
-><TypeScript.ForInStatement>this.asts[this.top - 1] : TypeScript.ForInStatement
+>(<TypeScript.ForInStatement>this.asts[this.top - 1]) : ForInStatement
+><TypeScript.ForInStatement>this.asts[this.top - 1] : ForInStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.With &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.With : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.WithStatement>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.WithStatement>this.asts[this.top - 1]).body : any
->(<TypeScript.WithStatement>this.asts[this.top - 1]) : TypeScript.WithStatement
-><TypeScript.WithStatement>this.asts[this.top - 1] : TypeScript.WithStatement
+>(<TypeScript.WithStatement>this.asts[this.top - 1]) : WithStatement
+><TypeScript.WithStatement>this.asts[this.top - 1] : WithStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Finally : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0];
 >(<TypeScript.Finally>this.asts[this.top - 1]).body == this.asts[this.top - 0] : boolean
 >(<TypeScript.Finally>this.asts[this.top - 1]).body : any
->(<TypeScript.Finally>this.asts[this.top - 1]) : TypeScript.Finally
-><TypeScript.Finally>this.asts[this.top - 1] : TypeScript.Finally
+>(<TypeScript.Finally>this.asts[this.top - 1]) : Finally
+><TypeScript.Finally>this.asts[this.top - 1] : Finally
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >body : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1];
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList : any
->(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : TypeScript.SwitchStatement
-><TypeScript.SwitchStatement>this.asts[this.top - 2] : TypeScript.SwitchStatement
+>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : SwitchStatement
+><TypeScript.SwitchStatement>this.asts[this.top - 2] : SwitchStatement
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >caseList : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -42, +42 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.Switch : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] &&
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList == this.asts[this.top - 1] : boolean
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).caseList : any
->(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : TypeScript.SwitchStatement
-><TypeScript.SwitchStatement>this.asts[this.top - 2] : TypeScript.SwitchStatement
+>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : SwitchStatement
+><TypeScript.SwitchStatement>this.asts[this.top - 2] : SwitchStatement
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >caseList : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -26, +26 lines =@@
                 (<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0];
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase == this.asts[this.top - 0] : boolean
 >(<TypeScript.SwitchStatement>this.asts[this.top - 2]).defaultCase : any
->(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : TypeScript.SwitchStatement
-><TypeScript.SwitchStatement>this.asts[this.top - 2] : TypeScript.SwitchStatement
+>(<TypeScript.SwitchStatement>this.asts[this.top - 2]) : SwitchStatement
+><TypeScript.SwitchStatement>this.asts[this.top - 2] : SwitchStatement
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >defaultCase : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
->(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : TypeScript.UnaryExpression
-><TypeScript.UnaryExpression>this.asts[this.top - 1] : TypeScript.UnaryExpression
+>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : UnaryExpression
+><TypeScript.UnaryExpression>this.asts[this.top - 1] : UnaryExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >operand : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -52, +52 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ObjectLit : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] &&
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
->(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : TypeScript.UnaryExpression
-><TypeScript.UnaryExpression>this.asts[this.top - 1] : TypeScript.UnaryExpression
+>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : UnaryExpression
+><TypeScript.UnaryExpression>this.asts[this.top - 1] : UnaryExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >operand : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -27, +27 lines =@@
 >(<TypeScript.ASTList>this.asts[this.top - 0]).members.length == 0 : boolean
 >(<TypeScript.ASTList>this.asts[this.top - 0]).members.length : any
 >(<TypeScript.ASTList>this.asts[this.top - 0]).members : any
->(<TypeScript.ASTList>this.asts[this.top - 0]) : TypeScript.ASTList
-><TypeScript.ASTList>this.asts[this.top - 0] : TypeScript.ASTList
+>(<TypeScript.ASTList>this.asts[this.top - 0]) : ASTList
+><TypeScript.ASTList>this.asts[this.top - 0] : ASTList
 >TypeScript : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -35, +35 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.ObjectLit : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.Member : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1];
 >(<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand == this.asts[this.top - 1] : boolean
 >(<TypeScript.UnaryExpression>this.asts[this.top - 2]).operand : any
->(<TypeScript.UnaryExpression>this.asts[this.top - 2]) : TypeScript.UnaryExpression
-><TypeScript.UnaryExpression>this.asts[this.top - 2] : TypeScript.UnaryExpression
+>(<TypeScript.UnaryExpression>this.asts[this.top - 2]) : UnaryExpression
+><TypeScript.UnaryExpression>this.asts[this.top - 2] : UnaryExpression
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >operand : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -43, +43 lines =@@
                 this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit &&
 >this.asts[this.top - 3].nodeType === TypeScript.NodeType.ObjectLit : boolean
 >this.asts[this.top - 3].nodeType : any
->this.asts[this.top - 3] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 3] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 3 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.Name : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2];
 >(<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand == this.asts[this.top - 2] : boolean
 >(<TypeScript.UnaryExpression>this.asts[this.top - 3]).operand : any
->(<TypeScript.UnaryExpression>this.asts[this.top - 3]) : TypeScript.UnaryExpression
-><TypeScript.UnaryExpression>this.asts[this.top - 3] : TypeScript.UnaryExpression
+>(<TypeScript.UnaryExpression>this.asts[this.top - 3]) : UnaryExpression
+><TypeScript.UnaryExpression>this.asts[this.top - 3] : UnaryExpression
 >TypeScript : any
->this.asts[this.top - 3] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 3] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 3 : number
 >this.top : number
 >this : this
 >top : number
 >3 : 3
 >operand : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.ArrayLit : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0];
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand == this.asts[this.top - 0] : boolean
 >(<TypeScript.UnaryExpression>this.asts[this.top - 1]).operand : any
->(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : TypeScript.UnaryExpression
-><TypeScript.UnaryExpression>this.asts[this.top - 1] : TypeScript.UnaryExpression
+>(<TypeScript.UnaryExpression>this.asts[this.top - 1]) : UnaryExpression
+><TypeScript.UnaryExpression>this.asts[this.top - 1] : UnaryExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >operand : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0];
 >(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 === this.asts[this.top - 0] : boolean
 >(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand1 : any
->(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : TypeScript.BinaryExpression
-><TypeScript.BinaryExpression>this.asts[this.top - 1] : TypeScript.BinaryExpression
+>(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : BinaryExpression
+><TypeScript.BinaryExpression>this.asts[this.top - 1] : BinaryExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >operand1 : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Member : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0];
 >(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 === this.asts[this.top - 0] : boolean
 >(<TypeScript.BinaryExpression>this.asts[this.top - 1]).operand2 : any
->(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : TypeScript.BinaryExpression
-><TypeScript.BinaryExpression>this.asts[this.top - 1] : TypeScript.BinaryExpression
+>(<TypeScript.BinaryExpression>this.asts[this.top - 1]) : BinaryExpression
+><TypeScript.BinaryExpression>this.asts[this.top - 1] : BinaryExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >operand2 : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -39, +39 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List;
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -35, +35 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0];
 >(<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod == this.asts[this.top - 0] : boolean
 >(<TypeScript.IfStatement>this.asts[this.top - 1]).thenBod : any
->(<TypeScript.IfStatement>this.asts[this.top - 1]) : TypeScript.IfStatement
-><TypeScript.IfStatement>this.asts[this.top - 1] : TypeScript.IfStatement
+>(<TypeScript.IfStatement>this.asts[this.top - 1]) : IfStatement
+><TypeScript.IfStatement>this.asts[this.top - 1] : IfStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >thenBod : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.If &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.If : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0];
 >(<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod == this.asts[this.top - 0] : boolean
 >(<TypeScript.IfStatement>this.asts[this.top - 1]).elseBod : any
->(<TypeScript.IfStatement>this.asts[this.top - 1]) : TypeScript.IfStatement
-><TypeScript.IfStatement>this.asts[this.top - 1] : TypeScript.IfStatement
+>(<TypeScript.IfStatement>this.asts[this.top - 1]) : IfStatement
+><TypeScript.IfStatement>this.asts[this.top - 1] : IfStatement
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >elseBod : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -50, +50 lines =@@
                 this.asts[this.top].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top].nodeType : any
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -18, +18 lines =@@
 >(<TypeScript.ASTList>this.asts[this.top]).members.length === 1 : boolean
 >(<TypeScript.ASTList>this.asts[this.top]).members.length : any
 >(<TypeScript.ASTList>this.asts[this.top]).members : any
->(<TypeScript.ASTList>this.asts[this.top]) : TypeScript.ASTList
-><TypeScript.ASTList>this.asts[this.top] : TypeScript.ASTList
+>(<TypeScript.ASTList>this.asts[this.top]) : ASTList
+><TypeScript.ASTList>this.asts[this.top] : ASTList
 >TypeScript : any
->this.asts[this.top] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top : number
 >this : this
 >top : number
@@= skipped -32, +32 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.FuncDecl : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
 >(<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
 >(<TypeScript.FuncDecl>this.asts[this.top - 1]).arguments : any
->(<TypeScript.FuncDecl>this.asts[this.top - 1]) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.asts[this.top - 1] : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.asts[this.top - 1]) : FuncDecl
+><TypeScript.FuncDecl>this.asts[this.top - 1] : FuncDecl
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >arguments : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl &&
 >this.asts[this.top - 2].nodeType === TypeScript.NodeType.FuncDecl : boolean
 >this.asts[this.top - 2].nodeType : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1];
 >(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments === this.asts[this.top - 1] : boolean
 >(<TypeScript.FuncDecl>this.asts[this.top - 2]).arguments : any
->(<TypeScript.FuncDecl>this.asts[this.top - 2]) : TypeScript.FuncDecl
-><TypeScript.FuncDecl>this.asts[this.top - 2] : TypeScript.FuncDecl
+>(<TypeScript.FuncDecl>this.asts[this.top - 2]) : FuncDecl
+><TypeScript.FuncDecl>this.asts[this.top - 2] : FuncDecl
 >TypeScript : any
->this.asts[this.top - 2] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 2] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 2 : number
 >this.top : number
 >this : this
 >top : number
 >2 : 2
 >arguments : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.Call : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
 >(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
 >(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments : any
->(<TypeScript.CallExpression>this.asts[this.top - 1]) : TypeScript.CallExpression
-><TypeScript.CallExpression>this.asts[this.top - 1] : TypeScript.CallExpression
+>(<TypeScript.CallExpression>this.asts[this.top - 1]) : CallExpression
+><TypeScript.CallExpression>this.asts[this.top - 1] : CallExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >arguments : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -41, +41 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.List &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.List : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 this.asts[this.top - 1].nodeType === TypeScript.NodeType.New &&
 >this.asts[this.top - 1].nodeType === TypeScript.NodeType.New : boolean
 >this.asts[this.top - 1].nodeType : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0];
 >(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments === this.asts[this.top - 0] : boolean
 >(<TypeScript.CallExpression>this.asts[this.top - 1]).arguments : any
->(<TypeScript.CallExpression>this.asts[this.top - 1]) : TypeScript.CallExpression
-><TypeScript.CallExpression>this.asts[this.top - 1] : TypeScript.CallExpression
+>(<TypeScript.CallExpression>this.asts[this.top - 1]) : CallExpression
+><TypeScript.CallExpression>this.asts[this.top - 1] : CallExpression
 >TypeScript : any
->this.asts[this.top - 1] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 1] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 1 : number
 >this.top : number
 >this : this
 >top : number
 >1 : 1
 >arguments : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -40, +40 lines =@@
                 this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block &&
 >this.asts[this.top - 0].nodeType === TypeScript.NodeType.Block : boolean
 >this.asts[this.top - 0].nodeType : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -19, +19 lines =@@
                 (<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false;
 >(<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock === false : boolean
 >(<TypeScript.Block>this.asts[this.top - 0]).isStatementBlock : any
->(<TypeScript.Block>this.asts[this.top - 0]) : TypeScript.Block
-><TypeScript.Block>this.asts[this.top - 0] : TypeScript.Block
+>(<TypeScript.Block>this.asts[this.top - 0]) : Block
+><TypeScript.Block>this.asts[this.top - 0] : Block
 >TypeScript : any
->this.asts[this.top - 0] : TypeScript.AST
->this.asts : TypeScript.AST[]
+>this.asts[this.top - 0] : AST
+>this.asts : AST[]
 >this : this
->asts : TypeScript.AST[]
+>asts : AST[]
 >this.top - 0 : number
 >this.top : number
 >this : this
@@= skipped -18, +18 lines =@@
     }
 
     export function isValidAstNode(ast: TypeScript.ASTSpan): boolean {
->isValidAstNode : (ast: TypeScript.ASTSpan) => boolean
->ast : TypeScript.ASTSpan
+>isValidAstNode : (ast: ASTSpan) => boolean
+>ast : ASTSpan
 >TypeScript : any
 
         if (ast === null)
 >ast === null : boolean
->ast : TypeScript.ASTSpan
+>ast : ASTSpan
 
             return false;
 >false : false
@@= skipped -15, +15 lines =@@
 >ast.minChar === -1 || ast.limChar === -1 : boolean
 >ast.minChar === -1 : boolean
 >ast.minChar : any
->ast : TypeScript.ASTSpan
+>ast : ASTSpan
 >minChar : any
 >-1 : -1
 >1 : 1
 >ast.limChar === -1 : boolean
 >ast.limChar : any
->ast : TypeScript.ASTSpan
+>ast : ASTSpan
 >limChar : any
 >-1 : -1
 >1 : 1
@@= skipped -58, +58 lines =@@
     /// Return the stack of AST nodes containing "position"
     ///
     export function getAstPathToPosition(script: TypeScript.AST, pos: number, options = GetAstPathOptions.Default): TypeScript.AstPath {
->getAstPathToPosition : (script: TypeScript.AST, pos: number, options?: GetAstPathOptions) => TypeScript.AstPath
->script : TypeScript.AST
+>getAstPathToPosition : (script: AST, pos: number, options?: GetAstPathOptions) => AstPath
+>script : AST
 >TypeScript : any
 >pos : number
 >options : GetAstPathOptions
@@= skipped -11, +11 lines =@@
 >TypeScript : any
 
         var lookInComments = (comments: TypeScript.Comment[]) => {
->lookInComments : (comments: TypeScript.Comment[]) => void
->(comments: TypeScript.Comment[]) => {            if (comments && comments.length > 0) {                for (var i = 0; i < comments.length; i++) {                    var minChar = comments[i].minChar;                    var limChar = comments[i].limChar;                    if (!comments[i].isBlockComment) {                        limChar++; // For single line comments, include 1 more character (for the newline)                    }                    if (pos >= minChar && pos < limChar) {                        ctx.path.push(comments[i]);                    }                }            }        } : (comments: TypeScript.Comment[]) => void
->comments : TypeScript.Comment[]
+>lookInComments : (comments: Comment[]) => void
+>(comments: TypeScript.Comment[]) => {            if (comments && comments.length > 0) {                for (var i = 0; i < comments.length; i++) {                    var minChar = comments[i].minChar;                    var limChar = comments[i].limChar;                    if (!comments[i].isBlockComment) {                        limChar++; // For single line comments, include 1 more character (for the newline)                    }                    if (pos >= minChar && pos < limChar) {                        ctx.path.push(comments[i]);                    }                }            }        } : (comments: Comment[]) => void
+>comments : Comment[]
 >TypeScript : any
 
             if (comments && comments.length > 0) {
 >comments && comments.length > 0 : boolean
->comments : TypeScript.Comment[]
+>comments : Comment[]
 >comments.length > 0 : boolean
 >comments.length : number
->comments : TypeScript.Comment[]
+>comments : Comment[]
 >length : number
 >0 : 0
 
@@= skipped -20, +20 lines =@@
 >i < comments.length : boolean
 >i : number
 >comments.length : number
->comments : TypeScript.Comment[]
+>comments : Comment[]
 >length : number
 >i++ : number
 >i : number
@@= skipped -8, +8 lines =@@
                     var minChar = comments[i].minChar;
 >minChar : any
 >comments[i].minChar : any
->comments[i] : TypeScript.Comment
->comments : TypeScript.Comment[]
+>comments[i] : Comment
+>comments : Comment[]
 >i : number
 >minChar : any
 
                     var limChar = comments[i].limChar;
 >limChar : any
 >comments[i].limChar : any
->comments[i] : TypeScript.Comment
->comments : TypeScript.Comment[]
+>comments[i] : Comment
+>comments : Comment[]
 >i : number
 >limChar : any
 
                     if (!comments[i].isBlockComment) {
 >!comments[i].isBlockComment : boolean
 >comments[i].isBlockComment : any
->comments[i] : TypeScript.Comment
->comments : TypeScript.Comment[]
+>comments[i] : Comment
+>comments : Comment[]
 >i : number
 >isBlockComment : any
 
@@= skipped -36, +36 lines =@@
 
                         ctx.path.push(comments[i]);
 >ctx.path.push(comments[i]) : void
->ctx.path.push : (ast: TypeScript.AST) => void
+>ctx.path.push : (ast: AST) => void
 >ctx.path : AstPath
 >ctx : AstPathContext
 >path : AstPath
->push : (ast: TypeScript.AST) => void
->comments[i] : TypeScript.Comment
->comments : TypeScript.Comment[]
+>push : (ast: AST) => void
+>comments[i] : Comment
+>comments : Comment[]
 >i : number
                     }
                 }
@@= skipped -14, +14 lines =@@
         }
 
         var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) => TypeScript.AST
->function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {            if (isValidAstNode(cur)) {                // Add "cur" to the stack if it contains our position                // For "identifier" nodes, we need a special case: A position equal to "limChar" is                // valid, since the position corresponds to a caret position (in between characters)                // For example:                //  bar                //  0123                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid                var inclusive =                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||                    cur.nodeType === TypeScript.NodeType.Name ||                    pos === script.limChar; // Special "EOF" case                var minChar = cur.minChar;                var limChar = cur.limChar + (inclusive ? 1 : 0)                if (pos >= minChar && pos < limChar) {                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it's better                    //       than top of the stack.                    var previous = ctx.path.ast();                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {                        ctx.path.push(cur);                    }                    else {                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");                    }                }                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually                if (pos < limChar) {                    lookInComments(cur.preComments);                }                if (pos >= minChar) {                    lookInComments(cur.postComments);                }                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {                    // Don't go further down the tree if pos is outside of [minChar, limChar]                    walker.options.goChildren = (minChar <= pos && pos <= limChar);                }            }            return cur;        } : (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) => TypeScript.AST
->cur : TypeScript.AST
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) {            if (isValidAstNode(cur)) {                // Add "cur" to the stack if it contains our position                // For "identifier" nodes, we need a special case: A position equal to "limChar" is                // valid, since the position corresponds to a caret position (in between characters)                // For example:                //  bar                //  0123                // If "position == 3", the caret is at the "right" of the "r" character, which should be considered valid                var inclusive =                    hasFlag(options, GetAstPathOptions.EdgeInclusive) ||                    cur.nodeType === TypeScript.NodeType.Name ||                    pos === script.limChar; // Special "EOF" case                var minChar = cur.minChar;                var limChar = cur.limChar + (inclusive ? 1 : 0)                if (pos >= minChar && pos < limChar) {                    // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it's better                    //       than top of the stack.                    var previous = ctx.path.ast();                    if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {                        ctx.path.push(cur);                    }                    else {                        //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");                    }                }                // The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually                if (pos < limChar) {                    lookInComments(cur.preComments);                }                if (pos >= minChar) {                    lookInComments(cur.postComments);                }                if (!hasFlag(options, GetAstPathOptions.DontPruneSearchBasedOnPosition)) {                    // Don't go further down the tree if pos is outside of [minChar, limChar]                    walker.options.goChildren = (minChar <= pos && pos <= limChar);                }            }            return cur;        } : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>cur : AST
 >TypeScript : any
->parent : TypeScript.AST
+>parent : AST
 >TypeScript : any
 >walker : IAstWalker
 
             if (isValidAstNode(cur)) {
 >isValidAstNode(cur) : boolean
->isValidAstNode : (ast: TypeScript.ASTSpan) => boolean
->cur : TypeScript.AST
+>isValidAstNode : (ast: ASTSpan) => boolean
+>cur : AST
 
                 // Add "cur" to the stack if it contains our position
                 // For "identifier" nodes, we need a special case: A position equal to "limChar" is
@@= skipped -36, +36 lines =@@
                     cur.nodeType === TypeScript.NodeType.Name ||
 >cur.nodeType === TypeScript.NodeType.Name : boolean
 >cur.nodeType : any
->cur : TypeScript.AST
+>cur : AST
 >nodeType : any
 >TypeScript.NodeType.Name : any
 >TypeScript.NodeType : any
@@= skipped -12, +12 lines =@@
 >pos === script.limChar : boolean
 >pos : number
 >script.limChar : any
->script : TypeScript.AST
+>script : AST
 >limChar : any
 
                 var minChar = cur.minChar;
 >minChar : any
 >cur.minChar : any
->cur : TypeScript.AST
+>cur : AST
 >minChar : any
 
                 var limChar = cur.limChar + (inclusive ? 1 : 0)
 >limChar : any
 >cur.limChar + (inclusive ? 1 : 0) : any
 >cur.limChar : any
->cur : TypeScript.AST
+>cur : AST
 >limChar : any
 >(inclusive ? 1 : 0) : 0 | 1
 >inclusive ? 1 : 0 : 0 | 1
@@= skipped -33, +33 lines =@@
                     // TODO: Since AST is sometimes not correct wrt to position, only add "cur" if it's better
                     //       than top of the stack.
                     var previous = ctx.path.ast();
->previous : TypeScript.AST
->ctx.path.ast() : TypeScript.AST
->ctx.path.ast : () => TypeScript.AST
+>previous : AST
+>ctx.path.ast() : AST
+>ctx.path.ast : () => AST
 >ctx.path : AstPath
 >ctx : AstPathContext
 >path : AstPath
->ast : () => TypeScript.AST
+>ast : () => AST
 
                     if (previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar)) {
 >previous == null || (cur.minChar >= previous.minChar && cur.limChar <= previous.limChar) : boolean
 >previous == null : boolean
->previous : TypeScript.AST
+>previous : AST
 >(cur.minChar >= previous.minChar && cur.limChar <= previous.limChar) : boolean
 >cur.minChar >= previous.minChar && cur.limChar <= previous.limChar : boolean
 >cur.minChar >= previous.minChar : boolean
 >cur.minChar : any
->cur : TypeScript.AST
+>cur : AST
 >minChar : any
 >previous.minChar : any
->previous : TypeScript.AST
+>previous : AST
 >minChar : any
 >cur.limChar <= previous.limChar : boolean
 >cur.limChar : any
->cur : TypeScript.AST
+>cur : AST
 >limChar : any
 >previous.limChar : any
->previous : TypeScript.AST
+>previous : AST
 >limChar : any
 
                         ctx.path.push(cur);
 >ctx.path.push(cur) : void
->ctx.path.push : (ast: TypeScript.AST) => void
+>ctx.path.push : (ast: AST) => void
 >ctx.path : AstPath
 >ctx : AstPathContext
 >path : AstPath
->push : (ast: TypeScript.AST) => void
->cur : TypeScript.AST
+>push : (ast: AST) => void
+>cur : AST
                     }
                     else {
                         //logger.log("TODO: Ignoring node because minChar, limChar not better than previous node in stack");
@@= skipped -51, +51 lines =@@
 
                     lookInComments(cur.preComments);
 >lookInComments(cur.preComments) : void
->lookInComments : (comments: TypeScript.Comment[]) => void
+>lookInComments : (comments: Comment[]) => void
 >cur.preComments : any
->cur : TypeScript.AST
+>cur : AST
 >preComments : any
                 }
                 if (pos >= minChar) {
@@= skipped -12, +12 lines =@@
 
                     lookInComments(cur.postComments);
 >lookInComments(cur.postComments) : void
->lookInComments : (comments: TypeScript.Comment[]) => void
+>lookInComments : (comments: Comment[]) => void
 >cur.postComments : any
->cur : TypeScript.AST
+>cur : AST
 >postComments : any
                 }
 
@@= skipped -34, +34 lines =@@
                 }
             }
             return cur;
->cur : TypeScript.AST
+>cur : AST
         }
 
         var ctx = new AstPathContext();
@@= skipped -16, +16 lines =@@
 >TypeScript : typeof TypeScript
 >getAstWalkerFactory : any
 >walk : any
->script : TypeScript.AST
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: IAstWalker) => TypeScript.AST
+>script : AST
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
 >ctx : AstPathContext
 
         return ctx.path;
@@= skipped -15, +15 lines =@@
     // This is used when "position" might be inside a comment or string, etc.
     //
     export function getTokenizationOffset(script: TypeScript.Script, position: number): number {
->getTokenizationOffset : (script: TypeScript.Script, position: number) => number
->script : TypeScript.Script
+>getTokenizationOffset : (script: Script, position: number) => number
+>script : Script
 >TypeScript : any
 >position : number
 
@@= skipped -10, +10 lines =@@
 >0 : 0
 
         var pre = (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {            if (TypeScript.isValidAstNode(cur)) {                // Did we find a closer offset?                if (cur.minChar <= position) {                    bestOffset = max(bestOffset, cur.minChar);                }                // Stop the walk if this node is not related to "minChar"                if (cur.minChar > position || cur.limChar < bestOffset) {                    walker.options.goChildren = false;                }            }            return cur;        } : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->cur : TypeScript.AST
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>(cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker): TypeScript.AST => {            if (TypeScript.isValidAstNode(cur)) {                // Did we find a closer offset?                if (cur.minChar <= position) {                    bestOffset = max(bestOffset, cur.minChar);                }                // Stop the walk if this node is not related to "minChar"                if (cur.minChar > position || cur.limChar < bestOffset) {                    walker.options.goChildren = false;                }            }            return cur;        } : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>cur : AST
 >TypeScript : any
->parent : TypeScript.AST
+>parent : AST
 >TypeScript : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >TypeScript : any
 >TypeScript : any
 
             if (TypeScript.isValidAstNode(cur)) {
 >TypeScript.isValidAstNode(cur) : boolean
->TypeScript.isValidAstNode : (ast: TypeScript.ASTSpan) => boolean
+>TypeScript.isValidAstNode : (ast: ASTSpan) => boolean
 >TypeScript : typeof TypeScript
->isValidAstNode : (ast: TypeScript.ASTSpan) => boolean
->cur : TypeScript.AST
+>isValidAstNode : (ast: ASTSpan) => boolean
+>cur : AST
 
                 // Did we find a closer offset?
                 if (cur.minChar <= position) {
 >cur.minChar <= position : boolean
 >cur.minChar : any
->cur : TypeScript.AST
+>cur : AST
 >minChar : any
 >position : number
 
@@= skipped -32, +32 lines =@@
 >max : (a: number, b: number) => number
 >bestOffset : number
 >cur.minChar : any
->cur : TypeScript.AST
+>cur : AST
 >minChar : any
                 }
 
@@= skipped -9, +9 lines =@@
 >cur.minChar > position || cur.limChar < bestOffset : boolean
 >cur.minChar > position : boolean
 >cur.minChar : any
->cur : TypeScript.AST
+>cur : AST
 >minChar : any
 >position : number
 >cur.limChar < bestOffset : boolean
 >cur.limChar : any
->cur : TypeScript.AST
+>cur : AST
 >limChar : any
 >bestOffset : number
 
@@= skipped -13, +13 lines =@@
 >walker.options.goChildren = false : false
 >walker.options.goChildren : any
 >walker.options : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >options : any
 >goChildren : any
 >false : false
@@= skipped -8, +8 lines =@@
             }
 
             return cur;
->cur : TypeScript.AST
+>cur : AST
         }
 
         TypeScript.getAstWalkerFactory().walk(script, pre);
@@= skipped -11, +11 lines =@@
 >TypeScript : typeof TypeScript
 >getAstWalkerFactory : any
 >walk : any
->script : TypeScript.Script
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
+>script : Script
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
 
         return bestOffset;
 >bestOffset : number
@@= skipped -11, +11 lines =@@
     /// Simple function to Walk an AST using a simple callback function.
     ///
     export function walkAST(ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void ): void {
->walkAST : (ast: TypeScript.AST, callback: (path: AstPath, walker: TypeScript.IAstWalker) => void) => void
->ast : TypeScript.AST
+>walkAST : (ast: AST, callback: (path: AstPath, walker: IAstWalker) => void) => void
+>ast : AST
 >TypeScript : any
->callback : (path: AstPath, walker: TypeScript.IAstWalker) => void
+>callback : (path: AstPath, walker: IAstWalker) => void
 >path : AstPath
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >TypeScript : any
 
         var pre = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.push(cur);            callback(path, walker);            return cur;        } : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->cur : TypeScript.AST
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.push(cur);            callback(path, walker);            return cur;        } : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>cur : AST
 >TypeScript : any
->parent : TypeScript.AST
+>parent : AST
 >TypeScript : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >TypeScript : any
 
             var path: TypeScript.AstPath = walker.state;
 >path : AstPath
 >TypeScript : any
 >walker.state : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >state : any
 
             path.push(cur);
 >path.push(cur) : void
->path.push : (ast: TypeScript.AST) => void
+>path.push : (ast: AST) => void
 >path : AstPath
->push : (ast: TypeScript.AST) => void
->cur : TypeScript.AST
+>push : (ast: AST) => void
+>cur : AST
 
             callback(path, walker);
 >callback(path, walker) : void
->callback : (path: AstPath, walker: TypeScript.IAstWalker) => void
+>callback : (path: AstPath, walker: IAstWalker) => void
 >path : AstPath
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 
             return cur;
->cur : TypeScript.AST
+>cur : AST
         }
         var post = function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {
->post : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.pop();            return cur;        } : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->cur : TypeScript.AST
+>post : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>function (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) {            var path: TypeScript.AstPath = walker.state;            path.pop();            return cur;        } : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>cur : AST
 >TypeScript : any
->parent : TypeScript.AST
+>parent : AST
 >TypeScript : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >TypeScript : any
 
             var path: TypeScript.AstPath = walker.state;
 >path : AstPath
 >TypeScript : any
 >walker.state : any
->walker : TypeScript.IAstWalker
+>walker : IAstWalker
 >state : any
 
             path.pop();
->path.pop() : TypeScript.AST
->path.pop : () => TypeScript.AST
+>path.pop() : AST
+>path.pop : () => AST
 >path : AstPath
->pop : () => TypeScript.AST
+>pop : () => AST
 
             return cur;
->cur : TypeScript.AST
+>cur : AST
         }
 
         var path = new AstPath();
@@= skipped -81, +81 lines =@@
 >TypeScript : typeof TypeScript
 >getAstWalkerFactory : any
 >walk : any
->ast : TypeScript.AST
->pre : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
->post : (cur: TypeScript.AST, parent: TypeScript.AST, walker: TypeScript.IAstWalker) => TypeScript.AST
+>ast : AST
+>pre : (cur: AST, parent: AST, walker: IAstWalker) => AST
+>post : (cur: AST, parent: AST, walker: IAstWalker) => AST
 >path : AstPath
     }
 }
