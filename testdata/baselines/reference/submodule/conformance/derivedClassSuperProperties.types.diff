--- old.derivedClassSuperProperties.types
+++ new.derivedClassSuperProperties.types
@@= skipped -858, +858 lines =@@
 
     constructor() {
         const obj = {
->obj : { getProp(): any; }
->{            getProp() {                return this;            },        } : { getProp(): any; }
+>obj : { getProp: () => any; }
+>{            getProp() {                return this;            },        } : { getProp: () => any; }
 
             getProp() {
 >getProp : () => any
@@= skipped -22, +22 lines =@@
 >b : any
 
 const DerivedWithLoops = [
->DerivedWithLoops : (typeof (Anonymous class))[]
->[    class extends Base {        prop = true;        constructor() {            for(super();;) {}        }    },    class extends Base {        prop = true;        constructor() {            for(a; super();) {}        }    },    class extends Base {        prop = true;        constructor() {            for(a; b; super()) {}        }    },    class extends Base {        prop = true;        constructor() {            for(; ; super()) { break; }        }    },    class extends Base {        prop = true;        constructor() {            for (const x of super()) {}        }    },    class extends Base {        prop = true;        constructor() {            while (super()) {}        }    },    class extends Base {        prop = true;        constructor() {            do {} while (super());        }    },    class extends Base {        prop = true;        constructor() {            if (super()) {}        }    },    class extends Base {        prop = true;        constructor() {            switch (super()) {}        }    },] : (typeof (Anonymous class))[]
+>DerivedWithLoops : typeof (Anonymous class)[]
+>[    class extends Base {        prop = true;        constructor() {            for(super();;) {}        }    },    class extends Base {        prop = true;        constructor() {            for(a; super();) {}        }    },    class extends Base {        prop = true;        constructor() {            for(a; b; super()) {}        }    },    class extends Base {        prop = true;        constructor() {            for(; ; super()) { break; }        }    },    class extends Base {        prop = true;        constructor() {            for (const x of super()) {}        }    },    class extends Base {        prop = true;        constructor() {            while (super()) {}        }    },    class extends Base {        prop = true;        constructor() {            do {} while (super());        }    },    class extends Base {        prop = true;        constructor() {            if (super()) {}        }    },    class extends Base {        prop = true;        constructor() {            switch (super()) {}        }    },] : typeof (Anonymous class)[]
 
     class extends Base {
 >class extends Base {        prop = true;        constructor() {            for(super();;) {}        }    } : typeof (Anonymous class)
