//// [tests/cases/conformance/salsa/typeFromPropertyAssignment22.ts] ////

=== npm-install.js ===
function Installer () {
>Installer : () => void

    this.args = 0
>this.args = 0 : 0
>this.args : any
>this : any
>args : any
>0 : 0
}
Installer.prototype.loadArgMetadata = function (next) {
>Installer.prototype.loadArgMetadata = function (next) {    // ArrowFunction isn't treated as a this-container    (args) => {        this.args = 'hi'        this.newProperty = 1    }} : (next: any) => void
>Installer.prototype.loadArgMetadata : any
>Installer.prototype : any
>Installer : () => void
>prototype : any
>loadArgMetadata : any
>function (next) {    // ArrowFunction isn't treated as a this-container    (args) => {        this.args = 'hi'        this.newProperty = 1    }} : (next: any) => void
>next : any

    // ArrowFunction isn't treated as a this-container
    (args) => {
>(args) => {        this.args = 'hi'        this.newProperty = 1    } : (args: any) => void
>args : any

        this.args = 'hi'
>this.args = 'hi' : "hi"
>this.args : any
>this : any
>args : any
>'hi' : "hi"

        this.newProperty = 1
>this.newProperty = 1 : 1
>this.newProperty : any
>this : any
>newProperty : any
>1 : 1
    }
}
var i = new Installer()
>i : any
>new Installer() : any
>Installer : () => void

i.newProperty = i.args // ok, number ==> number | undefined
>i.newProperty = i.args : any
>i.newProperty : any
>i : any
>newProperty : any
>i.args : any
>i : any
>args : any

