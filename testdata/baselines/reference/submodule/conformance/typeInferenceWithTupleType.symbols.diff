--- old.typeInferenceWithTupleType.symbols
+++ new.typeInferenceWithTupleType.symbols
@@= skipped -42, +42 lines =@@
 >U : Symbol(U, Decl(typeInferenceWithTupleType.ts, 8, 15))
 
     if (array1.length != array2.length) {
->array1.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>array1.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
->array2.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
+>array2.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array2 : Symbol(array2, Decl(typeInferenceWithTupleType.ts, 8, 31))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return [[undefined, undefined]];
 >undefined : Symbol(undefined)
@@= skipped -13, +13 lines =@@
     }
     var length = array1.length;
 >length : Symbol(length, Decl(typeInferenceWithTupleType.ts, 12, 7))
->array1.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>array1.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
     var zipResult: [[T, U]];
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 13, 7))
@@= skipped -16, +16 lines =@@
 >i : Symbol(i, Decl(typeInferenceWithTupleType.ts, 14, 12))
 
         zipResult.push([array1[i], array2[i]]);
->zipResult.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>zipResult.push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >zipResult : Symbol(zipResult, Decl(typeInferenceWithTupleType.ts, 13, 7))
->push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
+>push : Symbol(push, Decl(lib.es5.d.ts, --, --))
 >array1 : Symbol(array1, Decl(typeInferenceWithTupleType.ts, 8, 19))
 >i : Symbol(i, Decl(typeInferenceWithTupleType.ts, 14, 12))
 >array2 : Symbol(array2, Decl(typeInferenceWithTupleType.ts, 8, 31))
