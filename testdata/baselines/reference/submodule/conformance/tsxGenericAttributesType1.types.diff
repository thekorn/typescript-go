--- old.tsxGenericAttributesType1.types
+++ new.tsxGenericAttributesType1.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 const decorator = function <T>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
->decorator : <T>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
->function <T>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props}></Component>} : <T>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
->Component : React.StatelessComponent<T>
+>decorator : <T>(Component: StatelessComponent<T>) => StatelessComponent<T>
+>function <T>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props}></Component>} : <T>(Component: StatelessComponent<T>) => StatelessComponent<T>
+>Component : StatelessComponent<T>
 >React : any
 >React : any
 
     return (props) => <Component {...props}></Component>
->(props) => <Component {...props}></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
->props : T & { children?: React.ReactNode; }
-><Component {...props}></Component> : JSX.Element
->Component : React.StatelessComponent<T>
->props : T & { children?: React.ReactNode; }
->Component : React.StatelessComponent<T>
+>(props) => <Component {...props}></Component> : (props: T & { children?: ReactNode; }) => Element
+>props : T & { children?: ReactNode; }
+><Component {...props}></Component> : Element
+>Component : StatelessComponent<T>
+>props : T & { children?: ReactNode; }
+>Component : StatelessComponent<T>
 
 };
 
 const decorator2 = function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
->decorator2 : <T extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
->function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props} x={2} ></Component>} : <T extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
+>decorator2 : <T extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
+>function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props} x={2} ></Component>} : <T extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
 >x : number
->Component : React.StatelessComponent<T>
+>Component : StatelessComponent<T>
 >React : any
 >React : any
 
     return (props) => <Component {...props} x={2} ></Component>
->(props) => <Component {...props} x={2} ></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
->props : T & { children?: React.ReactNode; }
-><Component {...props} x={2} ></Component> : JSX.Element
->Component : React.StatelessComponent<T>
->props : T & { children?: React.ReactNode; }
+>(props) => <Component {...props} x={2} ></Component> : (props: T & { children?: ReactNode; }) => Element
+>props : T & { children?: ReactNode; }
+><Component {...props} x={2} ></Component> : Element
+>Component : StatelessComponent<T>
+>props : T & { children?: ReactNode; }
 >x : number
 >2 : 2
->Component : React.StatelessComponent<T>
+>Component : StatelessComponent<T>
 
 };
 
 const decorator3 = function <T extends { x: number }, U extends { x: number } >(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
->decorator3 : <T extends { x: number; }, U extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
->function <T extends { x: number }, U extends { x: number } >(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component x={2} {...props} ></Component>} : <T extends { x: number; }, U extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
+>decorator3 : <T extends { x: number; }, U extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
+>function <T extends { x: number }, U extends { x: number } >(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component x={2} {...props} ></Component>} : <T extends { x: number; }, U extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
 >x : number
 >x : number
->Component : React.StatelessComponent<T>
+>Component : StatelessComponent<T>
 >React : any
 >React : any
 
     return (props) => <Component x={2} {...props} ></Component>
->(props) => <Component x={2} {...props} ></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
->props : T & { children?: React.ReactNode; }
-><Component x={2} {...props} ></Component> : JSX.Element
->Component : React.StatelessComponent<T>
+>(props) => <Component x={2} {...props} ></Component> : (props: T & { children?: ReactNode; }) => Element
+>props : T & { children?: ReactNode; }
+><Component x={2} {...props} ></Component> : Element
+>Component : StatelessComponent<T>
 >x : number
 >2 : 2
->props : T & { children?: React.ReactNode; }
->Component : React.StatelessComponent<T>
+>props : T & { children?: ReactNode; }
+>Component : StatelessComponent<T>
 
 };
