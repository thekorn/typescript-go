//// [tests/cases/conformance/salsa/thisPropertyAssignment.ts] ////

=== a.js ===
// This test is asserting that a single property/element access
// on `this` is a special assignment declaration, but chaining
// off that does not create additional declarations. Iâ€™m not sure
// if it needs to be that way in JavaScript; the test simply
// ensures no accidental changes were introduced while allowing
// element access assignments to create declarations.

this.x = {};
>this.x = {} : {}
>this.x : any
>this : typeof globalThis
>x : any
>{} : {}

this.x.y = {};
>this.x.y = {} : {}
>this.x.y : any
>this.x : any
>this : typeof globalThis
>x : any
>y : any
>{} : {}

this["y"] = {};
>this["y"] = {} : {}
>this["y"] : any
>this : typeof globalThis
>"y" : "y"
>{} : {}

this["y"]["z"] = {};
>this["y"]["z"] = {} : {}
>this["y"]["z"] : any
>this["y"] : any
>this : typeof globalThis
>"y" : "y"
>"z" : "z"
>{} : {}

/** @constructor */
function F() {
>F : () => void

  this.a = {};
>this.a = {} : {}
>this.a : any
>this : any
>a : any
>{} : {}

  this.a.b = {};
>this.a.b = {} : {}
>this.a.b : any
>this.a : any
>this : any
>a : any
>b : any
>{} : {}

  this["b"] = {};
>this["b"] = {} : {}
>this["b"] : any
>this : any
>"b" : "b"
>{} : {}

  this["b"]["c"] = {};
>this["b"]["c"] = {} : {}
>this["b"]["c"] : any
>this["b"] : any
>this : any
>"b" : "b"
>"c" : "c"
>{} : {}
}

const f = new F();
>f : any
>new F() : any
>F : () => void

f.a;
>f.a : any
>f : any
>a : any

f.b;
>f.b : any
>f : any
>b : any

