//// [tests/cases/conformance/jsx/tsxUnionElementType5.tsx] ////

=== file.tsx ===
import React = require('react');
>React : typeof __React

function EmptySFC1() {
>EmptySFC1 : () => Element

    return <div>hello</div>;
><div>hello</div> : Element
>div : any
>div : any
}

function EmptySFC2() {
>EmptySFC2 : () => Element

    return <div>Hello</div>;
><div>Hello</div> : Element
>div : any
>div : any
}

function SFC2(prop: { x: boolean }) {
>SFC2 : (prop: { x: boolean; }) => Element
>prop : { x: boolean; }
>x : boolean

    return <h1>World</h1>;
><h1>World</h1> : Element
>h1 : any
>h1 : any
}

var EmptySFCComp = EmptySFC1 || EmptySFC2;
>EmptySFCComp : () => Element
>EmptySFC1 || EmptySFC2 : () => Element
>EmptySFC1 : () => Element
>EmptySFC2 : () => Element

var SFC2AndEmptyComp = SFC2 || EmptySFC1;
>SFC2AndEmptyComp : (prop: { x: boolean; }) => Element
>SFC2 || EmptySFC1 : (prop: { x: boolean; }) => Element
>SFC2 : (prop: { x: boolean; }) => Element
>EmptySFC1 : () => Element

let a = <EmptySFCComp />
>a : Element
><EmptySFCComp /> : Element
>EmptySFCComp : () => Element

let a1 = <EmptySFCComp data-prop />
>a1 : Element
><EmptySFCComp data-prop /> : Element
>EmptySFCComp : () => Element
>data-prop : true

let b = <SFC2AndEmptyComp x />
>b : Element
><SFC2AndEmptyComp x /> : Element
>SFC2AndEmptyComp : (prop: { x: boolean; }) => Element
>x : true

