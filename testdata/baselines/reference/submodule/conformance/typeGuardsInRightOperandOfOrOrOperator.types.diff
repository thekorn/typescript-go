--- old.typeGuardsInRightOperandOfOrOrOperator.types
+++ new.typeGuardsInRightOperandOfOrOrOperator.types
@@= skipped -4, +4 lines =@@
 // the type of a variable or parameter is narrowed by any type guard in the left operand when false, 
 // provided the right operand contains no assignments to the variable or parameter.
 function foo(x: number | string) {
->foo : (x: number | string) => boolean
+>foo : (x: string | number) => boolean
 >x : string | number
 
     return typeof x !== "string" || x.length === 10; // string
@@= skipped -16, +16 lines =@@
 >10 : 10
 }
 function foo2(x: number | string) {
->foo2 : (x: number | string) => number | true
+>foo2 : (x: string | number) => number | true
 >x : string | number
 
     // modify x in right hand operand
@@= skipped -19, +19 lines =@@
 >x : number
 }
 function foo3(x: number | string) {
->foo3 : (x: number | string) => string | true
+>foo3 : (x: string | number) => string | true
 >x : string | number
 
     // modify x in right hand operand with string type itself
@@= skipped -19, +19 lines =@@
 >x : string
 }
 function foo4(x: number | string | boolean) {
->foo4 : (x: number | string | boolean) => boolean
+>foo4 : (x: string | number | boolean) => boolean
 >x : string | number | boolean
 
     return typeof x === "string" // string | number | boolean
@@= skipped -21, +21 lines =@@
 >x : boolean
 }
 function foo5(x: number | string | boolean) {
->foo5 : (x: number | string | boolean) => number | boolean
+>foo5 : (x: string | number | boolean) => number | boolean
 >x : string | number | boolean
 
     // usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
@@= skipped -32, +32 lines =@@
 >x : boolean
 }
 function foo6(x: number | string | boolean) {
->foo6 : (x: number | string | boolean) => boolean
+>foo6 : (x: string | number | boolean) => boolean
 >x : string | number | boolean
 
     // Mixing typeguard
@@= skipped -28, +28 lines =@@
 >10 : 10
 }
 function foo7(x: number | string | boolean) {
->foo7 : (x: number | string | boolean) => string | number | true
+>foo7 : (x: string | number | boolean) => string | number | true
 >x : string | number | boolean
 
     var y: number| boolean | string;
