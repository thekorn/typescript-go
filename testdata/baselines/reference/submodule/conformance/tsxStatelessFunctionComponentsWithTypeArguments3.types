//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments3.tsx] ////

=== file.tsx ===
import React = require('react')
>React : typeof __React

declare function OverloadComponent<U>(): JSX.Element;
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>JSX : any

declare function OverloadComponent<U>(attr: {b: U, a?: string, "ignore-prop": boolean}): JSX.Element;
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>attr : { b: U; a?: string; "ignore-prop": boolean; }
>b : U
>a : string
>"ignore-prop" : boolean
>JSX : any

declare function OverloadComponent<T, U>(attr: {b: U, a: T}): JSX.Element;
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>attr : { b: U; a: T; }
>b : U
>a : T
>JSX : any

// OK
function Baz<T extends {b: number}, U extends {a: boolean, b:string}>(arg1: T, arg2: U) {
>Baz : <T extends { b: number; }, U extends { a: boolean; b: string; }>(arg1: T, arg2: U) => void
>b : number
>a : boolean
>b : string
>arg1 : T
>arg2 : U

    let a0 = <OverloadComponent {...arg1} a="hello" ignore-prop />;
>a0 : Element
><OverloadComponent {...arg1} a="hello" ignore-prop /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg1 : T
>a : string
>ignore-prop : true

    let a1 = <OverloadComponent {...arg2} ignore-pro="hello world" />;
>a1 : Element
><OverloadComponent {...arg2} ignore-pro="hello world" /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg2 : U
>ignore-pro : string

    let a2 = <OverloadComponent {...arg2} />;
>a2 : Element
><OverloadComponent {...arg2} /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg2 : U

    let a3 = <OverloadComponent {...arg1} ignore-prop />;
>a3 : Element
><OverloadComponent {...arg1} ignore-prop /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg1 : T
>ignore-prop : true

    let a4 = <OverloadComponent />;
>a4 : Element
><OverloadComponent /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }

    let a5 = <OverloadComponent {...arg2} ignore-prop="hello" {...arg1} />;
>a5 : Element
><OverloadComponent {...arg2} ignore-prop="hello" {...arg1} /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg2 : U
>ignore-prop : string
>arg1 : T

    let a6 = <OverloadComponent {...arg2} ignore-prop {...arg1} />;
>a6 : Element
><OverloadComponent {...arg2} ignore-prop {...arg1} /> : Element
>OverloadComponent : { <U>(): Element; <U>(attr: { b: U; a?: string; "ignore-prop": boolean; }): Element; <T, U>(attr: { b: U; a: T; }): Element; }
>arg2 : U
>ignore-prop : true
>arg1 : T
}

declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
>l : { func: (arg: U) => void; }
>func : (arg: U) => void
>arg : U
>JSX : any

declare function Link<U>(l: {func: (arg1:U, arg2: string)=>void}): JSX.Element;
>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
>l : { func: (arg1: U, arg2: string) => void; }
>func : (arg1: U, arg2: string) => void
>arg1 : U
>arg2 : string
>JSX : any

function createLink(func: (a: number)=>void) {
>createLink : (func: (a: number) => void) => void
>func : (a: number) => void
>a : number

    let o = <Link func={func} />
>o : Element
><Link func={func} /> : Element
>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
>func : (a: number) => void
>func : (a: number) => void

    let o1 = <Link func={(a:number, b:string)=>{}} />;
>o1 : Element
><Link func={(a:number, b:string)=>{}} /> : Element
>Link : { <U>(l: { func: (arg: U) => void; }): Element; <U>(l: { func: (arg1: U, arg2: string) => void; }): Element; }
>func : (a: number, b: string) => void
>(a:number, b:string)=>{} : (a: number, b: string) => void
>a : number
>b : string
}
