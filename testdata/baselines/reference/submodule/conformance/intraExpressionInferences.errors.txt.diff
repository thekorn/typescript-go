--- old.intraExpressionInferences.errors.txt
+++ new.intraExpressionInferences.errors.txt
@@= skipped -0, +0 lines =@@
 intraExpressionInferences.ts(131,5): error TS2322: Type '(inputs: Unwrap<{ num: Wrapper<number>; str: Wrapper<string>; }>) => { bool: any; str: number; }' is not assignable to type '(inputs: Unwrap<{ num: Wrapper<number>; str: Wrapper<string>; }>) => Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>'.
-  Call signature return types '{ bool: any; str: number; }' and 'Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>' are incompatible.
-    The types of 'str' are incompatible between these types.
+  Type '{ bool: any; str: number; }' is not assignable to type 'Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>'.
+    Types of property 'str' are incompatible.
       Type 'number' is not assignable to type 'string'.
 intraExpressionInferences.ts(133,26): error TS2339: Property 'nonexistent' does not exist on type 'Unwrap<{ num: Wrapper<number>; str: Wrapper<string>; }>'.
 
@@= skipped -138, +138 lines =@@
         map(inputs) {
         ~~~
 !!! error TS2322: Type '(inputs: Unwrap<{ num: Wrapper<number>; str: Wrapper<string>; }>) => { bool: any; str: number; }' is not assignable to type '(inputs: Unwrap<{ num: Wrapper<number>; str: Wrapper<string>; }>) => Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>'.
-!!! error TS2322:   Call signature return types '{ bool: any; str: number; }' and 'Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>' are incompatible.
-!!! error TS2322:     The types of 'str' are incompatible between these types.
+!!! error TS2322:   Type '{ bool: any; str: number; }' is not assignable to type 'Unwrap<{ bool: Wrapper<boolean>; str: Wrapper<string>; }>'.
+!!! error TS2322:     Types of property 'str' are incompatible.
 !!! error TS2322:       Type 'number' is not assignable to type 'string'.
 !!! related TS6500 intraExpressionInferences.ts:113:5: The expected type comes from property 'map' which is declared here on type 'MappingComponent<{ num: Wrapper<number>; str: Wrapper<string>; }, { bool: Wrapper<boolean>; str: Wrapper<string>; }>'
             return {
