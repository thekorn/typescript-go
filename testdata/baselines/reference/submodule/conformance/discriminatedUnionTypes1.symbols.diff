--- old.discriminatedUnionTypes1.symbols
+++ new.discriminatedUnionTypes1.symbols
@@= skipped -4, +4 lines =@@
 >Square : Symbol(Square, Decl(discriminatedUnionTypes1.ts, 0, 0))
 
     kind: "square";
->kind : Symbol(Square.kind, Decl(discriminatedUnionTypes1.ts, 0, 18))
+>kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 0, 18))
 
     size: number;
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 }
 
 interface Rectangle {
 >Rectangle : Symbol(Rectangle, Decl(discriminatedUnionTypes1.ts, 3, 1))
 
     kind: "rectangle";
->kind : Symbol(Rectangle.kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
+>kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
 
     width: number;
->width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
 
     height: number;
->height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 }
 
 interface Circle {
 >Circle : Symbol(Circle, Decl(discriminatedUnionTypes1.ts, 9, 1))
 
     kind: "circle";
->kind : Symbol(Circle.kind, Decl(discriminatedUnionTypes1.ts, 11, 18))
+>kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18))
 
     radius: number;
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 }
 
 type Shape = Square | Rectangle | Circle;
@@= skipped -46, +46 lines =@@
 >kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21), Decl(discriminatedUnionTypes1.ts, 0, 18))
 
         return s.size * s.size;
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
     }
     else if (s.kind === "circle") {
 >s.kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21))
@@= skipped -13, +13 lines =@@
 >kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21))
 
         return Math.PI * s.radius * s.radius;
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
     }
     else if (s.kind === "rectangle") {
->s.kind : Symbol(Rectangle.kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
+>s.kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->kind : Symbol(Rectangle.kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
+>kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 5, 21))
 
         return s.width * s.height;
->s.width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
->s.height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 18, 15))
->height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
     }
     else {
         return 0;
@@= skipped -39, +39 lines =@@
 >kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21), Decl(discriminatedUnionTypes1.ts, 0, 18))
 
         case "square": return s.size * s.size;
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 
         case "rectangle": return s.width * s.height;
->s.width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
->s.height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 
         case "circle": return Math.PI * s.radius * s.radius;
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 33, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
     }
 }
 
@@= skipped -48, +48 lines =@@
 >kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21), Decl(discriminatedUnionTypes1.ts, 0, 18))
 
         case "square": return s.size * s.size;
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 
         case "rectangle": return s.width * s.height;
->s.width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
->s.height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 
         case "circle": return Math.PI * s.radius * s.radius;
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 45, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 
         default: return assertNever(s);
 >assertNever : Symbol(assertNever, Decl(discriminatedUnionTypes1.ts, 39, 1))
@@= skipped -43, +43 lines =@@
 >kind : Symbol(kind, Decl(discriminatedUnionTypes1.ts, 11, 18), Decl(discriminatedUnionTypes1.ts, 5, 21), Decl(discriminatedUnionTypes1.ts, 0, 18))
 
         case "square": return s.size * s.size;
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
->s.size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>s.size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->size : Symbol(Square.size, Decl(discriminatedUnionTypes1.ts, 1, 19))
+>size : Symbol(size, Decl(discriminatedUnionTypes1.ts, 1, 19))
 
         case "rectangle": return s.width * s.height;
->s.width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->width : Symbol(Rectangle.width, Decl(discriminatedUnionTypes1.ts, 6, 22))
->s.height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>width : Symbol(width, Decl(discriminatedUnionTypes1.ts, 6, 22))
+>s.height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->height : Symbol(Rectangle.height, Decl(discriminatedUnionTypes1.ts, 7, 18))
+>height : Symbol(height, Decl(discriminatedUnionTypes1.ts, 7, 18))
 
         case "circle": return Math.PI * s.radius * s.radius;
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
->s.radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>s.radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
 >s : Symbol(s, Decl(discriminatedUnionTypes1.ts, 54, 15))
->radius : Symbol(Circle.radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
+>radius : Symbol(radius, Decl(discriminatedUnionTypes1.ts, 12, 19))
     }
     return assertNever(s);
 >assertNever : Symbol(assertNever, Decl(discriminatedUnionTypes1.ts, 39, 1))
