--- old.tsxSpreadAttributesResolution13.types
+++ new.tsxSpreadAttributesResolution13.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 interface ComponentProps {
     property1: string;
@@= skipped -11, +11 lines =@@
 }
 
 export default function Component(props: ComponentProps) {
->Component : (props: ComponentProps) => JSX.Element
+>Component : (props: ComponentProps) => Element
 >props : ComponentProps
 
     let condition1: boolean;
@@= skipped -10, +10 lines =@@
 >condition1 : boolean
 
         return (
->(            <ChildComponent {...props} />        ) : JSX.Element
+>(            <ChildComponent {...props} />        ) : Element
 
             <ChildComponent {...props} />
-><ChildComponent {...props} /> : JSX.Element
->ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
+><ChildComponent {...props} /> : Element
+>ChildComponent : (__0: AnotherComponentProps) => Element
 >props : ComponentProps
 
         );
     }
     else {
         return (<ChildComponent {...props} property1="NewString" />);
->(<ChildComponent {...props} property1="NewString" />) : JSX.Element
-><ChildComponent {...props} property1="NewString" /> : JSX.Element
->ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
+>(<ChildComponent {...props} property1="NewString" />) : Element
+><ChildComponent {...props} property1="NewString" /> : Element
+>ChildComponent : (__0: AnotherComponentProps) => Element
 >props : ComponentProps
 >property1 : string
     }
@@= skipped -25, +25 lines =@@
 }
 
 function ChildComponent({ property1 }: AnotherComponentProps) {
->ChildComponent : ({ property1 }: AnotherComponentProps) => JSX.Element
+>ChildComponent : (__0: AnotherComponentProps) => Element
 >property1 : string
 
     return (
->(        <span>{property1}</span>    ) : JSX.Element
+>(        <span>{property1}</span>    ) : Element
 
         <span>{property1}</span>
-><span>{property1}</span> : JSX.Element
+><span>{property1}</span> : Element
 >span : any
 >property1 : string
 >span : any
