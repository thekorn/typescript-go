--- old.tsxElementResolution.symbols
+++ new.tsxElementResolution.symbols
@@= skipped -7, +7 lines =@@
 >IntrinsicElements : Symbol(IntrinsicElements, Decl(tsxElementResolution.tsx, 0, 23))
 
 		foundFirst: { x: string };
->foundFirst : Symbol(IntrinsicElements.foundFirst, Decl(tsxElementResolution.tsx, 1, 30))
+>foundFirst : Symbol(foundFirst, Decl(tsxElementResolution.tsx, 1, 30))
 >x : Symbol(x, Decl(tsxElementResolution.tsx, 2, 15))
 
 		'string_named';
->'string_named' : Symbol(IntrinsicElements['string_named'], Decl(tsxElementResolution.tsx, 2, 28))
+>'string_named' : Symbol(string_named, Decl(tsxElementResolution.tsx, 2, 28))
 
 		'var';
->'var' : Symbol(IntrinsicElements['var'], Decl(tsxElementResolution.tsx, 3, 17))
+>'var' : Symbol(var, Decl(tsxElementResolution.tsx, 3, 17))
 	}
 }
 
@@= skipped -27, +27 lines =@@
 // Should find the intrinsic element, not the class element
 var a = <foundFirst  x="hello" />;
 >a : Symbol(a, Decl(tsxElementResolution.tsx, 16, 3))
->foundFirst : Symbol(JSX.IntrinsicElements.foundFirst, Decl(tsxElementResolution.tsx, 1, 30))
+>foundFirst : Symbol(foundFirst, Decl(tsxElementResolution.tsx, 1, 30))
 >x : Symbol(x, Decl(tsxElementResolution.tsx, 16, 19))
 
 var b = <string_named />;
 >b : Symbol(b, Decl(tsxElementResolution.tsx, 17, 3))
->string_named : Symbol(JSX.IntrinsicElements['string_named'], Decl(tsxElementResolution.tsx, 2, 28))
+>string_named : Symbol(string_named, Decl(tsxElementResolution.tsx, 2, 28))
 
 // TODO: This should not be a parse error (should
 //        parse a property name here, not identifier)
@@= skipped -16, +16 lines =@@
 
 var e = <Dotted.Name />;
 >e : Symbol(e, Decl(tsxElementResolution.tsx, 22, 3))
->Dotted.Name : Symbol(Dotted.Name, Decl(tsxElementResolution.tsx, 11, 15))
+>Dotted.Name : Symbol(Name, Decl(tsxElementResolution.tsx, 11, 15))
 >Dotted : Symbol(Dotted, Decl(tsxElementResolution.tsx, 9, 14))
->Name : Symbol(Dotted.Name, Decl(tsxElementResolution.tsx, 11, 15))
+>Name : Symbol(Name, Decl(tsxElementResolution.tsx, 11, 15))
 
