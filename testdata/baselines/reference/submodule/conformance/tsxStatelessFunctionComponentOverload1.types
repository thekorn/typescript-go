//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload1.tsx] ////

=== file.tsx ===
import React = require('react')
>React : typeof __React

declare function OneThing(k: {yxx: string}): JSX.Element;
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>k : { yxx: string; }
>yxx : string
>JSX : any

declare function OneThing(k: {yxx1: string, children: string}): JSX.Element;
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>k : { yxx1: string; children: string; }
>yxx1 : string
>children : string
>JSX : any

declare function OneThing(l: {yy: number, yy1: string}): JSX.Element;
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>l : { yy: number; yy1: string; }
>yy : number
>yy1 : string
>JSX : any

declare function OneThing(l: {yy: number, yy1: string, yy2: boolean}): JSX.Element;
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>l : { yy: number; yy1: string; yy2: boolean; }
>yy : number
>yy1 : string
>yy2 : boolean
>JSX : any

declare function OneThing(l1: {data: string, "data-prop": boolean}): JSX.Element;
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>l1 : { data: string; "data-prop": boolean; }
>data : string
>"data-prop" : boolean
>JSX : any

// OK
const c1 = <OneThing yxx='ok' />
>c1 : Element
><OneThing yxx='ok' /> : Element
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>yxx : string

const c2 = <OneThing yy={100}  yy1="hello"/>
>c2 : Element
><OneThing yy={100}  yy1="hello"/> : Element
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>yy : number
>100 : 100
>yy1 : string

const c3 = <OneThing yxx="hello" ignore-prop />
>c3 : Element
><OneThing yxx="hello" ignore-prop /> : Element
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>yxx : string
>ignore-prop : true

const c4 = <OneThing data="hello" data-prop />
>c4 : Element
><OneThing data="hello" data-prop /> : Element
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>data : string
>data-prop : true

const c5 = <OneThing yxx1='ok'>Hello</OneThing>
>c5 : Element
><OneThing yxx1='ok'>Hello</OneThing> : Element
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }
>yxx1 : string
>OneThing : { (k: { yxx: string; }): Element; (k: { yxx1: string; children: string; }): Element; (l: { yy: number; yy1: string; }): Element; (l: { yy: number; yy1: string; yy2: boolean; }): Element; (l1: { data: string; "data-prop": boolean; }): Element; }


declare function TestingOneThing({y1: string}): JSX.Element;
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>y1 : any
>string : any
>JSX : any

declare function TestingOneThing(j: {"extra-data": string, yy?: string}): JSX.Element;
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>j : { "extra-data": string; yy?: string; }
>"extra-data" : string
>yy : string
>JSX : any

declare function TestingOneThing(n: {yy: number, direction?: number}): JSX.Element;
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>n : { yy: number; direction?: number; }
>yy : number
>direction : number
>JSX : any

declare function TestingOneThing(n: {yy: string, name: string}): JSX.Element;
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>n : { yy: string; name: string; }
>yy : string
>name : string
>JSX : any

// OK
const d1 = <TestingOneThing y1 extra-data />;
>d1 : Element
><TestingOneThing y1 extra-data /> : Element
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>y1 : true
>extra-data : true

const d2 = <TestingOneThing extra-data="hello" />;
>d2 : Element
><TestingOneThing extra-data="hello" /> : Element
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>extra-data : string

const d3 = <TestingOneThing extra-data="hello" yy="hihi" />;
>d3 : Element
><TestingOneThing extra-data="hello" yy="hihi" /> : Element
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>extra-data : string
>yy : string

const d4 = <TestingOneThing extra-data="hello" yy={9} direction={10} />;
>d4 : Element
><TestingOneThing extra-data="hello" yy={9} direction={10} /> : Element
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>extra-data : string
>yy : number
>9 : 9
>direction : number
>10 : 10

const d5 = <TestingOneThing extra-data="hello" yy="hello" name="Bob" />;
>d5 : Element
><TestingOneThing extra-data="hello" yy="hello" name="Bob" /> : Element
>TestingOneThing : { (__0: { y1: any; }): Element; (j: { "extra-data": string; yy?: string; }): Element; (n: { yy: number; direction?: number; }): Element; (n: { yy: string; name: string; }): Element; }
>extra-data : string
>yy : string
>name : string


declare function TestingOptional(a: {y1?: string, y2?: number}): JSX.Element;
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>a : { y1?: string; y2?: number; }
>y1 : string
>y2 : number
>JSX : any

declare function TestingOptional(a: {y1: boolean, y2?: number, y3: boolean}): JSX.Element;
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>a : { y1: boolean; y2?: number; y3: boolean; }
>y1 : boolean
>y2 : number
>y3 : boolean
>JSX : any

// OK
const e1 = <TestingOptional />
>e1 : Element
><TestingOptional /> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }

const e3 = <TestingOptional y1="hello"/>
>e3 : Element
><TestingOptional y1="hello"/> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>y1 : string

const e4 = <TestingOptional y1="hello" y2={1000} />
>e4 : Element
><TestingOptional y1="hello" y2={1000} /> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>y1 : string
>y2 : number
>1000 : 1000

const e5 = <TestingOptional y1 y3/>
>e5 : Element
><TestingOptional y1 y3/> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>y1 : true
>y3 : true

const e6 = <TestingOptional y1 y3 y2={10} />
>e6 : Element
><TestingOptional y1 y3 y2={10} /> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>y1 : true
>y3 : true
>y2 : number
>10 : 10

const e2 = <TestingOptional y1 y3 extra-prop/>
>e2 : Element
><TestingOptional y1 y3 extra-prop/> : Element
>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
>y1 : true
>y3 : true
>extra-prop : true



