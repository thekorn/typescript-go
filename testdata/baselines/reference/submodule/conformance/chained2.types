//// [tests/cases/conformance/externalModules/typeOnly/chained2.ts] ////

=== /a.ts ===
class A { a!: string }
>A : A
>a : string

export type { A as default };
>A : typeof A
>default : A

=== /b.ts ===
import A from './a';
>A : typeof A

import type { default as B } from './a';
>default : typeof A
>B : A

export { A, B };
>A : typeof A
>B : typeof A

=== /c.ts ===
import * as types from './b';
>types : typeof import("/b")

export { types as default };
>types : typeof import("/b")
>default : typeof import("/b")

=== /d.ts ===
import types from './c';
>types : typeof import("/b")

new types.A();
>new types.A() : any
>types.A : any
>types : typeof import("/b")
>A : any

new types.B();
>new types.B() : any
>types.B : any
>types : typeof import("/b")
>B : any

const a: types.A = {};
>a : A
>types : any
>{} : {}

const b: types.B = {};
>b : A
>types : any
>{} : {}

