--- old.objectSpread.types
+++ new.objectSpread.types
@@= skipped -353, +353 lines =@@
 
 // own methods are enumerable
 let cplus: { p: number, plus(): void } = { ...c, plus() { return this.p + 1; } };
->cplus : { p: number; plus(): void; }
+>cplus : { p: number; plus: () => void; }
 >p : number
 >plus : () => void
->{ ...c, plus() { return this.p + 1; } } : { p: number; plus(): any; }
+>{ ...c, plus() { return this.p + 1; } } : { p: number; plus: () => any; }
 >c : C
 >plus : () => any
 >this.p + 1 : any
@@= skipped -15, +15 lines =@@
 cplus.plus();
 >cplus.plus() : void
 >cplus.plus : () => void
->cplus : { p: number; plus(): void; }
+>cplus : { p: number; plus: () => void; }
 >plus : () => void
 
 // new field's type conflicting with existing field is OK
@@= skipped -27, +27 lines =@@
 
 // optional
 function container(
->container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string; }, optionalNumber: { sn?: number; }) => void
+>container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string | undefined; }, optionalNumber: { sn?: number | undefined; }) => void
 
     definiteBoolean: { sn: boolean },
 >definiteBoolean : { sn: boolean; }
@@= skipped -11, +11 lines =@@
 >sn : string
 
     optionalString: { sn?: string },
->optionalString : { sn?: string; }
+>optionalString : { sn?: string | undefined; }
 >sn : string | undefined
 
     optionalNumber: { sn?: number }) {
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }
 >sn : number | undefined
 
     let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
@@= skipped -13, +13 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }
 
     let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
 >optionalUnionDuplicates : { sn: string | number; }
@@= skipped -8, +8 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }
 
     let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
->allOptional : { sn?: string | number; }
+>allOptional : { sn?: string | number | undefined; }
 >sn : string | number | undefined
 >{ ...optionalString, ...optionalNumber } : { sn?: string | number | undefined; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }
 
     // computed property
     let computedFirst: { a: number, b: string, "before everything": number } =
@@= skipped -18, +18 lines =@@
 >"before everything" : number
 
         { ['before everything']: 12, ...o, b: 'yes' }
->{ ['before everything']: 12, ...o, b: 'yes' } : { a: number; "before everything": number; b: string; }
+>{ ['before everything']: 12, ...o, b: 'yes' } : { a: number; ['before everything']: number; b: string; }
 >['before everything'] : number
 >'before everything' : "before everything"
 >12 : 12
@@= skipped -15, +15 lines =@@
 >"at the end" : number
 
         { ...o, b: 'yeah', ['at the end']: 14 }
->{ ...o, b: 'yeah', ['at the end']: 14 } : { a: number; b: string; "at the end": number; }
+>{ ...o, b: 'yeah', ['at the end']: 14 } : { a: number; b: string; ['at the end']: number; }
 >o : { a: number; b: string; }
 >b : string
 >'yeah' : "yeah"
@@= skipped -106, +106 lines =@@
 >d : string
 
     f({ a: 1, id: true }, { c: 1, d: 'no' })
->f({ a: 1, id: true }, { c: 1, d: 'no' }) : never
+>f({ a: 1, id: true }, { c: 1, d: 'no' }) : { a: number; id: boolean; } & { c: number; d: string; } & { id: string; }
 >f : <T, U>(t: T, u: U) => T & U & { id: string; }
 >{ a: 1, id: true } : { a: number; id: true; }
 >a : number
@@= skipped -105, +105 lines =@@
 >v : T | U
 
     let x12 = { ...v, ...obj };
->x12 : (T & { x: number; }) | (U & { x: number; })
->{ ...v, ...obj } : (T & { x: number; }) | (U & { x: number; })
+>x12 : T & { x: number; } | U & { x: number; }
+>{ ...v, ...obj } : T & { x: number; } | U & { x: number; }
 >v : T | U
 >obj : { x: number; }
 
@@= skipped -11, +11 lines =@@
 >w : T | { s: string; }
 
     let x14 = { ...w, ...obj };
->x14 : { s: string; x: number; } | (T & { x: number; })
->{ ...w, ...obj } : { s: string; x: number; } | (T & { x: number; })
+>x14 : { s: string; x: number; } | T & { x: number; }
+>{ ...w, ...obj } : { s: string; x: number; } | T & { x: number; }
 >w : T | { s: string; }
 >obj : { x: number; }
 
     let x15 = { ...t, ...v };
->x15 : T | (T & U)
->{ ...t, ...v } : T | (T & U)
+>x15 : T | T & U
+>{ ...t, ...v } : T | T & U
 >t : T
 >v : T | U
 
     let x16 = { ...t, ...w };
->x16 : T | (T & { s: string; })
->{ ...t, ...w } : T | (T & { s: string; })
+>x16 : T | T & { s: string; }
+>{ ...t, ...w } : T | T & { s: string; }
 >t : T
 >w : T | { s: string; }
 
     let x17 = { ...t, ...w, ...obj };
->x17 : (T & { x: number; }) | (T & { s: string; x: number; })
->{ ...t, ...w, ...obj } : (T & { x: number; }) | (T & { s: string; x: number; })
+>x17 : T & { x: number; } | T & { s: string; x: number; }
+>{ ...t, ...w, ...obj } : T & { x: number; } | T & { s: string; x: number; }
 >t : T
 >w : T | { s: string; }
 >obj : { x: number; }
 
     let x18 = { ...t, ...v, ...w };
->x18 : T | (T & U) | (T & { s: string; }) | (T & U & { s: string; })
->{ ...t, ...v, ...w } : T | (T & U) | (T & { s: string; }) | (T & U & { s: string; })
+>x18 : T | T & U | T & { s: string; } | T & U & { s: string; }
+>{ ...t, ...v, ...w } : T | T & U | T & { s: string; } | T & U & { s: string; }
 >t : T
 >v : T | U
 >w : T | { s: string; }
