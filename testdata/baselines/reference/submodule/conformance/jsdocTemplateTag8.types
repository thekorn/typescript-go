//// [tests/cases/conformance/jsdoc/jsdocTemplateTag8.ts] ////

=== a.js ===
/**
 * @template out T
 * @typedef {Object} Covariant
 * @property {T} x
 */

/**
 * @type {Covariant<unknown>}
 */
let super_covariant = { x: 1 };
>super_covariant : { x: number; }
>{ x: 1 } : { x: number; }
>x : number
>1 : 1

/**
 * @type {Covariant<string>}
 */
let sub_covariant = { x: '' };
>sub_covariant : { x: string; }
>{ x: '' } : { x: string; }
>x : string
>'' : ""

super_covariant = sub_covariant;
>super_covariant = sub_covariant : { x: string; }
>super_covariant : { x: number; }
>sub_covariant : { x: string; }

sub_covariant   = super_covariant; // Error
>sub_covariant   = super_covariant : { x: number; }
>sub_covariant : { x: string; }
>super_covariant : { x: number; }

/**
 * @template in T
 * @typedef {Object} Contravariant
 * @property {(x: T) => void} f
 */

/**
 * @type {Contravariant<unknown>}
 */
let super_contravariant = { f: (x) => {} };
>super_contravariant : { f: (x: any) => void; }
>{ f: (x) => {} } : { f: (x: any) => void; }
>f : (x: any) => void
>(x) => {} : (x: any) => void
>x : any

/**
 * @type {Contravariant<string>}
 */
let sub_contravariant = { f: (x) => {} };
>sub_contravariant : { f: (x: any) => void; }
>{ f: (x) => {} } : { f: (x: any) => void; }
>f : (x: any) => void
>(x) => {} : (x: any) => void
>x : any

super_contravariant = sub_contravariant;  // Error
>super_contravariant = sub_contravariant : { f: (x: any) => void; }
>super_contravariant : { f: (x: any) => void; }
>sub_contravariant : { f: (x: any) => void; }

sub_contravariant = super_contravariant;
>sub_contravariant = super_contravariant : { f: (x: any) => void; }
>sub_contravariant : { f: (x: any) => void; }
>super_contravariant : { f: (x: any) => void; }

/**
 * @template in out T
 * @typedef {Object} Invariant
 * @property {(x: T) => T} f
 */

/**
 * @type {Invariant<unknown>}
 */
let super_invariant = { f: (x) => {} };
>super_invariant : { f: (x: any) => void; }
>{ f: (x) => {} } : { f: (x: any) => void; }
>f : (x: any) => void
>(x) => {} : (x: any) => void
>x : any

/**
 * @type {Invariant<string>}
 */
let sub_invariant = { f: (x) => { return "" } };
>sub_invariant : { f: (x: any) => string; }
>{ f: (x) => { return "" } } : { f: (x: any) => string; }
>f : (x: any) => string
>(x) => { return "" } : (x: any) => string
>x : any
>"" : ""

super_invariant = sub_invariant;  // Error
>super_invariant = sub_invariant : { f: (x: any) => string; }
>super_invariant : { f: (x: any) => void; }
>sub_invariant : { f: (x: any) => string; }

sub_invariant = super_invariant;  // Error
>sub_invariant = super_invariant : { f: (x: any) => void; }
>sub_invariant : { f: (x: any) => string; }
>super_invariant : { f: (x: any) => void; }

/**
 * @template in T
 * @param {T} x
 */
function f(x) {}
>f : (x: any) => void
>x : any

