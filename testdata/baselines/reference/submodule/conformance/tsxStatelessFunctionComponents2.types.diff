--- old.tsxStatelessFunctionComponents2.types
+++ new.tsxStatelessFunctionComponents2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 function Greet(x: {name?: string}) {
->Greet : (x: { name?: string; }) => JSX.Element
+>Greet : (x: { name?: string; }) => Element
 >x : { name?: string; }
 >name : string
 
 	return <div>Hello, {x}</div>;
-><div>Hello, {x}</div> : JSX.Element
+><div>Hello, {x}</div> : Element
 >div : any
 >x : { name?: string; }
 >div : any
@@= skipped -16, +16 lines =@@
 
 class BigGreeter extends React.Component<{ name?: string }, {}> {
 >BigGreeter : BigGreeter
->React.Component : React.Component<{ name?: string; }, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : Component<{ name?: string; }, {}>
+>React : typeof __React
+>Component : typeof Component
 >name : string
 
 	render() {
->render : () => JSX.Element
+>render : () => Element
 
 		return <div></div>;
-><div></div> : JSX.Element
+><div></div> : Element
 >div : any
 >div : any
 	}
@@= skipped -19, +19 lines =@@
 
 // OK
 let a = <Greet />;
->a : JSX.Element
-><Greet /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
+>a : Element
+><Greet /> : Element
+>Greet : (x: { name?: string; }) => Element
 
 // OK - always valid to specify 'key'
 let b = <Greet key="k" />;
->b : JSX.Element
-><Greet key="k" /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
+>b : Element
+><Greet key="k" /> : Element
+>Greet : (x: { name?: string; }) => Element
 >key : string
 
 // Error - not allowed to specify 'ref' on SFCs
 let c = <Greet ref="myRef" />;
->c : JSX.Element
-><Greet ref="myRef" /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
+>c : Element
+><Greet ref="myRef" /> : Element
+>Greet : (x: { name?: string; }) => Element
 >ref : string
 
 
 // OK - ref is valid for classes
 let d = <BigGreeter ref={x => x.greeting.substr(10)} />;
->d : JSX.Element
-><BigGreeter ref={x => x.greeting.substr(10)} /> : JSX.Element
+>d : Element
+><BigGreeter ref={x => x.greeting.substr(10)} /> : Element
 >BigGreeter : typeof BigGreeter
 >ref : (x: BigGreeter) => string
 >x => x.greeting.substr(10) : (x: BigGreeter) => string
@@= skipped -37, +37 lines =@@
 
 // Error ('subtr' not on string)
 let e = <BigGreeter ref={x => x.greeting.subtr(10)} />;
->e : JSX.Element
-><BigGreeter ref={x => x.greeting.subtr(10)} /> : JSX.Element
+>e : Element
+><BigGreeter ref={x => x.greeting.subtr(10)} /> : Element
 >BigGreeter : typeof BigGreeter
 >ref : (x: BigGreeter) => any
 >x => x.greeting.subtr(10) : (x: BigGreeter) => any
@@= skipped -16, +16 lines =@@
 
 // Error (ref callback is contextually typed)
 let f = <BigGreeter ref={x => x.notARealProperty} />;
->f : JSX.Element
-><BigGreeter ref={x => x.notARealProperty} /> : JSX.Element
+>f : Element
+><BigGreeter ref={x => x.notARealProperty} /> : Element
 >BigGreeter : typeof BigGreeter
 >ref : (x: BigGreeter) => any
 >x => x.notARealProperty : (x: BigGreeter) => any
@@= skipped -12, +12 lines =@@
 
 // OK - key is always valid
 let g = <BigGreeter key={100} />;
->g : JSX.Element
-><BigGreeter key={100} /> : JSX.Element
+>g : Element
+><BigGreeter key={100} /> : Element
 >BigGreeter : typeof BigGreeter
 >key : number
 >100 : 100
 
 // OK - contextually typed intrinsic ref callback parameter
 let h = <div ref={x => x.innerText} />;
->h : JSX.Element
-><div ref={x => x.innerText} /> : JSX.Element
+>h : Element
+><div ref={x => x.innerText} /> : Element
 >div : any
 >ref : (x: HTMLDivElement) => string
 >x => x.innerText : (x: HTMLDivElement) => string
@@= skipped -20, +20 lines =@@
 
 // Error - property not on ontextually typed intrinsic ref callback parameter
 let i = <div ref={x => x.propertyNotOnHtmlDivElement} />;
->i : JSX.Element
-><div ref={x => x.propertyNotOnHtmlDivElement} /> : JSX.Element
+>i : Element
+><div ref={x => x.propertyNotOnHtmlDivElement} /> : Element
 >div : any
 >ref : (x: HTMLDivElement) => any
 >x => x.propertyNotOnHtmlDivElement : (x: HTMLDivElement) => any
