//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsFunctions.ts] ////

=== index.js ===
export function a() {}
>a : () => void

export function b() {}
>b : { (): void; cat: string; }

b.cat = "cat";
>b.cat = "cat" : "cat"
>b.cat : string
>b : { (): void; cat: string; }
>cat : string
>"cat" : "cat"

export function c() {}
>c : { (): void; Cls: typeof Cls; }

c.Cls = class {}
>c.Cls = class {} : typeof Cls
>c.Cls : typeof Cls
>c : { (): void; Cls: typeof Cls; }
>Cls : typeof Cls
>class {} : typeof Cls

/**
 * @param {number} a
 * @param {number} b
 * @return {string} 
 */
export function d(a, b) { return /** @type {*} */(null); }
>d : (a: number, b: number) => string
>a : number
>b : number
>(null) : any
>null : any

/**
 * @template T,U
 * @param {T} a
 * @param {U} b
 * @return {T & U} 
 */
export function e(a, b) { return /** @type {*} */(null); }
>e : <T, U>(a: T, b: U) => T & U
>a : T
>b : U
>(null) : any
>null : any

/**
 * @template T
 * @param {T} a
 */
export function f(a) {
>f : { <T>(a: T): T; self: ???; }
>a : T

    return a;
>a : T
}
f.self = f;
>f.self = f : { <T>(a: T): T; self: ???; }
>f.self : { <T>(a: T): T; self: ???; }
>f : { <T>(a: T): T; self: ???; }
>self : { <T>(a: T): T; self: ???; }
>f : { <T>(a: T): T; self: ???; }

/**
 * @param {{x: string}} a
 * @param {{y: typeof b}} b
 */
function g(a, b) {
>g : (a: { x: string; }, b: { y: ???; }) => any
>a : { x: string; }
>b : { y: ???; }

    return a.x && b.y();
>a.x && b.y() : any
>a.x : string
>a : { x: string; }
>x : string
>b.y() : any
>b.y : { y: ???; }
>b : { y: ???; }
>y : { y: ???; }
}

export { g };
>g : (a: { x: string; }, b: { y: ???; }) => any

/**
 * @param {{x: string}} a
 * @param {{y: typeof b}} b
 */
function hh(a, b) {
>hh : (a: { x: string; }, b: { y: ???; }) => any
>a : { x: string; }
>b : { y: ???; }

    return a.x && b.y();
>a.x && b.y() : any
>a.x : string
>a : { x: string; }
>x : string
>b.y() : any
>b.y : { y: ???; }
>b : { y: ???; }
>y : { y: ???; }
}

export { hh as h };
>hh : (a: { x: string; }, b: { y: ???; }) => any
>h : (a: { x: string; }, b: { y: ???; }) => any

export function i() {}
>i : () => void

export { i as ii };
>i : () => void
>ii : () => void

export { j as jj };
>j : () => void
>jj : () => void

export function j() {}
>j : () => void

