--- old.exhaustiveSwitchStatements1.symbols
+++ new.exhaustiveSwitchStatements1.symbols
@@= skipped -58, +58 lines =@@
 
 enum E { A, B }
 >E : Symbol(E, Decl(exhaustiveSwitchStatements1.ts, 29, 1))
->A : Symbol(E.A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
->B : Symbol(E.B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
 
 function f(e: E): number {
 >f : Symbol(f, Decl(exhaustiveSwitchStatements1.ts, 33, 15))
@@= skipped -12, +12 lines =@@
 >e : Symbol(e, Decl(exhaustiveSwitchStatements1.ts, 35, 11))
 
         case E.A: return 0
->E.A : Symbol(E.A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
+>E.A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
 >E : Symbol(E, Decl(exhaustiveSwitchStatements1.ts, 29, 1))
->A : Symbol(E.A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
 
         case E.B: return 1
->E.B : Symbol(E.B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
+>E.B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
 >E : Symbol(E, Decl(exhaustiveSwitchStatements1.ts, 29, 1))
->B : Symbol(E.B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
     }
 }
 
@@= skipped -23, +23 lines =@@
 >e : Symbol(e, Decl(exhaustiveSwitchStatements1.ts, 42, 11))
 
             case E.A: return 0
->E.A : Symbol(E.A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
+>E.A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
 >E : Symbol(E, Decl(exhaustiveSwitchStatements1.ts, 29, 1))
->A : Symbol(E.A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 33, 8))
 
             case E.B: return 1
->E.B : Symbol(E.B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
+>E.B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
 >E : Symbol(E, Decl(exhaustiveSwitchStatements1.ts, 29, 1))
->B : Symbol(E.B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 33, 11))
         }
 }
 
@@= skipped -15, +15 lines =@@
 
 interface Square { kind: "square"; size: number; }
 >Square : Symbol(Square, Decl(exhaustiveSwitchStatements1.ts, 50, 1))
->kind : Symbol(Square.kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18))
->size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 54, 18))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 
 interface Rectangle { kind: "rectangle"; width: number; height: number; }
 >Rectangle : Symbol(Rectangle, Decl(exhaustiveSwitchStatements1.ts, 54, 50))
->kind : Symbol(Rectangle.kind, Decl(exhaustiveSwitchStatements1.ts, 56, 21))
->width : Symbol(Rectangle.width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
->height : Symbol(Rectangle.height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 56, 21))
+>width : Symbol(width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
+>height : Symbol(height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
 
 interface Circle { kind: "circle"; radius: number; }
 >Circle : Symbol(Circle, Decl(exhaustiveSwitchStatements1.ts, 56, 73))
->kind : Symbol(Circle.kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18))
->radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 
 interface Triangle { kind: "triangle"; side: number; }
 >Triangle : Symbol(Triangle, Decl(exhaustiveSwitchStatements1.ts, 58, 52))
->kind : Symbol(Triangle.kind, Decl(exhaustiveSwitchStatements1.ts, 60, 20))
->side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 60, 20))
+>side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 
 type Shape = Square | Rectangle | Circle | Triangle;
 >Shape : Symbol(Shape, Decl(exhaustiveSwitchStatements1.ts, 60, 54))
@@= skipped -41, +41 lines =@@
 
         case "square": area = s.size * s.size; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
->s.size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>s.size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
->s.size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>s.size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 
         case "rectangle": area = s.width * s.height; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
->s.width : Symbol(Rectangle.width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
+>s.width : Symbol(width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->width : Symbol(Rectangle.width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
->s.height : Symbol(Rectangle.height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
+>width : Symbol(width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
+>s.height : Symbol(height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->height : Symbol(Rectangle.height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
+>height : Symbol(height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
 
         case "circle": area = Math.PI * s.radius * s.radius; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
->s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>s.radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 
         case "triangle": area = Math.sqrt(3) / 4 * s.side * s.side; break;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
->Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>Math.sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
+>s.side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
->s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>s.side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 64, 14))
->side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
     }
     return area;
 >area : Symbol(area, Decl(exhaustiveSwitchStatements1.ts, 65, 7))
@@= skipped -61, +61 lines =@@
 >kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 58, 18), Decl(exhaustiveSwitchStatements1.ts, 56, 21), Decl(exhaustiveSwitchStatements1.ts, 54, 18), Decl(exhaustiveSwitchStatements1.ts, 60, 20))
 
             case "square": return s.size * s.size;
->s.size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>s.size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
->s.size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>s.size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->size : Symbol(Square.size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 54, 34))
 
             case "rectangle": return s.width * s.height;
->s.width : Symbol(Rectangle.width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
+>s.width : Symbol(width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->width : Symbol(Rectangle.width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
->s.height : Symbol(Rectangle.height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
+>width : Symbol(width, Decl(exhaustiveSwitchStatements1.ts, 56, 40))
+>s.height : Symbol(height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->height : Symbol(Rectangle.height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
+>height : Symbol(height, Decl(exhaustiveSwitchStatements1.ts, 56, 55))
 
             case "circle": return Math.PI * s.radius * s.radius;
->Math.PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
+>Math.PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --))
->s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>PI : Symbol(PI, Decl(lib.es5.d.ts, --, --))
+>s.radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
->s.radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>s.radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->radius : Symbol(Circle.radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 58, 34))
 
             case "triangle": return Math.sqrt(3) / 4 * s.side * s.side;
->Math.sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
+>Math.sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --))
->s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>sqrt : Symbol(sqrt, Decl(lib.es5.d.ts, --, --))
+>s.side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
->s.side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>s.side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 75, 21))
->side : Symbol(Triangle.side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
+>side : Symbol(side, Decl(exhaustiveSwitchStatements1.ts, 60, 38))
         }
     })();
     return area;
@@= skipped -48, +48 lines =@@
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
 
 	A,
->A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 
 	B
->B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 }
 
 function thisGivesError(e: MyEnum): string {
@@= skipped -18, +18 lines =@@
 >e : Symbol(e, Decl(exhaustiveSwitchStatements1.ts, 95, 24))
 
 		case MyEnum.A: s = "it was A"; break;
->MyEnum.A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>MyEnum.A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 96, 4))
 
 		case MyEnum.B: s = "it was B"; break;
->MyEnum.B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>MyEnum.B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 96, 4))
 	}
 	return s;
@@= skipped -27, +27 lines =@@
 >e : Symbol(e, Decl(exhaustiveSwitchStatements1.ts, 104, 15))
 
 		case MyEnum.A: s = "it was A"; break;
->MyEnum.A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>MyEnum.A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 105, 4))
 
 		case MyEnum.B: s = "it was B"; break;
->MyEnum.B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>MyEnum.B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 >s : Symbol(s, Decl(exhaustiveSwitchStatements1.ts, 105, 4))
 
 		default: s = "it was something else"; break;
@@= skipped -27, +27 lines =@@
 >e : Symbol(e, Decl(exhaustiveSwitchStatements1.ts, 114, 15))
 
 		case MyEnum.A: return "it was A";
->MyEnum.A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>MyEnum.A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->A : Symbol(MyEnum.A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
+>A : Symbol(A, Decl(exhaustiveSwitchStatements1.ts, 90, 13))
 
 		case MyEnum.B: return "it was B";
->MyEnum.B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>MyEnum.B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 >MyEnum : Symbol(MyEnum, Decl(exhaustiveSwitchStatements1.ts, 86, 1))
->B : Symbol(MyEnum.B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
+>B : Symbol(B, Decl(exhaustiveSwitchStatements1.ts, 91, 3))
 	}
 }
 
@@= skipped -17, +17 lines =@@
 >Level : Symbol(Level, Decl(exhaustiveSwitchStatements1.ts, 119, 1))
 
   One,
->One : Symbol(Level.One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
+>One : Symbol(One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
 
   Two,
->Two : Symbol(Level.Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
+>Two : Symbol(Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
 }
 
 const doSomethingWithLevel = (level: Level) => {
@@= skipped -19, +19 lines =@@
 >level : Symbol(level, Decl(exhaustiveSwitchStatements1.ts, 128, 30))
 
     case Level.One:
->Level.One : Symbol(Level.One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
+>Level.One : Symbol(One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
 >Level : Symbol(Level, Decl(exhaustiveSwitchStatements1.ts, 119, 1))
->One : Symbol(Level.One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
+>One : Symbol(One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
 
       next = Level.Two;
 >next : Symbol(next, Decl(exhaustiveSwitchStatements1.ts, 129, 5))
->Level.Two : Symbol(Level.Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
+>Level.Two : Symbol(Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
 >Level : Symbol(Level, Decl(exhaustiveSwitchStatements1.ts, 119, 1))
->Two : Symbol(Level.Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
+>Two : Symbol(Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
 
       break;
     case Level.Two:
->Level.Two : Symbol(Level.Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
+>Level.Two : Symbol(Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
 >Level : Symbol(Level, Decl(exhaustiveSwitchStatements1.ts, 119, 1))
->Two : Symbol(Level.Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
+>Two : Symbol(Two, Decl(exhaustiveSwitchStatements1.ts, 124, 6))
 
       next = Level.One;
 >next : Symbol(next, Decl(exhaustiveSwitchStatements1.ts, 129, 5))
->Level.One : Symbol(Level.One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
+>Level.One : Symbol(One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
 >Level : Symbol(Level, Decl(exhaustiveSwitchStatements1.ts, 119, 1))
->One : Symbol(Level.One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
+>One : Symbol(One, Decl(exhaustiveSwitchStatements1.ts, 123, 12))
 
       break;
   }
@@= skipped -35, +35 lines =@@
 >Square2 : Symbol(Square2, Decl(exhaustiveSwitchStatements1.ts, 139, 2))
 
     kind: "square";
->kind : Symbol(Square2.kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 143, 19))
 
     size: number;
->size : Symbol(Square2.size, Decl(exhaustiveSwitchStatements1.ts, 144, 19))
+>size : Symbol(size, Decl(exhaustiveSwitchStatements1.ts, 144, 19))
 }
 
 interface Circle2 {
 >Circle2 : Symbol(Circle2, Decl(exhaustiveSwitchStatements1.ts, 146, 1))
 
     kind: "circle";
->kind : Symbol(Circle2.kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19))
+>kind : Symbol(kind, Decl(exhaustiveSwitchStatements1.ts, 148, 19))
 
     radius: number;
->radius : Symbol(Circle2.radius, Decl(exhaustiveSwitchStatements1.ts, 149, 19))
+>radius : Symbol(radius, Decl(exhaustiveSwitchStatements1.ts, 149, 19))
 }
 
 type Shape2 = Square2 | Circle2;
@@= skipped -105, +105 lines =@@
 
 enum Animal { DOG, CAT }
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
->CAT : Symbol(Animal.CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
+>DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>CAT : Symbol(CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
 
 declare const zoo: { animal: Animal } | undefined;
 >zoo : Symbol(zoo, Decl(exhaustiveSwitchStatements1.ts, 200, 13))
@@= skipped -16, +16 lines =@@
 >zoo?.animal : Symbol(animal, Decl(exhaustiveSwitchStatements1.ts, 200, 20))
 >zoo : Symbol(zoo, Decl(exhaustiveSwitchStatements1.ts, 200, 13))
 >animal : Symbol(animal, Decl(exhaustiveSwitchStatements1.ts, 200, 20))
->Animal.DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>Animal.DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
 
         case Animal.DOG: return Animal.DOG
->Animal.DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>Animal.DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
->Animal.DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>Animal.DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->DOG : Symbol(Animal.DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
+>DOG : Symbol(DOG, Decl(exhaustiveSwitchStatements1.ts, 198, 13))
 
         case Animal.CAT: return Animal.CAT
->Animal.CAT : Symbol(Animal.CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
+>Animal.CAT : Symbol(CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->CAT : Symbol(Animal.CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
->Animal.CAT : Symbol(Animal.CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
+>CAT : Symbol(CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
+>Animal.CAT : Symbol(CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
 >Animal : Symbol(Animal, Decl(exhaustiveSwitchStatements1.ts, 194, 1))
->CAT : Symbol(Animal.CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
+>CAT : Symbol(CAT, Decl(exhaustiveSwitchStatements1.ts, 198, 18))
     }
 }
 
