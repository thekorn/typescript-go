--- old.checkJsxChildrenProperty6.types
+++ new.checkJsxChildrenProperty6.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 interface Prop {
     a: number,
@@= skipped -10, +10 lines =@@
 >b : string
 
     children: JSX.Element | JSX.Element[];
->children : JSX.Element[] | JSX.Element
+>children : Element[] | Element
 >JSX : any
 >JSX : any
 }
 
 class Button extends React.Component<any, any> {
 >Button : Button
->React.Component : React.Component<any, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : Component<any, any>
+>React : typeof __React
+>Component : typeof Component
 
     render() {
->render : () => JSX.Element
+>render : () => Element
 
         return (<div>My Button</div>)
->(<div>My Button</div>) : JSX.Element
-><div>My Button</div> : JSX.Element
+>(<div>My Button</div>) : Element
+><div>My Button</div> : Element
 >div : any
 >div : any
     }
 }
 
 function AnotherButton(p: any) {
->AnotherButton : (p: any) => JSX.Element
+>AnotherButton : (p: any) => Element
 >p : any
 
     return <h1>Just Another Button</h1>;
-><h1>Just Another Button</h1> : JSX.Element
+><h1>Just Another Button</h1> : Element
 >h1 : any
 >h1 : any
 }
 
 function Comp(p: Prop) {
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 >p : Prop
 
     return <div>{p.b}</div>;
-><div>{p.b}</div> : JSX.Element
+><div>{p.b}</div> : Element
 >div : any
 >p.b : string
 >p : Prop
@@= skipped -47, +47 lines =@@
 
 // Ok
 let k1 =
->k1 : JSX.Element
+>k1 : Element
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">        <Button />        <AnotherButton />    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi">        <Button />        <AnotherButton />    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
         <Button />
-><Button /> : JSX.Element
+><Button /> : Element
 >Button : typeof Button
 
         <AnotherButton />
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
+><AnotherButton /> : Element
+>AnotherButton : (p: any) => Element
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k2 =
->k2 : JSX.Element
+>k2 : Element
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">                     <Button />        <AnotherButton />    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi">                     <Button />        <AnotherButton />    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
@@= skipped -33, +33 lines =@@
     
     
         <Button />
-><Button /> : JSX.Element
+><Button /> : Element
 >Button : typeof Button
 
         <AnotherButton />
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
+><AnotherButton /> : Element
+>AnotherButton : (p: any) => Element
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k3 = <Comp a={10} b="hi"><Button />  
->k3 : JSX.Element
-><Comp a={10} b="hi"><Button />  <AnotherButton /></Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+>k3 : Element
+><Comp a={10} b="hi"><Button />  <AnotherButton /></Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
-><Button /> : JSX.Element
+><Button /> : Element
 >Button : typeof Button
 
 <AnotherButton />
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
+><AnotherButton /> : Element
+>AnotherButton : (p: any) => Element
 
 </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k4 = <Comp a={10} b="hi"><Button /></Comp>;
->k4 : JSX.Element
-><Comp a={10} b="hi"><Button /></Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+>k4 : Element
+><Comp a={10} b="hi"><Button /></Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
-><Button /> : JSX.Element
+><Button /> : Element
 >Button : typeof Button
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
