//// [tests/cases/conformance/jsdoc/jsdocTemplateTag6.ts] ////

=== a.js ===
/**
 * @template const T
 * @param {T} x
 * @returns {T}
 */
function f1(x) {
>f1 : (x: any) => any
>x : any

    return x;
>x : any
}
const t1 = f1("a");
>t1 : any
>f1("a") : any
>f1 : (x: any) => any
>"a" : "a"

const t2 = f1(["a", ["b", "c"]]);
>t2 : any
>f1(["a", ["b", "c"]]) : any
>f1 : (x: any) => any
>["a", ["b", "c"]] : (string | string[])[]
>"a" : "a"
>["b", "c"] : string[]
>"b" : "b"
>"c" : "c"

const t3 = f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t3 : any
>f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : any
>f1 : (x: any) => any
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: number; b: string; d: (string | number | boolean | { f: string; })[]; }
>a : number
>1 : 1
>b : string
>"c" : "c"
>d : (string | number | boolean | { f: string; })[]
>["e", 2, true, { f: "g" }] : (string | number | boolean | { f: string; })[]
>"e" : "e"
>2 : 2
>true : true
>{ f: "g" } : { f: string; }
>f : string
>"g" : "g"

/**
 * @template const T, U
 * @param {T} x
 * @returns {T}
 */
function f2(x) {
>f2 : (x: any) => any
>x : any

    return x;
>x : any

};
const t4 = f2('a');
>t4 : any
>f2('a') : any
>f2 : (x: any) => any
>'a' : "a"

const t5 = f2(['a', ['b', 'c']]);
>t5 : any
>f2(['a', ['b', 'c']]) : any
>f2 : (x: any) => any
>['a', ['b', 'c']] : (string | string[])[]
>'a' : "a"
>['b', 'c'] : string[]
>'b' : "b"
>'c' : "c"

const t6 = f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t6 : any
>f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : any
>f2 : (x: any) => any
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: number; b: string; d: (string | number | boolean | { f: string; })[]; }
>a : number
>1 : 1
>b : string
>"c" : "c"
>d : (string | number | boolean | { f: string; })[]
>["e", 2, true, { f: "g" }] : (string | number | boolean | { f: string; })[]
>"e" : "e"
>2 : 2
>true : true
>{ f: "g" } : { f: string; }
>f : string
>"g" : "g"

/**
 * @template const T
 * @param {T} x
 * @returns {T[]}
 */
function f3(x) {
>f3 : (x: any) => any[]
>x : any

    return [x];
>[x] : any[]
>x : any
}
const t7 = f3("hello");
>t7 : any[]
>f3("hello") : any[]
>f3 : (x: any) => any[]
>"hello" : "hello"

const t8 = f3("hello");
>t8 : any[]
>f3("hello") : any[]
>f3 : (x: any) => any[]
>"hello" : "hello"

/**
 * @template const T
 * @param {[T, T]} x
 * @returns {T}
 */
function f4(x) {
>f4 : (x: any) => any
>x : any

    return x[0];
>x[0] : any
>x : any
>0 : 0
}
const t9 = f4([[1, "x"], [2, "y"]]);
>t9 : any
>f4([[1, "x"], [2, "y"]]) : any
>f4 : (x: any) => any
>[[1, "x"], [2, "y"]] : (string | number)[][]
>[1, "x"] : (string | number)[]
>1 : 1
>"x" : "x"
>[2, "y"] : (string | number)[]
>2 : 2
>"y" : "y"

const t10 = f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]);
>t10 : any
>f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]) : any
>f4 : (x: any) => any
>[{ a: 1, b: "x" }, { a: 2, b: "y" }] : { a: number; b: string; }[]
>{ a: 1, b: "x" } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>"x" : "x"
>{ a: 2, b: "y" } : { a: number; b: string; }
>a : number
>2 : 2
>b : string
>"y" : "y"

/**
 * @template const T
 * @param {{ x: T, y: T}} obj
 * @returns {T}
 */
function f5(obj) {
>f5 : (obj: any) => any
>obj : any

    return obj.x;
>obj.x : any
>obj : any
>x : any
}
const t11 = f5({ x: [1, "x"], y: [2, "y"] });
>t11 : any
>f5({ x: [1, "x"], y: [2, "y"] }) : any
>f5 : (obj: any) => any
>{ x: [1, "x"], y: [2, "y"] } : { x: (string | number)[]; y: (string | number)[]; }
>x : (string | number)[]
>[1, "x"] : (string | number)[]
>1 : 1
>"x" : "x"
>y : (string | number)[]
>[2, "y"] : (string | number)[]
>2 : 2
>"y" : "y"

const t12 = f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } });
>t12 : any
>f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } }) : any
>f5 : (obj: any) => any
>{ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } } : { x: { a: number; b: string; }; y: { a: number; b: string; }; }
>x : { a: number; b: string; }
>{ a: 1, b: "x" } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>"x" : "x"
>y : { a: number; b: string; }
>{ a: 2, b: "y" } : { a: number; b: string; }
>a : number
>2 : 2
>b : string
>"y" : "y"

/**
 * @template const T
 */
class C {
>C : C

    /**
     * @param {T} x
     */
    constructor(x) {}
>x : any

    /**
     * @template const U
     * @param {U} x
     */
    foo(x) {
>foo : (x: any) => any
>x : any

        return x;
>x : any
    }
}

const t13 = new C({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t13 : C
>new C({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : C
>C : typeof C
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: number; b: string; d: (string | number | boolean | { f: string; })[]; }
>a : number
>1 : 1
>b : string
>"c" : "c"
>d : (string | number | boolean | { f: string; })[]
>["e", 2, true, { f: "g" }] : (string | number | boolean | { f: string; })[]
>"e" : "e"
>2 : 2
>true : true
>{ f: "g" } : { f: string; }
>f : string
>"g" : "g"

const t14 = t13.foo(["a", ["b", "c"]]);
>t14 : any
>t13.foo(["a", ["b", "c"]]) : any
>t13.foo : (x: any) => any
>t13 : C
>foo : (x: any) => any
>["a", ["b", "c"]] : (string | string[])[]
>"a" : "a"
>["b", "c"] : string[]
>"b" : "b"
>"c" : "c"

/**
 * @template {readonly unknown[]} const T
 * @param {T} args
 * @returns {T}
 */
function f6(...args) {
>f6 : (...args: any[]) => any[]
>args : any[]

    return args;
>args : any[]
}
const t15 = f6(1, 'b', { a: 1, b: 'x' });
>t15 : any[]
>f6(1, 'b', { a: 1, b: 'x' }) : any[]
>f6 : (...args: any[]) => any[]
>1 : 1
>'b' : "b"
>{ a: 1, b: 'x' } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>'x' : "x"

