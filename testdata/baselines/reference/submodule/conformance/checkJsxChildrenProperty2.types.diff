--- old.checkJsxChildrenProperty2.types
+++ new.checkJsxChildrenProperty2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 interface Prop {
     a: number,
@@= skipped -10, +10 lines =@@
 >b : string
 
     children: string | JSX.Element
->children : string | JSX.Element
+>children : string | Element
 >JSX : any
 }
 
 function Comp(p: Prop) {
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 >p : Prop
 
     return <div>{p.b}</div>;
-><div>{p.b}</div> : JSX.Element
+><div>{p.b}</div> : Element
 >div : any
 >p.b : string
 >p : Prop
@@= skipped -19, +19 lines =@@
 
 // Error: missing children
 let k = <Comp a={10} b="hi" />;
->k : JSX.Element
-><Comp a={10} b="hi" /> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+>k : Element
+><Comp a={10} b="hi" /> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
 let k0 =
->k0 : JSX.Element
+>k0 : Element
 
     <Comp a={10} b="hi" children="Random" >
-><Comp a={10} b="hi" children="Random" >        hi hi hi!    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi" children="Random" >        hi hi hi!    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
@@= skipped -20, +20 lines =@@
 
         hi hi hi!
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let o = {
 >o : { children: string; }
@@= skipped -11, +11 lines =@@
 >"Random" : "Random"
 }
 let k1 =
->k1 : JSX.Element
+>k1 : Element
 
     <Comp a={10} b="hi" {...o} >
-><Comp a={10} b="hi" {...o} >        hi hi hi!    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi" {...o} >        hi hi hi!    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
@@= skipped -12, +12 lines =@@
 
         hi hi hi!
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 // Error: incorrect type
 let k2 =
->k2 : JSX.Element
+>k2 : Element
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">        <div> My Div </div>        {(name: string) => <div> My name {name} </div>}    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi">        <div> My Div </div>        {(name: string) => <div> My name {name} </div>}    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
         <div> My Div </div>
-><div> My Div </div> : JSX.Element
+><div> My Div </div> : Element
 >div : any
 >div : any
 
         {(name: string) => <div> My name {name} </div>}
->(name: string) => <div> My name {name} </div> : (name: string) => JSX.Element
+>(name: string) => <div> My name {name} </div> : (name: string) => Element
 >name : string
-><div> My name {name} </div> : JSX.Element
+><div> My name {name} </div> : Element
 >div : any
 >name : string
 >div : any
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k3 =
->k3 : JSX.Element
+>k3 : Element
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">        <div> My Div </div>        {1000000}    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi">        <div> My Div </div>        {1000000}    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
         <div> My Div </div>
-><div> My Div </div> : JSX.Element
+><div> My Div </div> : Element
 >div : any
 >div : any
 
@@= skipped -48, +48 lines =@@
 >1000000 : 1000000
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k4 =
->k4 : JSX.Element
+>k4 : Element
 
     <Comp a={10} b="hi" >
-><Comp a={10} b="hi" >        <div> My Div </div>        hi hi hi!    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi" >        <div> My Div </div>        hi hi hi!    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
         <div> My Div </div>
-><div> My Div </div> : JSX.Element
+><div> My Div </div> : Element
 >div : any
 >div : any
 
         hi hi hi!
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
 let k5 =
->k5 : JSX.Element
+>k5 : Element
 
     <Comp a={10} b="hi" >
-><Comp a={10} b="hi" >        <div> My Div </div>        <div> My Div </div>    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
+><Comp a={10} b="hi" >        <div> My Div </div>        <div> My Div </div>    </Comp> : Element
+>Comp : (p: Prop) => Element
 >a : number
 >10 : 10
 >b : string
 
         <div> My Div </div>
-><div> My Div </div> : JSX.Element
+><div> My Div </div> : Element
 >div : any
 >div : any
 
         <div> My Div </div>
-><div> My Div </div> : JSX.Element
+><div> My Div </div> : Element
 >div : any
 >div : any
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => Element
 
