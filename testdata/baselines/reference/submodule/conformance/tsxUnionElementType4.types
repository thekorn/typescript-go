//// [tests/cases/conformance/jsx/tsxUnionElementType4.tsx] ////

=== file.tsx ===
import React = require('react');
>React : typeof __React

class RC1 extends React.Component<{x : number}, {}> {
>RC1 : RC1
>React.Component : Component<{ x: number; }, {}>
>React : typeof __React
>Component : typeof Component
>x : number

    render() {
>render : () => any

        return null;
    }
}

class RC2 extends React.Component<{ x: string }, {}> {
>RC2 : RC2
>React.Component : Component<{ x: string; }, {}>
>React : typeof __React
>Component : typeof Component
>x : string

    render() {
>render : () => any

        return null;
    }
    private method() { }
>method : () => void
}

class RC3 extends React.Component<{}, {}> {
>RC3 : RC3
>React.Component : Component<{}, {}>
>React : typeof __React
>Component : typeof Component

    render() {
>render : () => any

        return null;
    }
}

class RC4 extends React.Component<{}, {}> {
>RC4 : RC4
>React.Component : Component<{}, {}>
>React : typeof __React
>Component : typeof Component

    render() {
>render : () => any

        return null;
    }
}

var RCComp = RC1 || RC2;
>RCComp : typeof RC1 | typeof RC2
>RC1 || RC2 : typeof RC1 | typeof RC2
>RC1 : typeof RC1
>RC2 : typeof RC2

var EmptyRCComp = RC3 || RC4;
>EmptyRCComp : typeof RC3
>RC3 || RC4 : typeof RC3
>RC3 : typeof RC3
>RC4 : typeof RC4

var PartRCComp = RC1 || RC4;
>PartRCComp : typeof RC4
>RC1 || RC4 : typeof RC4
>RC1 : typeof RC1
>RC4 : typeof RC4

// Error
let a = <RCComp x />;
>a : any
><RCComp x /> : any
>RCComp : typeof RC1 | typeof RC2
>x : any

let b = <PartRCComp x={10} />
>b : any
><PartRCComp x={10} /> : any
>PartRCComp : typeof RC4
>x : any
>10 : 10

let c = <EmptyRCComp prop />;
>c : any
><EmptyRCComp prop /> : any
>EmptyRCComp : typeof RC3
>prop : any

