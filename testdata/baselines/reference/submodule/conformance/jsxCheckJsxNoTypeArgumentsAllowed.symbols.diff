--- old.jsxCheckJsxNoTypeArgumentsAllowed.symbols
+++ new.jsxCheckJsxNoTypeArgumentsAllowed.symbols
@@= skipped -6, +6 lines =@@
 export declare class MyComp<P> extends React.Component<P, {}> {
 >MyComp : Symbol(MyComp, Decl(component.d.ts, 0, 31))
 >P : Symbol(P, Decl(component.d.ts, 1, 28))
->React.Component : Symbol(React.Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
+>React.Component : Symbol(Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
 >React : Symbol(React, Decl(component.d.ts, 0, 6))
->Component : Symbol(React.Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
+>Component : Symbol(Component, Decl(react.d.ts, 158, 55), Decl(react.d.ts, 161, 66))
 >P : Symbol(P, Decl(component.d.ts, 1, 28))
 
     internalProp: P;
->internalProp : Symbol(MyComp.internalProp, Decl(component.d.ts, 1, 63))
+>internalProp : Symbol(internalProp, Decl(component.d.ts, 1, 63))
 >P : Symbol(P, Decl(component.d.ts, 1, 28))
 }
 
@@= skipped -14, +14 lines =@@
 >Prop : Symbol(Prop, Decl(component.d.ts, 3, 1))
 
     a: number,
->a : Symbol(Prop.a, Decl(component.d.ts, 5, 23))
+>a : Symbol(a, Decl(component.d.ts, 5, 23))
 
     b: string
->b : Symbol(Prop.b, Decl(component.d.ts, 6, 14))
+>b : Symbol(b, Decl(component.d.ts, 6, 14))
 }
 
 === file.jsx ===
