//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassMethod.ts] ////

=== jsDeclarationsClassMethod.js ===
function C1() {
>C1 : { (): void; staticProp: (x: any, y: any) => any; }

    /**
     * A comment prop
     * @param {number} x
     * @param {number} y
     * @returns {number}
     */
    this.prop = function (x, y) {
>this.prop = function (x, y) {        return x + y;    } : (x: any, y: any) => any
>this.prop : any
>this : any
>prop : any
>function (x, y) {        return x + y;    } : (x: any, y: any) => any
>x : any
>y : any

        return x + y;
>x + y : any
>x : any
>y : any
    }
}

/**
 * A comment method
 * @param {number} x
 * @param {number} y
 * @returns {number}
 */
C1.prototype.method = function (x, y) {
>C1.prototype.method = function (x, y) {    return x + y;} : (x: any, y: any) => any
>C1.prototype.method : any
>C1.prototype : any
>C1 : { (): void; staticProp: (x: any, y: any) => any; }
>prototype : any
>method : any
>function (x, y) {    return x + y;} : (x: any, y: any) => any
>x : any
>y : any

    return x + y;
>x + y : any
>x : any
>y : any
}

/**
 * A comment staticProp
 * @param {number} x
 * @param {number} y
 * @returns {number}
 */
C1.staticProp = function (x, y) {
>C1.staticProp = function (x, y) {    return x + y;} : (x: any, y: any) => any
>C1.staticProp : (x: any, y: any) => any
>C1 : { (): void; staticProp: (x: any, y: any) => any; }
>staticProp : (x: any, y: any) => any
>function (x, y) {    return x + y;} : (x: any, y: any) => any
>x : any
>y : any

    return x + y;
>x + y : any
>x : any
>y : any
}

class C2 {
>C2 : C2

    /**
     * A comment method1
     * @param {number} x
     * @param {number} y
     * @returns {number}
     */
    method1(x, y) {
>method1 : (x: any, y: any) => any
>x : any
>y : any

        return x + y;
>x + y : any
>x : any
>y : any
    }
}

/**
 * A comment method2
 * @param {number} x
 * @param {number} y
 * @returns {number}
 */
C2.prototype.method2 = function (x, y) {
>C2.prototype.method2 = function (x, y) {    return x + y;} : (x: any, y: any) => any
>C2.prototype.method2 : any
>C2.prototype : C2
>C2 : typeof C2
>prototype : C2
>method2 : any
>function (x, y) {    return x + y;} : (x: any, y: any) => any
>x : any
>y : any

    return x + y;
>x + y : any
>x : any
>y : any
}

/**
 * A comment staticProp
 * @param {number} x
 * @param {number} y
 * @returns {number}
 */
C2.staticProp = function (x, y) {
>C2.staticProp = function (x, y) {    return x + y;} : (x: any, y: any) => any
>C2.staticProp : any
>C2 : typeof C2
>staticProp : any
>function (x, y) {    return x + y;} : (x: any, y: any) => any
>x : any
>y : any

    return x + y;
>x + y : any
>x : any
>y : any
}

