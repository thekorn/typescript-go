--- old.argumentExpressionContextualTyping.types
+++ new.argumentExpressionContextualTyping.types
@@= skipped -2, +2 lines =@@
 === argumentExpressionContextualTyping.ts ===
 // In a typed function call, argument expressions are contextually typed by their corresponding parameter types.
 function foo({x: [a, b], y: {c, d, e}}) { }
->foo : ({ x: [a, b], y: { c, d, e } }: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
+>foo : (__0: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
 >x : any
 >a : any
 >b : any
@@= skipped -10, +10 lines =@@
 >e : any
 
 function bar({x: [a, b = 10], y: {c, d, e = { f:1 }}}) { }
->bar : ({ x: [a, b], y: { c, d, e } }: { x: [any, number?]; y: { c: any; d: any; e?: { f: number; }; }; }) => void
+>bar : (__0: { x: [any, number?]; y: { c: any; d: any; e?: { f: number; }; }; }) => void
 >x : any
 >a : any
 >b : number
@@= skipped -56, +56 lines =@@
 
 foo(o1); // Not error since x has contextual type of tuple namely [string, number]
 >foo(o1) : void
->foo : ({ x: [a, b], y: { c, d, e } }: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
+>foo : (__0: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
 >o1 : { x: [string, number]; y: { c: boolean; d: string; e: number; }; }
 
 foo({ x: ["string", 1], y: { c: true, d: "world", e: 3 } }); // Not error
 >foo({ x: ["string", 1], y: { c: true, d: "world", e: 3 } }) : void
->foo : ({ x: [a, b], y: { c, d, e } }: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
+>foo : (__0: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
 >{ x: ["string", 1], y: { c: true, d: "world", e: 3 } } : { x: [string, number]; y: { c: boolean; d: string; e: number; }; }
 >x : [string, number]
 >["string", 1] : [string, number]
@@= skipped -64, +64 lines =@@
 
 foo(o);                              // Error because x has an array type namely (string|number)[]
 >foo(o) : void
->foo : ({ x: [a, b], y: { c, d, e } }: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
+>foo : (__0: { x: [any, any]; y: { c: any; d: any; e: any; }; }) => void
 >o : { x: (string | number)[]; y: { c: boolean; d: string; e: number; }; }
 
