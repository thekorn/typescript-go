//// [tests/cases/conformance/jsx/checkJsxSubtleSkipContextSensitiveBug.tsx] ////

=== checkJsxSubtleSkipContextSensitiveBug.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : typeof React

interface ErrorResult { error: true }
>error : true
>true : true

interface AsyncLoaderProps<TResult> {
    readonly prop1: () => Promise<TResult>;
>prop1 : () => Promise<TResult>

    readonly prop2: (result: Exclude<TResult, ErrorResult>) => any;
>prop2 : (result: Exclude<TResult, ErrorResult>) => any
>result : Exclude<TResult, ErrorResult>
}

class AsyncLoader<TResult> extends React.Component<AsyncLoaderProps<TResult>> {
>AsyncLoader : AsyncLoader<TResult>
>React.Component : Component<AsyncLoaderProps<TResult>, {}, any>
>React : typeof React
>Component : typeof Component

    render() { return null; }
>render : () => null
}

async function load(): Promise<{ success: true } | ErrorResult> {
>load : () => Promise<ErrorResult | { success: true; }>
>success : true
>true : true

    return { success: true };
>{ success: true } : { success: true; }
>success : true
>true : true
}

const loader = <AsyncLoader
>loader : Element
><AsyncLoader    prop1={load}    prop2={result => result}/> : Element
>AsyncLoader : typeof AsyncLoader

    prop1={load}
>prop1 : () => Promise<ErrorResult | { success: true; }>
>load : () => Promise<ErrorResult | { success: true; }>

    prop2={result => result}
>prop2 : (result: { success: true; }) => { success: true; }
>result => result : (result: { success: true; }) => { success: true; }
>result : { success: true; }
>result : { success: true; }

/>;

