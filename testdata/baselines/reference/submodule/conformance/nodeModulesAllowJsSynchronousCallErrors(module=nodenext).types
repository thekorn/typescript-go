//// [tests/cases/conformance/node/allowJs/nodeModulesAllowJsSynchronousCallErrors.ts] ////

=== subfolder/index.js ===
// cjs format file
import {h} from "../index.js";
>h : () => Promise<void>

import mod = require("../index.js");
>mod : typeof import("index")

import {f as _f} from "./index.js";
>f : () => Promise<void>
>_f : () => Promise<void>

import mod2 = require("./index.js");
>mod2 : typeof import("subfolder/index")

export async function f() {
>f : () => Promise<void>

    const mod3 = await import ("../index.js");
>mod3 : typeof import("index")
>await import ("../index.js") : typeof import("index")
>import ("../index.js") : Promise<typeof import("index")>
>"../index.js" : "../index.js"

    const mod4 = await import ("./index.js");
>mod4 : typeof import("subfolder/index")
>await import ("./index.js") : typeof import("subfolder/index")
>import ("./index.js") : Promise<typeof import("subfolder/index")>
>"./index.js" : "./index.js"

    h();
>h() : Promise<void>
>h : () => Promise<void>
}
=== index.js ===
// esm format file
import {h as _h} from "./index.js";
>h : () => Promise<void>
>_h : () => Promise<void>

import mod = require("./index.js");
>mod : typeof import("index")

import {f} from "./subfolder/index.js";
>f : () => Promise<void>

import mod2 = require("./subfolder/index.js");
>mod2 : typeof import("subfolder/index")

export async function h() {
>h : () => Promise<void>

    const mod3 = await import ("./index.js");
>mod3 : typeof import("index")
>await import ("./index.js") : typeof import("index")
>import ("./index.js") : Promise<typeof import("index")>
>"./index.js" : "./index.js"

    const mod4 = await import ("./subfolder/index.js");
>mod4 : typeof import("subfolder/index")
>await import ("./subfolder/index.js") : typeof import("subfolder/index")
>import ("./subfolder/index.js") : Promise<typeof import("subfolder/index")>
>"./subfolder/index.js" : "./subfolder/index.js"

    f();
>f() : Promise<void>
>f : () => Promise<void>
}
