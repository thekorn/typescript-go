//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsJSDocRedirectedLookups.ts] ////

=== index.js ===
// these are recognized as TS concepts by the checker
/** @type {String} */const a = "";
>a : String
>"" : ""

/** @type {Number} */const b = 0;
>b : Number
>0 : 0

/** @type {Boolean} */const c = true;
>c : Boolean
>true : true

/** @type {Void} */const d = undefined;
>d : Void
>undefined : undefined

/** @type {Undefined} */const e = undefined;
>e : Undefined
>undefined : undefined

/** @type {Null} */const f = null;
>f : Null

/** @type {Function} */const g = () => void 0;
>g : Function
>() => void 0 : () => undefined
>void 0 : undefined
>0 : 0

/** @type {function} */const h = () => void 0;
>h : function
>() => void 0 : () => undefined
>void 0 : undefined
>0 : 0

/** @type {array} */const i = [];
>i : array
>[] : never[]

/** @type {promise} */const j = Promise.resolve(0);
>j : promise
>Promise.resolve(0) : Promise<number>
>Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>Promise : PromiseConstructor
>resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>0 : 0

/** @type {Object<string, string>} */const k = {x: "x"};
>k : any
>{x: "x"} : { x: string; }
>x : string
>"x" : "x"


// these are not recognized as anything and should just be lookup failures
// ignore the errors to try to ensure they're emitted as `any` in declaration emit
// @ts-ignore
/** @type {class} */const l = true;
>l : class
>true : true

// @ts-ignore
/** @type {bool} */const m = true;
>m : bool
>true : true

// @ts-ignore
/** @type {int} */const n = true;
>n : int
>true : true

// @ts-ignore
/** @type {float} */const o = true;
>o : float
>true : true

// @ts-ignore
/** @type {integer} */const p = true;
>p : integer
>true : true

// or, in the case of `event` likely erroneously refers to the type of the global Event object
/** @type {event} */const q = undefined;
>q : event
>undefined : undefined

