//// [tests/cases/conformance/salsa/constructorFunctionMethodTypeParameters.ts] ////

=== constructorFunctionMethodTypeParameters.js ===
/**
 * @template {string} T
 * @param {T} t
 */
function Cls(t) {
>Cls : <T extends string>(t: T) => void
>t : T

    this.t = t;
>this.t = t : T
>this.t : any
>this : any
>t : any
>t : T
}

/**
 * @template {string} V
 * @param {T} t
 * @param {V} v
 * @return {V}
 */
Cls.prototype.topLevelComment = function (t, v) {
>Cls.prototype.topLevelComment = function (t, v) {    return v} : (t: any, v: any) => any
>Cls.prototype.topLevelComment : any
>Cls.prototype : any
>Cls : <T extends string>(t: T) => void
>prototype : any
>topLevelComment : any
>function (t, v) {    return v} : (t: any, v: any) => any
>t : any
>v : any

    return v
>v : any

};

Cls.prototype.nestedComment =
>Cls.prototype.nestedComment =    /**     * @template {string} U     * @param {T} t     * @param {U} u     * @return {T}     */    function (t, u) {        return t    } : <U extends string>(t: T, u: U) => T
>Cls.prototype.nestedComment : any
>Cls.prototype : any
>Cls : <T extends string>(t: T) => void
>prototype : any
>nestedComment : any

    /**
     * @template {string} U
     * @param {T} t
     * @param {U} u
     * @return {T}
     */
    function (t, u) {
>function (t, u) {        return t    } : <U extends string>(t: T, u: U) => T
>t : T
>u : U

        return t
>t : T

    };

var c = new Cls('a');
>c : any
>new Cls('a') : any
>Cls : <T extends string>(t: T) => void
>'a' : "a"

const s = c.topLevelComment('a', 'b');
>s : any
>c.topLevelComment('a', 'b') : any
>c.topLevelComment : any
>c : any
>topLevelComment : any
>'a' : "a"
>'b' : "b"

const t = c.nestedComment('a', 'b');
>t : any
>c.nestedComment('a', 'b') : any
>c.nestedComment : any
>c : any
>nestedComment : any
>'a' : "a"
>'b' : "b"


