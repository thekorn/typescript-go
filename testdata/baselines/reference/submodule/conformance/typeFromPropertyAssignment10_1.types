//// [tests/cases/conformance/salsa/typeFromPropertyAssignment10_1.ts] ////

=== module.js ===
var Outer = Outer ?? {};
>Outer : any
>Outer ?? {} : any
>Outer : any
>{} : {}

Outer.app = Outer.app ?? {};
>Outer.app = Outer.app ?? {} : any
>Outer.app : any
>Outer : any
>app : any
>Outer.app ?? {} : any
>Outer.app : any
>Outer : any
>app : any
>{} : {}

=== someview.js ===
Outer.app.SomeView = (function () {
>Outer.app.SomeView = (function () {    var SomeView = function() {        var me = this;    }    return SomeView;})() : () => void
>Outer.app.SomeView : any
>Outer.app : any
>Outer : any
>app : any
>SomeView : any
>(function () {    var SomeView = function() {        var me = this;    }    return SomeView;})() : () => void
>(function () {    var SomeView = function() {        var me = this;    }    return SomeView;}) : () => () => void
>function () {    var SomeView = function() {        var me = this;    }    return SomeView;} : () => () => void

    var SomeView = function() {
>SomeView : () => void
>function() {        var me = this;    } : () => void

        var me = this;
>me : any
>this : any
    }
    return SomeView;
>SomeView : () => void

})();
Outer.app.Inner = class {
>Outer.app.Inner = class {    constructor() {        /** @type {number} */        this.y = 12;    }} : typeof Inner
>Outer.app.Inner : any
>Outer.app : any
>Outer : any
>app : any
>Inner : any
>class {    constructor() {        /** @type {number} */        this.y = 12;    }} : typeof Inner

    constructor() {
        /** @type {number} */
        this.y = 12;
>this.y = 12 : 12
>this.y : any
>this : this
>y : any
>12 : 12
    }
}
var example = new Outer.app.Inner();
>example : any
>new Outer.app.Inner() : any
>Outer.app.Inner : any
>Outer.app : any
>Outer : any
>app : any
>Inner : any

example.y;
>example.y : any
>example : any
>y : any

/** @param {number} k */
Outer.app.statische = function (k) {
>Outer.app.statische = function (k) {    return k ** k;} : (k: any) => number
>Outer.app.statische : any
>Outer.app : any
>Outer : any
>app : any
>statische : any
>function (k) {    return k ** k;} : (k: any) => number
>k : any

    return k ** k;
>k ** k : number
>k : any
>k : any
}
=== application.js ===
Outer.app.Application = (function () {
>Outer.app.Application = (function () {    /**     * Application main class.     * Will be instantiated & initialized by HTML page     */    var Application = function () {        var me = this;        me.view = new Outer.app.SomeView();    };    return Application;})() : () => void
>Outer.app.Application : any
>Outer.app : any
>Outer : any
>app : any
>Application : any
>(function () {    /**     * Application main class.     * Will be instantiated & initialized by HTML page     */    var Application = function () {        var me = this;        me.view = new Outer.app.SomeView();    };    return Application;})() : () => void
>(function () {    /**     * Application main class.     * Will be instantiated & initialized by HTML page     */    var Application = function () {        var me = this;        me.view = new Outer.app.SomeView();    };    return Application;}) : () => () => void
>function () {    /**     * Application main class.     * Will be instantiated & initialized by HTML page     */    var Application = function () {        var me = this;        me.view = new Outer.app.SomeView();    };    return Application;} : () => () => void

    /**
     * Application main class.
     * Will be instantiated & initialized by HTML page
     */
    var Application = function () {
>Application : () => void
>function () {        var me = this;        me.view = new Outer.app.SomeView();    } : () => void

        var me = this;
>me : any
>this : any

        me.view = new Outer.app.SomeView();
>me.view = new Outer.app.SomeView() : any
>me.view : any
>me : any
>view : any
>new Outer.app.SomeView() : any
>Outer.app.SomeView : any
>Outer.app : any
>Outer : any
>app : any
>SomeView : any

    };
    return Application;
>Application : () => void

})();
=== main.js ===
var app = new Outer.app.Application();
>app : any
>new Outer.app.Application() : any
>Outer.app.Application : any
>Outer.app : any
>Outer : any
>app : any
>Application : any

var inner = new Outer.app.Inner();
>inner : any
>new Outer.app.Inner() : any
>Outer.app.Inner : any
>Outer.app : any
>Outer : any
>app : any
>Inner : any

inner.y;
>inner.y : any
>inner : any
>y : any

/** @type {Outer.app.Inner} */
var x;
>x : any

x.y;
>x.y : any
>x : any
>y : any

Outer.app.statische(101); // Infinity, duh
>Outer.app.statische(101) : any
>Outer.app.statische : any
>Outer.app : any
>Outer : any
>app : any
>statische : any
>101 : 101

