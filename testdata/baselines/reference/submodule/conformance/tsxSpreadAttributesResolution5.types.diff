--- old.tsxSpreadAttributesResolution5.types
+++ new.tsxSpreadAttributesResolution5.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : typeof __React
 
 interface PoisonedProp {
     x: string;
@@= skipped -12, +12 lines =@@
 
 class Poisoned extends React.Component<PoisonedProp, {}> {
 >Poisoned : Poisoned
->React.Component : React.Component<PoisonedProp, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : Component<PoisonedProp, {}>
+>React : typeof __React
+>Component : typeof Component
 
     render() {
->render : () => JSX.Element
+>render : () => Element
 
         return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : Element
 >div : any
 >div : any
     }
@@= skipped -30, +30 lines =@@
 
 // Error as "obj" has type { x: string; y: number }
 let p = <Poisoned {...obj} />;
->p : JSX.Element
-><Poisoned {...obj} /> : JSX.Element
+>p : Element
+><Poisoned {...obj} /> : Element
 >Poisoned : typeof Poisoned
 >obj : { x: string; y: number; }
 
 class EmptyProp extends React.Component<{}, {}> {
 >EmptyProp : EmptyProp
->React.Component : React.Component<{}, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : Component<{}, {}>
+>React : typeof __React
+>Component : typeof Component
 
     render() {
->render : () => JSX.Element
+>render : () => Element
 
         return <div>Default hi</div>;
-><div>Default hi</div> : JSX.Element
+><div>Default hi</div> : Element
 >div : any
 >div : any
     }
@@= skipped -33, +33 lines =@@
 }
 // Ok
 let e = <EmptyProp {...o} />;
->e : JSX.Element
-><EmptyProp {...o} /> : JSX.Element
+>e : Element
+><EmptyProp {...o} /> : Element
 >EmptyProp : typeof EmptyProp
 >o : { prop1: boolean; }
 
