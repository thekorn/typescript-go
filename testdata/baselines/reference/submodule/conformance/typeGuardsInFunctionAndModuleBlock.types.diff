--- old.typeGuardsInFunctionAndModuleBlock.types
+++ new.typeGuardsInFunctionAndModuleBlock.types
@@= skipped -3, +3 lines =@@
 // typeguards are scoped in function/module block
 
 function foo(x: number | string | boolean) {
->foo : (x: number | string | boolean) => string
+>foo : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
@@= skipped -44, +44 lines =@@
         } ();
 }
 function foo2(x: number | string | boolean) {
->foo2 : (x: number | string | boolean) => string
+>foo2 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
@@= skipped -46, +46 lines =@@
 >x : number | boolean
 }
 function foo3(x: number | string | boolean) {
->foo3 : (x: number | string | boolean) => string
+>foo3 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
@@= skipped -44, +44 lines =@@
         })();
 }
 function foo4(x: number | string | boolean) {
->foo4 : (x: number | string | boolean) => string
+>foo4 : (x: string | number | boolean) => string
 >x : string | number | boolean
 
     return typeof x === "string"
@@= skipped -47, +47 lines =@@
 }
 // Type guards do not affect nested function declarations
 function foo5(x: number | string | boolean) {
->foo5 : (x: number | string | boolean) => void
+>foo5 : (x: string | number | boolean) => void
 >x : string | number | boolean
 
     if (typeof x === "string") {
